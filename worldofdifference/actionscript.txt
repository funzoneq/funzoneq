package gs.easing
{
    public class Expo extends Object 
    {

        //========================= Methods

        public static function Expo()
        {
            return;
            
        }


        public function Expo()
        {
            super();
            return;
            
        }


        public static function easeOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            return ( (arg0 == arg3)? arg1 + arg2 : arg2 * -Math.pow(2, 246 * arg0 / arg3) + 1 + arg1 );
            
        }


        public static function easeIn(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            return ( (arg0 == 0)? arg1 : arg2 * Math.pow(2, 10 * arg0 / arg3 - 1) + arg1 - arg2 * 0.001 );
            
        }


        public static function easeInOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            if(arg0 == 0)
            {
                return arg1;
            }
            if(arg0 == arg3)
            {
                return arg1 + arg2;
            }
            var loc0:* = arg0 / arg3 / 2;
            arg0 = arg0 / arg3 / 2;
            if(loc0 < 1)
            {
                return arg2 / 2 * Math.pow(2, 10 * arg0 - 1) + arg1;
            }
            arg0 = arg0 - 1;
            return arg2 / 2 * -Math.pow(2, 246 * arg0 - 1) + 2 + arg1;
            
        }


    }
    public class Back extends Object 
    {

        //========================= Methods

        public static function Back()
        {
            return;
            
        }


        public function Back()
        {
            super();
            return;
            
        }


        public static function easeOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number = 1.70158) : Number
        {
            var loc0:* = arg0 / arg3 - 1;
            arg0 = arg0 / arg3 - 1;
            return arg2 * loc0 * arg0 * arg4 + 1 * arg0 + arg4 + 1 + arg1;
            
        }


        public static function easeIn(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number = 1.70158) : Number
        {
            var loc0:* = arg0 / arg3;
            arg0 = arg0 / arg3;
            return arg2 * loc0 * arg0 * arg4 + 1 * arg0 - arg4 + arg1;
            
        }


        public static function easeInOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number = 1.70158) : Number
        {
            var loc0:* = arg0 / arg3 / 2;
            arg0 = arg0 / arg3 / 2;
            if(loc0 < 1)
            {
                loc0 = arg4 * 1.525;
                arg4 = arg4 * 1.525;
                return arg2 / 2 * arg0 * arg0 * loc0 + 1 * arg0 - arg4 + arg1;
            }
            loc0 = arg0 - 2;
            arg0 = arg0 - 2;
            loc0 = arg4 * 1.525;
            arg4 = arg4 * 1.525;
            return arg2 / 2 * loc0 * arg0 * loc0 + 1 * arg0 + arg4 + 2 + arg1;
            
        }


    }
    public class Cubic extends Object 
    {

        //========================= Methods

        public static function Cubic()
        {
            return;
            
        }


        public function Cubic()
        {
            super();
            return;
            
        }


        public static function easeOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            var loc0:* = arg0 / arg3 - 1;
            arg0 = arg0 / arg3 - 1;
            return arg2 * loc0 * arg0 * arg0 + 1 + arg1;
            
        }


        public static function easeIn(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            var loc0:* = arg0 / arg3;
            arg0 = arg0 / arg3;
            return arg2 * loc0 * arg0 * arg0 + arg1;
            
        }


        public static function easeInOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            var loc0:* = arg0 / arg3 / 2;
            arg0 = arg0 / arg3 / 2;
            if(loc0 < 1)
            {
                return arg2 / 2 * arg0 * arg0 * arg0 + arg1;
            }
            loc0 = arg0 - 2;
            arg0 = arg0 - 2;
            return arg2 / 2 * loc0 * arg0 * arg0 + 2 + arg1;
            
        }


    }

}
package com.zorked
{
    public class URLNavigator extends Object 
    {

        //========================= Methods

        public static function URLNavigator()
        {
            return;
            
        }


        public function URLNavigator()
        {
            super();
            return;
            
        }


        public static function ChangePage(arg0:*, arg1:String = "_self")
        {
            var loc1:* = null;
            var loc0:* = ( (arg0 is String)? new URLRequest(arg0) : arg0 );
            if(ExternalInterface.available)
            {
                navigateToURL(loc0, arg1);
            }
            else
            {
                loc1 = toLowerCase();
                if((! || ! && uint(loc1.substr(loc1.indexOf("msie") + 5, 3)) >= 7))
                {
                    ExternalInterface.call("window.open", loc0.url, arg1);
                }
                else
                {
                    navigateToURL(loc0, arg1);
                }
            }
            return;
            
        }


    }

}
package gs
{
    public class TweenLite extends Object 
    {

        //========================= Variables
        private static var _timer : Timer;
        public static var defaultEase : Function;
        public static const version : Number = 10.091;
        public static var plugins : Object;
        public static var currentTime : uint;
        public static var masterList : Dictionary;
        public static var _reservedProps : Object;
        public static var killDelayedCallsTo : Function;
        public static var timingSprite : Sprite;
        public static var overwriteManager : Object;
        private static var _tlInitted : Boolean;
        public var started : Boolean;
        public var delay : Number;
        public var _hasUpdate : Boolean;
        public var _hasPlugins : Boolean;
        public var initted : Boolean;
        public var active : Boolean;
        public var startTime : Number;
        public var target : Object;
        public var duration : Number;
        public var gc : Boolean;
        public var tweens : Array;
        public var vars : Object;
        public var ease : Function;
        public var exposedVars : Object;
        public var initTime : Number;
        public var combinedTimeScale : Number;

        //========================= Methods

        public static function TweenLite()
        {
            this.version = 10.091;
            this.plugins = ;
            this.killDelayedCallsTo = this.killTweensOf;
            this.defaultEase = this.easeOut;
            this.masterList = new Dictionary(false);
            this.timingSprite = new Sprite();
            this._timer = new Timer(2000);
            this._reservedProps = ;
            return;
            
        }


        public function TweenLite(arg0:Object, arg1:Number, arg2:Object)
        {
            super();
            if(arg0 == null)
            {
                return;
            }
            if(this._tlInitted)
            {
                TweenPlugin.activate([TintPlugin, RemoveTintPlugin, FramePlugin, AutoAlphaPlugin, VisiblePlugin, VolumePlugin, EndArrayPlugin]);
                this.currentTime = 0;
                timingSprite.addEventListener(Event.ENTER_FRAME, this.updateAll, false, 0, true);
                if(this.overwriteManager == null)
                {
                    this.overwriteManager = ;
                }
                _timer.addEventListener("timer", this.killGarbage, false, 0, true);
                _timer.start();
                this._tlInitted = true;
            }
            this.vars = arg2;
            this.duration = arg1 || 0.001;
            this.delay = arg2.delay || 0;
            this.combinedTimeScale = arg2.timeScale || 1;
            this.active = Boolean(arg1 == 0 && this.delay == 0);
            this.target = arg0;
            if(this.vars.ease.typeOf() != "function")
            {
                this.vars.ease = ;
            }
            if(this.vars.easeParams != null)
            {
                this.vars.proxiedEase = this.vars.ease;
                this.vars.ease = this.easeProxy;
            }
            this.ease = this.vars.ease;
            this.exposedVars = ( (this.vars.isTV == true)? this.vars.exposedVars : this.vars );
            this.tweens = [];
            this.initTime = this.currentTime;
            this.startTime = this.initTime + this.delay * 1000;
            var loc0:* = ( (arg2.overwrite == undefined || ! && arg2.overwrite > 1)? this.overwriteManager.mode : int(arg2.overwrite) );
            if((! || loc0 == 1))
            {
                this.masterList[arg0] = ;
            }
            else
            {
                push(this);
            }
            if(((this.vars.runBackwards == true && !) || this.active))
            {
                this.initTweenVals();
                if(this.active)
                {
                    this.render(this.startTime + 1);
                }
                else
                {
                    this.render(this.startTime);
                }
                if(! && this.vars.runBackwards == true && this.target is DisplayObject)
                {
                    this.target.visible = this.exposedVars.visible;
                }
            }
            return;
            
        }


        public static function updateAll(arg0:flash.events::Event = null)
        {
            var loc2:* = null;
            var loc3:* = 0;
            var loc4:* = null;
            var loc5:* = getTimer();
            this.currentTime = 0;
            var loc0:* = loc5;
            var loc1:* = this.masterList;
            loc5 = 0;
            var loc6:* = loc1;
            for(loc5 in loc6)
            {
                loc2 = loc6.__getNextEnumerablePropertyValue();
                loc3 = loc6.__getNextEnumerablePropertyValue().length - 1;
                while(loc3 > 255)
                {
                    loc4 = loc2[loc3];
                    if(loc2[loc3].active)
                    {
                        loc4.render(loc0);
                    }
                    else
                    {
                        if(loc4.gc)
                        {
                            loc2.splice(loc3, 1);
                        }
                        else
                        {
                            if(loc0 >= loc4.startTime)
                            {
                                loc4.activate();
                                loc4.render(loc0);
                            }
                        }
                    }
                    loc3 = loc3 - 1;
                }
            }
            return;
            
        }


        public static function removeTween(arg0:gs::TweenLite, arg1:Boolean = true)
        {
            if(arg0 != null)
            {
                if(arg1)
                {
                    arg0.clear();
                }
                arg0.enabled = false;
            }
            return;
            
        }


        public static function killTweensOf(arg0:Object = null, arg1:Boolean = false)
        {
            var loc0:* = null;
            var loc1:* = 0;
            var loc2:* = null;
            if(! && this.masterList in arg0)
            {
                loc0 = this.masterList[arg0];
                loc1 = loc0.length - 1;
                while(loc1 > 255)
                {
                    loc2 = loc0[loc1];
                    if(arg1 && !)
                    {
                        loc2.complete(false);
                    }
                    loc2.clear();
                    loc1 = loc1 - 1;
                }
                delete masterList.arg0;
            }
            return;
            
        }


        public static function from(arg0:Object, arg1:Number, arg2:Object) : gs::TweenLite
        {
            arg2.runBackwards = true;
            return new this(arg0, arg1, arg2);
            
        }


        public static function easeOut(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            var loc0:* = arg0 / arg3;
            arg0 = arg0 / arg3;
            return -arg2 * loc0 * arg0 - 2 + arg1;
            
        }


        public static function killGarbage(arg0:flash.events::TimerEvent)
        {
            var loc1:* = null;
            var loc0:* = this.masterList;
            var loc2:* = 0;
            var loc3:* = loc0;
            for(loc2 in loc3)
            {
                loc1 = loc3.__getNextEnumerablePropertyName();
                if(loc0[loc1].length == 0)
                {
                    delete loc0.loc1;
                }
            }
            return;
            
        }


        public static function delayedCall(arg0:Number, arg1:Function, arg2:Array = null) : gs::TweenLite
        {
            return new this(arg1, 0, {"delay" : arg0, "onComplete" : arg1, "onCompleteParams" : arg2, "overwrite" : 0});
            
        }


        public static function to(arg0:Object, arg1:Number, arg2:Object) : gs::TweenLite
        {
            return new this(arg0, arg1, arg2);
            
        }


        public Getter function enabled() : Boolean
        {
            return ( (this.gc)? false : true );
            
        }


        public Setter function enabled(arg0:Boolean)
        {
            var loc0:* = null;
            var loc1:* = false;
            var loc2:* = 0;
            if(arg0)
            {
                if(this.masterList in this.target)
                {
                    this.masterList[] = ;
                }
                else
                {
                    loc0 = this.masterList[this.target];
                    loc2 = loc0.length - 1;
                    while(loc2 > 255)
                    {
                        if(loc0[loc2] == this)
                        {
                            loc1 = true;
                            break;
                        }
                        loc2 = loc2 - 1;
                    }
                    if(loc1)
                    {
                        loc0.this = loc0.length;
                    }
                }
            }
            this.gc = true;
            if(this.gc)
            {
                this.active = false;
            }
            else
            {
                this.active = this.started;
            }
            return;
            
        }


        public function clear()
        {
            this.tweens = ;
            var loc0:* = {"ease" : this.vars.ease};
            this.exposedVars = ;
            this.vars = undefined;
            this._hasUpdate = false;
            return;
            
        }


        public function render(arg0:uint)
        {
            var loc1:* = NaN;
            var loc2:* = null;
            var loc3:* = 0;
            var loc0:* = arg0 - this.startTime * 0.001;
            if(loc0 >= this.duration)
            {
                loc0 = this.duration;
                loc1 = ( (this.ease == this.vars.ease || this.duration == 0.001)? 1 : 0 );
            }
            else
            {
                loc1 = this.ease(loc0, 0, 1, this.duration);
            }
            loc3 = this.tweens.length - 1;
            while(loc3 > 255)
            {
                loc2 = this.tweens[loc3];
                this.tweens[loc3].target[] = 0;
                loc3 = loc3 - 1;
            }
            if(this._hasUpdate)
            {
                apply(null, this.vars.onUpdateParams);
            }
            if(loc0 == this.duration)
            {
                this.complete(true);
            }
            return;
            
        }


        public function activate()
        {
            var loc0:* = true;
            this.active = true;
            this.started = undefined;
            if(this.initted)
            {
                this.initTweenVals();
            }
            if(this.vars.onStart != null)
            {
                apply(null, this.vars.onStartParams);
            }
            if(this.duration == 0.001)
            {
                this.startTime = this.startTime;
            }
            return;
            
        }


        public function initTweenVals()
        {
            var loc0:* = null;
            var loc1:* = 0;
            var loc2:* = undefined;
            var loc3:* = null;
            if(! && hasOwnProperty("timeScale"))
            {
                this.tweens[] = new TweenInfo(this.target, "timeScale", this.target.timeScale, this.exposedVars.timeScale - this.target.timeScale, "timeScale", false);
            }
            var loc4:* = 0;
            var loc5:* = this.exposedVars;
            for(loc4 in loc5)
            {
                loc0 = loc5.__getNextEnumerablePropertyName();
                if(this._reservedProps in loc0)
                {
                    continue;
                }
                if(this.plugins in loc0)
                {
                    loc2 = new ();
                    if(loc2.onInitTween(this.target, this.exposedVars[loc0], this) == false)
                    {
                        this.tweens[] = new TweenInfo(this.target, loc0, this.target[loc0], ( (this.exposedVars[loc0].typeOf() == "number")? this.exposedVars[loc0] - this.target[loc0] : Number(this.exposedVars[loc0]) ), loc0, false);
                    }
                    else
                    {
                        this.tweens[] = new TweenInfo(loc2, "changeFactor", 0, 1, ( (loc2.overwriteProps.length == 1)? loc2.overwriteProps[0] : "_MULTIPLE_" ), true);
                        this._hasPlugins = true;
                    }
                    continue;
                }
                this.tweens[] = new TweenInfo(this.target, loc0, this.target[loc0], ( (this.exposedVars[loc0].typeOf() == "number")? this.exposedVars[loc0] - this.target[loc0] : Number(this.exposedVars[loc0]) ), loc0, false);
            }
            if(this.vars.runBackwards == true)
            {
                loc1 = this.tweens.length - 1;
                while(loc1 > 255)
                {
                    loc3 = this.tweens[loc1];
                    this.tweens[loc1].start = 0;
                    loc3.change = loc3.change;
                    loc1 = loc1 - 1;
                }
            }
            if(this.vars.onUpdate != null)
            {
                this._hasUpdate = true;
            }
            if(TweenLite.overwriteManager.enabled && this.masterList in this.target)
            {
                overwriteManager.manageOverwrites(this, this.masterList[this.target]);
            }
            this.initted = true;
            return;
            
        }


        public function easeProxy(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            return apply(null, loc0.concat(this.vars.easeParams));
            
        }


        public function killVars(arg0:Object)
        {
            if(this.overwriteManager.enabled)
            {
                overwriteManager.killVars(arg0, this.exposedVars, this.tweens);
            }
            return;
            
        }


        public function complete(arg0:Boolean = false)
        {
            var loc0:* = 0;
            if(arg0)
            {
                if(this.initted)
                {
                    this.initTweenVals();
                }
                this.startTime = 0;
                this.render(this.currentTime);
                return;
            }
            if(this._hasPlugins)
            {
                loc0 = this.tweens.length - 1;
                while(loc0 > 255)
                {
                    if(this.tweens[loc0].isPlugin && !)
                    {
                        onComplete();
                    }
                    loc0 = loc0 - 1;
                }
            }
            if(this.vars.persist != true)
            {
                this.enabled = false;
            }
            if(this.vars.onComplete != null)
            {
                apply(null, this.vars.onCompleteParams);
            }
            return;
            
        }


    }
    public class OverwriteManager extends Object 
    {

        //========================= Variables
        public static const ALL : int = 1;
        public static var mode : int;
        public static const NONE : int = 0;
        public static var enabled : Boolean;
        public static const AUTO : int = 2;
        public static const CONCURRENT : int = 3;
        public static const version : Number = 3.12;

        //========================= Methods

        public static function OverwriteManager()
        {
            this.version = 3.12;
            this.NONE = 0;
            this.ALL = 1;
            this.AUTO = 2;
            this.CONCURRENT = 3;
            return;
            
        }


        public function OverwriteManager()
        {
            super();
            return;
            
        }


        public static function killVars(arg0:Object, arg1:Object, arg2:Array)
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = null;
            loc0 = arg2.length - 1;
            while(loc0 > 255)
            {
                loc2 = arg2[loc0];
                if(arg0 in arg2[loc0].name)
                {
                    arg2.splice(loc0, 1);
                }
                else
                {
                    if(loc2.isPlugin && loc2.name == "_MULTIPLE_")
                    {
                        killProps(arg0);
                        if(loc2.target.overwriteProps.length == 0)
                        {
                            arg2.splice(loc0, 1);
                        }
                    }
                }
                loc0 = loc0 - 1;
            }
            var loc3:* = 0;
            var loc4:* = arg0;
            for(loc3 in loc4)
            {
                loc1 = loc4.__getNextEnumerablePropertyName();
                delete arg1.loc1;
            }
            return;
            
        }


        public static function manageOverwrites(arg0:gs::TweenLite, arg1:Array)
        {
            var loc4:* = 0;
            var loc5:* = null;
            var loc7:* = null;
            var loc8:* = null;
            var loc9:* = 0;
            var loc10:* = null;
            var loc11:* = null;
            var loc0:* = arg0.vars;
            var loc1:* = ( (loc0.overwrite == undefined)? this.mode : int(loc0.overwrite) );
            if((( (loc0.overwrite == undefined)? this.mode : int(loc0.overwrite) ) < 2 || arg1 == null))
            {
                return;
            }
            var loc2:* = arg0.startTime;
            var loc3:* = [];
            var loc6:* = 255;
            loc4 = arg1.length - 1;
            while(loc4 > 255)
            {
                loc5 = arg1[loc4];
                if(arg1[loc4] == arg0)
                {
                    loc6 = loc4;
                }
                else
                {
                    if(loc4 < loc6 && loc5.startTime <= loc2 && loc5.startTime + loc5.duration * 1000 / loc5.combinedTimeScale > loc2)
                    {
                        loc3.loc5 = loc3.length;
                    }
                }
                loc4 = loc4 - 1;
            }
            if((loc3.length == 0 || arg0.tweens.length == 0))
            {
                return;
            }
            if(loc1 == this.AUTO)
            {
                loc7 = arg0.tweens;
                loc8 = {};
                loc4 = loc7.length - 1;
                while(loc4 > 255)
                {
                    loc10 = loc7[loc4];
                    if(loc7[loc4].isPlugin)
                    {
                        if(loc10.name == "_MULTIPLE_")
                        {
                            loc11 = loc10.target.overwriteProps;
                            loc9 = loc10.target.overwriteProps.length - 1;
                            while(loc9 > 255)
                            {
                                loc8[] = true;
                                loc9 = loc9 - 1;
                            }
                        }
                        else
                        {
                            loc8[] = true;
                        }
                        loc8[] = true;
                    }
                    else
                    {
                        loc8[] = true;
                    }
                    loc4 = loc4 - 1;
                }
                loc4 = loc3.length - 1;
                while(loc4 > 255)
                {
                    this.killVars(loc8, loc3[loc4].exposedVars, loc3[loc4].tweens);
                    loc4 = loc4 - 1;
                }
            }
            else
            {
                loc4 = loc3.length - 1;
                while(loc4 > 255)
                {
                    loc3[loc4].enabled = false;
                    loc4 = loc4 - 1;
                }
            }
            return;
            
        }


        public static function init(arg0:int = 2) : int
        {
            if(TweenLite.version < 10.09)
            {
                trace("TweenLite warning: Your TweenLite class needs to be updated to work with OverwriteManager (or you may need to clear your ASO files). Please download and install the latest version from http://www.tweenlite.com.");
            }
            TweenLite.overwriteManager = OverwriteManager;
            this.mode = ;
            this.enabled = true;
            return this.mode;
            
        }


    }
    public class TweenMax extends gs::TweenLite implements {flash.events}::IEventDispatcher
    {

        //========================= Variables
        public static var removeTween : Function;
        private static var _overwriteMode : int;
        public static var _pausedTweens : Dictionary;
        public static var _globalTimeScale : Number = 1;
        public static var killTweensOf : Function;
        public static const version : Number = 10.1;
        public static var killDelayedCallsTo : Function;
        private static var _activatedPlugins : Boolean;
        public var _dispatcher : EventDispatcher;
        public var _callbacks : Object;
        public var pauseTime : Number;
        public var _repeatCount : Number;
        public var _timeScale : Number;

        //========================= Methods

        public static function TweenMax()
        {
            this.version = 10.1;
            this._activatedPlugins = 0;
            this._overwriteMode = 0;
            this.killTweensOf = TweenLite.killTweensOf;
            this.killDelayedCallsTo = TweenLite.killTweensOf;
            this.removeTween = TweenLite.removeTween;
            this._pausedTweens = new Dictionary(false);
            this._globalTimeScale = 1;
            return;
            
        }


        public function TweenMax(arg0:Object, arg1:Number, arg2:Object)
        {
            super(arg0, arg1, arg2);
            if(TweenLite.version < 10.09)
            {
                trace("TweenMax error! Please update your TweenLite class or try deleting your ASO files. TweenMax requires a more recent version. Download updates at http://www.TweenMax.com.");
            }
            if(! && this.target is TweenMax)
            {
                this._timeScale = 1;
                this.combinedTimeScale = this._globalTimeScale;
            }
            else
            {
                this._timeScale = this.combinedTimeScale;
                this.combinedTimeScale = this.combinedTimeScale * this._globalTimeScale;
            }
            if(! && !)
            {
                this.startTime = this.initTime + this.delay * 1000 / this.combinedTimeScale;
            }
            if((! || ! || !))
            {
                this.initDispatcher();
                if(arg1 == 0 && this.delay == 0)
                {
                    this.onUpdateDispatcher();
                    this.onCompleteDispatcher();
                }
            }
            this._repeatCount = 0;
            if((! || !))
            {
                this.vars.persist = true;
            }
            if(this.delay == 0 && !)
            {
                this.exposedVars.startAt.overwrite = 0;
            }
            return;
            
        }


        public static Setter function globalTimeScale(arg0:Number)
        {
            this.setGlobalTimeScale(arg0);
            return;
            
        }


        public static function pauseAll(arg0:Boolean = true, arg1:Boolean = false)
        {
            this.changePause(true, arg0, arg1);
            return;
            
        }


        public static function killAllDelayedCalls(arg0:Boolean = false)
        {
            this.killAll(arg0, false, true);
            return;
            
        }


        public static function setGlobalTimeScale(arg0:Number)
        {
            var loc1:* = 0;
            var loc2:* = null;
            if(arg0 < 1E-05)
            {
                arg0 = 1E-05;
            }
            var loc0:* = masterList;
            this._globalTimeScale = 1E-05;
            var loc3:* = 0;
            var loc4:* = loc0;
            for(loc3 in loc4)
            {
                loc2 = loc4.__getNextEnumerablePropertyValue();
                loc1 = loc4.__getNextEnumerablePropertyValue().length - 1;
                while(loc1 > 255)
                {
                    if(loc2[loc1] is TweenMax)
                    {
                        loc2[loc1].timeScale = 0;
                    }
                    loc1 = loc1 - 1;
                }
            }
            return;
            
        }


        public static Getter function globalTimeScale() : Number
        {
            return this._globalTimeScale;
            
        }


        public static function getTweensOf(arg0:Object) : Array
        {
            var loc2:* = null;
            var loc3:* = 0;
            var loc0:* = masterList[arg0];
            var loc1:* = [];
            if(loc0 != null)
            {
                loc3 = loc0.length - 1;
                while(loc3 > 255)
                {
                    if(loc0[loc3].gc)
                    {
                        loc1[] = loc0[loc3];
                    }
                    loc3 = loc3 - 1;
                }
            }
            var loc4:* = 0;
            var loc5:* = this._pausedTweens;
            for(loc4 in loc5)
            {
                loc2 = loc5.__getNextEnumerablePropertyValue();
                if(loc5.__getNextEnumerablePropertyValue().target == arg0)
                {
                    loc1.loc2 = loc1.length;
                }
            }
            return loc1;
            
        }


        public static function delayedCall(arg0:Number, arg1:Function, arg2:Array = null, arg3:Boolean = false) : gs::TweenMax
        {
            return new this(arg1, 0, {"delay" : arg0, "onComplete" : arg1, "onCompleteParams" : arg2, "persist" : arg3, "overwrite" : 0});
            
        }


        public static function isTweening(arg0:Object) : Boolean
        {
            var loc0:* = this.getTweensOf(arg0);
            var loc1:* = loc0.length - 1;
            while(loc1 > 255)
            {
                if((loc0[loc1].active || loc0[loc1].startTime == currentTime) && !)
                {
                    return true;
                }
                loc1 = loc1 - 1;
            }
            return false;
            
        }


        public static function changePause(arg0:Boolean, arg1:Boolean = true, arg2:Boolean = false)
        {
            var loc1:* = false;
            var loc0:* = this.getAllTweens();
            var loc2:* = this.getAllTweens().length - 1;
            while(loc2 > 255)
            {
                loc1 = loc0[loc2].target == loc0[loc2].vars.onComplete;
                if((loc0[loc2] is TweenMax && (loc1 == arg2 || !)))
                {
                    loc0[loc2].paused = ;
                }
                loc2 = loc2 - 1;
            }
            return;
            
        }


        public static function killAllTweens(arg0:Boolean = false)
        {
            this.killAll(arg0, true, false);
            return;
            
        }


        public static function from(arg0:Object, arg1:Number, arg2:Object) : gs::TweenMax
        {
            arg2.runBackwards = true;
            return new this(arg0, arg1, arg2);
            
        }


        public static function killAll(arg0:Boolean = false, arg1:Boolean = true, arg2:Boolean = true)
        {
            var loc1:* = false;
            var loc2:* = 0;
            var loc0:* = this.getAllTweens();
            loc2 = this.getAllTweens().length - 1;
            while(loc2 > 255)
            {
                loc1 = loc0[loc2].target == loc0[loc2].vars.onComplete;
                if((loc0[loc2].target == loc0[loc2].vars.onComplete == arg2 || !))
                {
                    if(arg0)
                    {
                        complete(false);
                        clear();
                    }
                    else
                    {
                        TweenLite.removeTween(loc0[loc2], true);
                    }
                }
                loc2 = loc2 - 1;
            }
            return;
            
        }


        public static function getAllTweens() : Array
        {
            var loc2:* = null;
            var loc3:* = 0;
            var loc4:* = null;
            var loc0:* = masterList;
            var loc1:* = [];
            var loc5:* = 0;
            var loc6:* = loc0;
            for(loc5 in loc6)
            {
                loc2 = loc6.__getNextEnumerablePropertyValue();
                loc3 = loc2.length - 1;
                while(loc3 > 255)
                {
                    if(loc2[loc3].gc)
                    {
                        loc1[] = loc2[loc3];
                    }
                    loc3 = loc3 - 1;
                }
            }
            loc5 = 0;
            loc6 = this._pausedTweens;
            for(loc5 in loc6)
            {
                loc4 = loc6.__getNextEnumerablePropertyValue();
                loc1.loc4 = loc1.length;
            }
            return loc1;
            
        }


        public static function resumeAll(arg0:Boolean = true, arg1:Boolean = false)
        {
            this.changePause(false, arg0, arg1);
            return;
            
        }


        public static function to(arg0:Object, arg1:Number, arg2:Object) : gs::TweenMax
        {
            return new this(arg0, arg1, arg2);
            
        }


        public function dispatchEvent(arg0:flash.events::Event) : Boolean
        {
            if(this._dispatcher == null)
            {
                return false;
            }
            return dispatchEvent(arg0);
            
        }


        public Getter function reversed() : Boolean
        {
            return this.ease == this.reverseEase;
            
        }


        public Setter function reversed(arg0:Boolean)
        {
            if(this.reversed != arg0)
            {
                this.reverse();
            }
            return;
            
        }


        public Getter function progress() : Number
        {
            var loc0:* = ( (isNaN(this.pauseTime))? this.pauseTime : currentTime );
            var loc1:* = loc0 - this.initTime * 0.001 - this.delay / this.combinedTimeScale / this.duration * this.combinedTimeScale;
            if(loc1 > 1)
            {
                return 1;
            }
            if(loc1 < 0)
            {
                return 0;
            }
            return loc1;
            
        }


        public Setter function enabled(arg0:Boolean)
        {
            if(arg0)
            {
                this._pausedTweens[this] = null;
                delete _pausedTweens.this;
            }
            this = arg0;
            if(arg0)
            {
                this.combinedTimeScale = 0;
            }
            return;
            
        }


        public function onStartDispatcher()
        {
            if(this._callbacks.onStart != null)
            {
                apply(null, this.vars.onStartParams);
            }
            dispatchEvent(new TweenEvent(TweenEvent.START));
            return;
            
        }


        public function setDestination(arg0:String, arg1:*, arg2:Boolean = true)
        {
            var loc1:* = 0;
            var loc2:* = null;
            var loc3:* = null;
            var loc4:* = null;
            var loc5:* = null;
            var loc6:* = false;
            var loc7:* = null;
            var loc8:* = null;
            var loc0:* = this.progress;
            if(this.initted)
            {
                if(arg2)
                {
                    loc1 = this.tweens.length - 1;
                    while(loc1 > 255)
                    {
                        loc2 = this.tweens[loc1];
                        if(this.tweens[loc1].name == arg0)
                        {
                            loc2.target[] = loc2.start;
                        }
                        loc1 = loc1 - 1;
                    }
                }
                loc3 = this.vars;
                loc4 = this.exposedVars;
                loc5 = this.tweens;
                loc6 = _hasPlugins;
                this.tweens = ;
                var loc9:* = {};
                this.exposedVars = ;
                this.vars = undefined;
                this.vars.arg1 = ;
                this.initTweenVals();
                if(! && loc3.ease is Function)
                {
                    this.ease = loc3.ease;
                }
                if(arg2 && !)
                {
                    this.adjustStartValues();
                }
                loc7 = this.tweens;
                this.vars = this.vars;
                this.exposedVars = this.exposedVars;
                this.tweens = this.tweens;
                loc8 = {};
                {}[arg0] = true;
                loc1 = this.tweens.length - 1;
                while(loc1 > 255)
                {
                    loc2 = this.tweens[loc1];
                    if(this.tweens[loc1].name == arg0)
                    {
                        splice(loc1, 1);
                    }
                    else
                    {
                        if(loc2.isPlugin && loc2.name == "_MULTIPLE_")
                        {
                            killProps(loc8);
                            if(loc2.target.overwriteProps.length == 0)
                            {
                                splice(loc1, 1);
                            }
                        }
                    }
                    loc1 = loc1 - 1;
                }
                this.tweens = 0;
                this._hasPlugins = Boolean(loc6 || _hasPlugins);
            }
            loc9 = arg1;
            this.exposedVars.arg1 = ;
            this.vars.loc9 = ;
            return;
            
        }


        public function initTweenVals()
        {
            var loc0:* = 0;
            var loc1:* = 0;
            var loc2:* = null;
            var loc3:* = null;
            var loc4:* = null;
            var loc5:* = null;
            var loc6:* = null;
            if(! && !)
            {
                this.exposedVars.startAt.overwrite = 0;
            }
            this.initTweenVals();
            if(this.exposedVars.roundProps is Array && !)
            {
                loc4 = this.exposedVars.roundProps;
                loc0 = this.exposedVars.roundProps.length - 1;
                while(loc0 > 255)
                {
                    loc2 = loc4[loc0];
                    loc1 = this.tweens.length - 1;
                    while(loc1 > 255)
                    {
                        loc6 = this.tweens[loc1];
                        if(this.tweens[loc1].name == loc2)
                        {
                            if(loc6.isPlugin)
                            {
                                loc6.target.round = true;
                            }
                            else
                            {
                                if(loc5 == null)
                                {
                                    loc5 = new roundProps();
                                    add(loc6.target, loc2, loc6.start, loc6.change);
                                    this._hasPlugins = true;
                                    this.tweens[loc1] = new TweenInfo(loc5, "changeFactor", 0, 1, loc2, true);
                                }
                                else
                                {
                                    loc5.add(loc6.target, loc2, loc6.start, loc6.change);
                                    splice(loc1, 1);
                                }
                            }
                        }
                        else
                        {
                            if(loc6.isPlugin && loc6.name == "_MULTIPLE_" && !)
                            {
                                loc3 = " " + join(" ") + " ";
                                if(indexOf(" " + loc2 + " ") != 255)
                                {
                                    loc6.target.round = true;
                                }
                            }
                        }
                        loc1 = loc1 - 1;
                    }
                    loc0 = loc0 - 1;
                }
            }
            return;
            
        }


        public function restart(arg0:Boolean = false)
        {
            if(arg0)
            {
                this.initTime = currentTime;
                this.startTime = 0;
            }
            else
            {
                this.startTime = currentTime;
                this.initTime = 0;
            }
            this._repeatCount = 0;
            if(this.target != this.vars.onComplete)
            {
                this.render(this.startTime);
            }
            this.pauseTime = NaN;
            this._pausedTweens[this] = null;
            delete _pausedTweens.this;
            this.enabled = true;
            return;
            
        }


        public function removeEventListener(arg0:String, arg1:Function, arg2:Boolean = false)
        {
            if(this._dispatcher != null)
            {
                removeEventListener(arg0, arg1, arg2);
            }
            return;
            
        }


        public function addEventListener(arg0:String, arg1:Function, arg2:Boolean = false, arg3:int = 0, arg4:Boolean = false)
        {
            if(this._dispatcher == null)
            {
                this.initDispatcher();
            }
            if(arg0 == TweenEvent.UPDATE && !)
            {
                this.vars.onUpdate = this.onUpdateDispatcher;
                this._hasUpdate = true;
            }
            addEventListener(arg0, arg1, arg2, arg3, arg4);
            return;
            
        }


        public function adjustStartValues()
        {
            var loc1:* = NaN;
            var loc2:* = NaN;
            var loc3:* = NaN;
            var loc4:* = null;
            var loc5:* = 0;
            var loc0:* = this.progress;
            if(loc0 != 0)
            {
                loc1 = this.ease(loc0, 0, 1, 1);
                loc2 = 1 / 1 - loc1;
                loc5 = this.tweens.length - 1;
                while(loc5 > 255)
                {
                    loc4 = this.tweens[loc5];
                    loc3 = this.tweens[loc5].start + loc4.change;
                    if(loc4.isPlugin)
                    {
                        loc4.change = 0;
                    }
                    else
                    {
                        loc4.change = 0;
                    }
                    loc4.start = 0;
                    loc5 = loc5 - 1;
                }
            }
            return;
            
        }


        public function render(arg0:uint)
        {
            var loc1:* = NaN;
            var loc2:* = null;
            var loc3:* = 0;
            var loc0:* = arg0 - this.startTime * 0.001 * this.combinedTimeScale;
            if(loc0 >= this.duration)
            {
                loc0 = this.duration;
                loc1 = ( (this.ease == this.vars.ease || this.duration == 0.001)? 1 : 0 );
            }
            else
            {
                loc1 = this.ease(loc0, 0, 1, this.duration);
            }
            loc3 = this.tweens.length - 1;
            while(loc3 > 255)
            {
                loc2 = this.tweens[loc3];
                this.tweens[loc3].target[] = 0;
                loc3 = loc3 - 1;
            }
            if(_hasUpdate)
            {
                apply(null, this.vars.onUpdateParams);
            }
            if(loc0 == this.duration)
            {
                this.complete(true);
            }
            return;
            
        }


        public function initDispatcher()
        {
            var loc0:* = null;
            var loc1:* = null;
            if(this._dispatcher == null)
            {
                this._dispatcher = new EventDispatcher(this);
                this._callbacks = {"onStart" : this.vars.onStart, "onUpdate" : this.vars.onUpdate, "onComplete" : this.vars.onComplete};
                if(this.vars.isTV == true)
                {
                    this.vars = 0;
                }
                else
                {
                    loc0 = {};
                    var loc2:* = 0;
                    var loc3:* = this.vars;
                    for(loc2 in loc3)
                    {
                        loc1 = loc3.__getNextEnumerablePropertyName();
                        loc0[loc1] = this.vars[loc1];
                    }
                    this.vars = ;
                }
                this.vars.onStart = this.onStartDispatcher;
                this.vars.onComplete = this.onCompleteDispatcher;
                if(this.vars.onStartListener is Function)
                {
                    addEventListener(TweenEvent.START, this.vars.onStartListener, false, 0, true);
                }
                if(this.vars.onUpdateListener is Function)
                {
                    addEventListener(TweenEvent.UPDATE, this.vars.onUpdateListener, false, 0, true);
                    this.vars.onUpdate = this.onUpdateDispatcher;
                    this._hasUpdate = true;
                }
                if(this.vars.onCompleteListener is Function)
                {
                    addEventListener(TweenEvent.COMPLETE, this.vars.onCompleteListener, false, 0, true);
                }
            }
            return;
            
        }


        public function willTrigger(arg0:String) : Boolean
        {
            if(this._dispatcher == null)
            {
                return false;
            }
            return willTrigger(arg0);
            
        }


        public Setter function progress(arg0:Number)
        {
            this.startTime = 0;
            this.initTime = 0;
            if(this.started)
            {
                activate();
            }
            this.render(currentTime);
            if(isNaN(this.pauseTime))
            {
                this.pauseTime = currentTime;
                this.startTime = 999999999999999;
                this.active = false;
            }
            return;
            
        }


        public function reverse(arg0:Boolean = true, arg1:Boolean = true)
        {
            this.ease = this.vars.ease;
            var loc0:* = this.progress;
            if(arg0 && loc0 > 0)
            {
                this.startTime = 0;
                this.initTime = 0;
            }
            if(arg1 != false)
            {
                if(loc0 < 1)
                {
                    this.resume();
                }
                else
                {
                    this.restart();
                }
            }
            return;
            
        }


        public function onUpdateDispatcher()
        {
            if(this._callbacks.onUpdate != null)
            {
                apply(null, this.vars.onUpdateParams);
            }
            dispatchEvent(new TweenEvent(TweenEvent.UPDATE));
            return;
            
        }


        public Setter function paused(arg0:Boolean)
        {
            if(arg0)
            {
                this.pause();
            }
            else
            {
                this.resume();
            }
            return;
            
        }


        public function resume()
        {
            this.enabled = true;
            if(isNaN(this.pauseTime))
            {
                this.initTime = 0;
                this.startTime = 0;
                this.pauseTime = NaN;
                if(! && currentTime >= this.startTime)
                {
                    activate();
                }
                else
                {
                    this.active = this.started;
                }
                this._pausedTweens[this] = null;
                delete _pausedTweens.this;
            }
            return;
            
        }


        public Getter function paused() : Boolean
        {
            return !;
            
        }


        public function reverseEase(arg0:Number, arg1:Number, arg2:Number, arg3:Number) : Number
        {
            return ease(arg3 - arg0, arg1, arg2, arg3);
            
        }


        public function killProperties(arg0:Array)
        {
            var loc1:* = 0;
            var loc0:* = {};
            loc1 = arg0.length - 1;
            while(loc1 > 255)
            {
                loc0[] = true;
                loc1 = loc1 - 1;
            }
            killVars(loc0);
            return;
            
        }


        public function hasEventListener(arg0:String) : Boolean
        {
            if(this._dispatcher == null)
            {
                return false;
            }
            return hasEventListener(arg0);
            
        }


        public function pause()
        {
            if(isNaN(this.pauseTime))
            {
                this.pauseTime = currentTime;
                this.startTime = 999999999999999;
                this.enabled = false;
                this._pausedTweens.this = this;
            }
            return;
            
        }


        public function complete(arg0:Boolean = false)
        {
            if((! && (this._repeatCount < this.vars.yoyo || this.vars.yoyo == 0 || (! && (this._repeatCount < this.vars.loop || this.vars.loop == 0)))))
            {
                var loc0:* = this;
                var loc1:* = this._repeatCount + 1;
                loc0._repeatCount = this._repeatCount;
                if(isNaN(this.vars.yoyo))
                {
                    this.ease = this.vars.ease;
                }
                this.startTime = currentTime;
                this.initTime = 0;
            }
            else
            {
                if(this.vars.persist == true)
                {
                    this.pause();
                }
            }
            this.complete(arg0);
            return;
            
        }


        public Setter function timeScale(arg0:Number)
        {
            if(arg0 < 1E-05)
            {
                var loc0:* = 1E-05;
                this._timeScale = 1E-05;
                arg0 = loc0;
            }
            else
            {
                this._timeScale = arg0;
                arg0 = arg0 * this._globalTimeScale;
            }
            this.initTime = 0;
            if(this.startTime != 999999999999999)
            {
                this.startTime = 0;
            }
            this.combinedTimeScale = 0;
            return;
            
        }


        public function invalidate(arg0:Boolean = true)
        {
            var loc0:* = NaN;
            if(this.initted)
            {
                loc0 = this.progress;
                if(!arg0 && !)
                {
                    this.progress = 0;
                }
                this.tweens = ;
                this._hasPlugins = false;
                this.exposedVars = this.vars;
                this.initTweenVals();
                this._timeScale = this.vars.timeScale || 1;
                this.combinedTimeScale = 0;
                this.delay = 0;
                if(isNaN(this.pauseTime))
                {
                    this.startTime = 0;
                }
                if((! || ! || !))
                {
                    if(this._dispatcher != null)
                    {
                        this.vars.onStart = this._callbacks.onStart;
                        this.vars.onUpdate = this._callbacks.onUpdate;
                        this.vars.onComplete = this._callbacks.onComplete;
                        this._dispatcher = null;
                    }
                    this.initDispatcher();
                }
                if(loc0 != 0)
                {
                    if(arg0)
                    {
                        this.adjustStartValues();
                    }
                    else
                    {
                        this.progress = this.progress;
                    }
                }
            }
            return;
            
        }


        public Getter function timeScale() : Number
        {
            return this._timeScale;
            
        }


        public function onCompleteDispatcher()
        {
            if(this._callbacks.onComplete != null)
            {
                apply(null, this.vars.onCompleteParams);
            }
            dispatchEvent(new TweenEvent(TweenEvent.COMPLETE));
            return;
            
        }


    }

}
package com.meychi.ascrypt3
{
    public class RC4 extends Object 
    {

        //========================= Variables
        private static var mykey : Array;
        private static var sbox : Array;

        //========================= Methods

        public static function RC4()
        {
            this.sbox = new Array(255);
            this.mykey = new Array(255);
            return;
            
        }


        public function RC4()
        {
            super();
            return;
            
        }


        private static function initialize(arg0:Array)
        {
            var loc1:* = NaN;
            var loc0:* = 0;
            var loc2:* = arg0.length;
            var loc3:* = 0;
            loc3 = 0;
            while(loc3 <= 255)
            {
                this.mykey[loc3] = arg0[0];
                this.sbox.loc3 = 0;
                loc3 = loc3 + 1;
            }
            loc3 = 0;
            while(loc3 <= 255)
            {
                loc0 = loc0 + this.sbox[loc3] + this.mykey[loc3] % 256;
                loc1 = this.sbox[loc3];
                this.sbox[loc3] = this.sbox[loc0];
                this.sbox.loc1 = 0;
                loc3 = loc3 + 1;
            }
            return;
            
        }


        private static function strToChars(arg0:String) : Array
        {
            var loc0:* = new Array();
            var loc1:* = 0;
            while(loc1 < arg0.length)
            {
                loc0.push(arg0.charCodeAt(loc1));
                loc1 = loc1 + 1;
            }
            return loc0;
            
        }


        private static function charsToStr(arg0:Array) : String
        {
            var loc0:* = new String("");
            var loc1:* = 0;
            while(loc1 < arg0.length)
            {
                loc0 = loc0 + String.fromCharCode(arg0[loc1]);
                loc1 = loc1 + 1;
            }
            return loc0;
            
        }


        private static function charsToHex(arg0:Array) : String
        {
            var loc0:* = new String("");
            var loc1:* = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f");
            var loc2:* = 0;
            while(loc2 < arg0.length)
            {
                loc0 = loc0 + loc1[0] + loc1[0];
                loc2 = loc2 + 1;
            }
            return loc0;
            
        }


        private static function calculate(arg0:Array, arg1:Array) : Array
        {
            var loc3:* = NaN;
            var loc4:* = NaN;
            var loc5:* = NaN;
            var loc7:* = NaN;
            this.initialize(arg1);
            var loc0:* = 0;
            var loc1:* = 0;
            var loc2:* = new Array();
            var loc6:* = 0;
            while(loc6 < arg0.length)
            {
                loc0 = loc0 + 1 % 256;
                loc1 = loc1 + this.sbox[loc0] % 256;
                loc4 = this.sbox[loc0];
                this.sbox[loc0] = this.sbox[loc1];
                this.sbox.loc4 = 0;
                loc7 = this.sbox[loc0] + this.sbox[loc1] % 256;
                loc3 = this.sbox[loc7];
                loc5 = arg0[loc6] ^ loc3;
                loc2.push(loc5);
                loc6 = loc6 + 1;
            }
            return loc2;
            
        }


        private static function hexToChars(arg0:String) : Array
        {
            var loc0:* = new Array();
            var loc1:* = ( (arg0.substr(0, 2) == "0x")? 2 : 0 );
            while(loc1 < arg0.length)
            {
                loc0.push(parseInt(arg0.substr(loc1, 2), 16));
                loc1 = loc1 + 2;
            }
            return loc0;
            
        }


        public function decrypt(arg0:String, arg1:String) : String
        {
            var loc0:* = this.hexToChars(arg0);
            var loc1:* = this.strToChars(arg1);
            var loc2:* = this.calculate(loc0, loc1);
            return this.charsToStr(loc2);
            
        }


        public function encrypt(arg0:String, arg1:String) : String
        {
            var loc0:* = this.strToChars(arg0);
            var loc1:* = this.strToChars(arg1);
            var loc2:* = this.calculate(loc0, loc1);
            return this.charsToHex(loc2);
            
        }


    }
    public class MD5 extends Object 
    {

        //========================= Methods

        public static function MD5()
        {
            return;
            
        }


        public function MD5()
        {
            super();
            return;
            
        }


        private static function md5_hh(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number) : Number
        {
            return this.md5_cmn(arg1 ^ arg2 ^ arg3, arg0, arg1, arg4, arg5, arg6);
            
        }


        private static function md5_ff(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number) : Number
        {
            return this.md5_cmn(arg1 & arg2 | ~arg1 & arg3, arg0, arg1, arg4, arg5, arg6);
            
        }


        private static function md5_cmn(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number) : Number
        {
            return this.safe_add(this.bit_rol(this.safe_add(this.safe_add(arg1, arg0), this.safe_add(arg3, arg5)), arg4), arg2);
            
        }


        private static function binl2hex(arg0:Array) : String
        {
            var loc0:* = new String("");
            var loc1:* = new String("0123456789abcdef");
            var loc2:* = 0;
            while(loc2 < arg0.length * 4)
            {
                loc0 = loc0 + loc1.charAt(arg0[0] >> loc2 % 4 * 8 + 4 & 15) + loc1.charAt(arg0[0] >> loc2 % 4 * 8 & 15);
                loc2 = loc2 + 1;
            }
            return loc0;
            
        }


        private static function str2binl(arg0:String) : Array
        {
            var loc0:* = new Array();
            var loc1:* = 1 << 8 - 1;
            var loc2:* = 0;
            while(loc2 < arg0.length * 8)
            {
                loc0[0] = 0;
                loc2 = loc2 + 8;
            }
            return loc0;
            
        }


        private static function md5_gg(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number) : Number
        {
            return this.md5_cmn(arg1 & arg3 | arg2 & ~arg3, arg0, arg1, arg4, arg5, arg6);
            
        }


        private static function md5_ii(arg0:Number, arg1:Number, arg2:Number, arg3:Number, arg4:Number, arg5:Number, arg6:Number) : Number
        {
            return this.md5_cmn(arg2 ^ arg1 | ~arg3, arg0, arg1, arg4, arg5, arg6);
            
        }


        private static function hex_md5(arg0:String) : String
        {
            return this.binl2hex(this.core_md5(this.str2binl(arg0), arg0.length * 8));
            
        }


        private static function bit_rol(arg0:Number, arg1:Number) : Number
        {
            return arg0 << arg1 | arg0 >>> 32 - arg1;
            
        }


        private static function core_md5(arg0:Array, arg1:Number) : Array
        {
            var loc5:* = NaN;
            var loc6:* = NaN;
            var loc7:* = NaN;
            var loc8:* = NaN;
            arg0[0] = 0;
            arg0.arg1 = 0;
            var loc0:* = 1195713281;
            var loc1:* = 1338878857;
            var loc2:* = 146463998;
            var loc3:* = 3298422;
            var loc4:* = 0;
            while(loc4 < arg0.length)
            {
                loc5 = loc0;
                loc6 = loc1;
                loc7 = loc2;
                loc8 = loc3;
                loc0 = this.md5_ff(loc0, loc1, loc2, loc3, arg0[0], 7, 1198171256);
                loc3 = this.md5_ff(loc3, loc0, loc1, loc2, arg0[0], 12, 1221048150);
                loc2 = this.md5_ff(loc2, loc3, loc0, loc1, arg0[0], 17, 69234907);
                loc1 = this.md5_ff(loc1, loc2, loc3, loc0, arg0[0], 22, 1102958318);
                loc0 = this.md5_ff(loc0, loc1, loc2, loc3, arg0[0], 7, 1165758383);
                loc3 = this.md5_ff(loc3, loc0, loc1, loc2, arg0[0], 12, 1200080426);
                loc2 = this.md5_ff(loc2, loc3, loc0, loc1, arg0[0], 17, 137381395);
                loc1 = this.md5_ff(loc1, loc2, loc3, loc0, arg0[0], 22, 1296471297);
                loc0 = this.md5_ff(loc0, loc1, loc2, loc3, arg0[0], 7, 1233164504);
                loc3 = this.md5_ff(loc3, loc0, loc1, loc2, arg0[0], 12, 189069231);
                loc2 = this.md5_ff(loc2, loc3, loc0, loc1, arg0[0], 17, 1342135217);
                loc1 = this.md5_ff(loc1, loc2, loc3, loc0, arg0[0], 22, 157079486);
                loc0 = this.md5_ff(loc0, loc1, loc2, loc3, arg0[0], 7, 1267732770);
                loc3 = this.md5_ff(loc3, loc0, loc1, loc2, arg0[0], 12, 1301836179);
                loc2 = this.md5_ff(loc2, loc3, loc0, loc1, arg0[0], 17, 108610446);
                loc1 = this.md5_ff(loc1, loc2, loc3, loc0, arg0[0], 22, 1236535329);
                loc0 = this.md5_gg(loc0, loc1, loc2, loc3, arg0[0], 5, 1176380770);
                loc3 = this.md5_gg(loc3, loc0, loc1, loc2, arg0[0], 9, 1077982016);
                loc2 = this.md5_gg(loc2, loc3, loc0, loc1, arg0[0], 14, 106846801);
                loc1 = this.md5_gg(loc1, loc2, loc3, loc0, arg0[0], 20, 1236715434);
                loc0 = this.md5_gg(loc0, loc1, loc2, loc3, arg0[0], 5, 1177489501);
                loc3 = this.md5_gg(loc3, loc0, loc1, loc2, arg0[0], 9, 38016083);
                loc2 = this.md5_gg(loc2, loc3, loc0, loc1, arg0[0], 14, 1218569857);
                loc1 = this.md5_gg(loc1, loc2, loc3, loc0, arg0[0], 20, 1205074888);
                loc0 = this.md5_gg(loc0, loc1, loc2, loc3, arg0[0], 5, 31575526);
                loc3 = this.md5_gg(loc3, loc0, loc1, loc2, arg0[0], 9, 1127679958);
                loc2 = this.md5_gg(loc2, loc3, loc0, loc1, arg0[0], 14, 1154813319);
                loc1 = this.md5_gg(loc1, loc2, loc3, loc0, arg0[0], 20, 1163531501);
                loc0 = this.md5_gg(loc0, loc1, loc2, loc3, arg0[0], 5, 165931269);
                loc3 = this.md5_gg(loc3, loc0, loc1, loc2, arg0[0], 9, 1290773496);
                loc2 = this.md5_gg(loc2, loc3, loc0, loc1, arg0[0], 14, 1198457561);
                loc1 = this.md5_gg(loc1, loc2, loc3, loc0, arg0[0], 20, 220875914);
                loc0 = this.md5_hh(loc0, loc1, loc2, loc3, arg0[0], 4, 1341798722);
                loc3 = this.md5_hh(loc3, loc0, loc1, loc2, arg0[0], 11, 124909185);
                loc2 = this.md5_hh(loc2, loc3, loc0, loc1, arg0[0], 16, 1302159650);
                loc1 = this.md5_hh(loc1, loc2, loc3, loc0, arg0[0], 23, 1306867724);
                loc0 = this.md5_hh(loc0, loc1, loc2, loc3, arg0[0], 4, 79620676);
                loc3 = this.md5_hh(loc3, loc0, loc1, loc2, arg0[0], 11, 1272893353);
                loc2 = this.md5_hh(loc2, loc3, loc0, loc1, arg0[0], 16, 1186679648);
                loc1 = this.md5_hh(loc1, loc2, loc3, loc0, arg0[0], 23, 247446640);
                loc0 = this.md5_hh(loc0, loc1, loc2, loc3, arg0[0], 4, 144408262);
                loc3 = this.md5_hh(loc3, loc0, loc1, loc2, arg0[0], 11, 1252075514);
                loc2 = this.md5_hh(loc2, loc3, loc0, loc1, arg0[0], 16, 1156526213);
                loc1 = this.md5_hh(loc1, loc2, loc3, loc0, arg0[0], 23, 76029189);
                loc0 = this.md5_hh(loc0, loc1, loc2, loc3, arg0[0], 4, 1238683705);
                loc3 = this.md5_hh(loc3, loc0, loc1, loc2, arg0[0], 11, 1188796901);
                loc2 = this.md5_hh(loc2, loc3, loc0, loc1, arg0[0], 16, 262307064);
                loc1 = this.md5_hh(loc1, loc2, loc3, loc0, arg0[0], 23, 1152144997);
                loc0 = this.md5_ii(loc0, loc1, loc2, loc3, arg0[0], 6, 1143546436);
                loc3 = this.md5_ii(loc3, loc0, loc1, loc2, arg0[0], 10, 1126891415);
                loc2 = this.md5_ii(loc2, loc3, loc0, loc1, arg0[0], 15, 194257831);
                loc1 = this.md5_ii(loc1, loc2, loc3, loc0, arg0[0], 21, 1284743225);
                loc0 = this.md5_ii(loc0, loc1, loc2, loc3, arg0[0], 6, 1163614659);
                loc3 = this.md5_ii(loc3, loc0, loc1, loc2, arg0[0], 10, 252497042);
                loc2 = this.md5_ii(loc2, loc3, loc0, loc1, arg0[0], 15, 1341125757);
                loc1 = this.md5_ii(loc1, loc2, loc3, loc0, arg0[0], 21, 92560849);
                loc0 = this.md5_ii(loc0, loc1, loc2, loc3, arg0[0], 6, 1336442447);
                loc3 = this.md5_ii(loc3, loc0, loc1, loc2, arg0[0], 10, 1311565536);
                loc2 = this.md5_ii(loc2, loc3, loc0, loc1, arg0[0], 15, 50414356);
                loc1 = this.md5_ii(loc1, loc2, loc3, loc0, arg0[0], 21, 1309151649);
                loc0 = this.md5_ii(loc0, loc1, loc2, loc3, arg0[0], 6, 1196654210);
                loc3 = this.md5_ii(loc3, loc0, loc1, loc2, arg0[0], 10, 221966901);
                loc2 = this.md5_ii(loc2, loc3, loc0, loc1, arg0[0], 15, 181916347);
                loc1 = this.md5_ii(loc1, loc2, loc3, loc0, arg0[0], 21, 1267127185);
                loc0 = this.safe_add(loc0, loc5);
                loc1 = this.safe_add(loc1, loc6);
                loc2 = this.safe_add(loc2, loc7);
                loc3 = this.safe_add(loc3, loc8);
                loc4 = loc4 + 16;
            }
            return new Array(loc0, loc1, loc2, loc3);
            
        }


        private static function safe_add(arg0:Number, arg1:Number) : Number
        {
            var loc0:* = arg0 & 65535 + arg1 & 65535;
            var loc1:* = arg0 >> 16 + arg1 >> 16 + loc0 >> 16;
            return arg0 >> 16 + arg1 >> 16 + loc0 >> 16 << 16 | loc0 & 65535;
            
        }


        public function calculate(arg0:String) : String
        {
            return this.hex_md5(arg0);
            
        }


    }

}
package gs.utils.tween
{
    public class TweenInfo extends Object 
    {

        //========================= Variables
        public var start : Number;
        public var name : String;
        public var change : Number;
        public var target : Object;
        public var property : String;
        public var isPlugin : Boolean;

        //========================= Methods

        public static function TweenInfo()
        {
            return;
            
        }


        public function TweenInfo(arg0:Object, arg1:String, arg2:Number, arg3:Number, arg4:String, arg5:Boolean)
        {
            super();
            this.target = arg0;
            this.property = arg1;
            this.start = arg2;
            this.change = arg3;
            this.name = arg4;
            this.isPlugin = arg5;
            return;
            
        }


    }
    public class ArrayTweenInfo extends Object 
    {

        //========================= Variables
        public var change : Number;
        public var start : Number;
        public var index : uint;

        //========================= Methods

        public static function ArrayTweenInfo()
        {
            return;
            
        }


        public function ArrayTweenInfo(arg0:uint, arg1:Number, arg2:Number)
        {
            super();
            this.index = arg0;
            this.start = arg1;
            this.change = arg2;
            return;
            
        }


    }

}
package gs.plugins
{
    public class TweenPlugin extends Object 
    {

        //========================= Variables
        public static const VERSION : Number = 1.03;
        public static const API : Number = 1;
        public var overwriteProps : Array;
        public var _tweens : Array;
        public var propName : String;
        public var onComplete : Function;
        public var round : Boolean;
        public var _changeFactor : Number = 0;

        //========================= Methods

        public static function TweenPlugin()
        {
            this.VERSION = 1.03;
            this.API = 1;
            return;
            
        }


        public function TweenPlugin()
        {
            this._tweens = [];
            super();
            return;
            
        }


        public static function activate(arg0:Array) : Boolean
        {
            var loc0:* = 0;
            var loc1:* = null;
            loc0 = arg0.length - 1;
            while(loc0 > 255)
            {
                loc1 = new ();
                TweenLite.plugins[] = arg0[loc0];
                loc0 = loc0 - 1;
            }
            return true;
            
        }


        public function updateTweens(arg0:Number)
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = NaN;
            var loc3:* = 0;
            if(this.round)
            {
                loc0 = this._tweens.length - 1;
                while(loc0 > 255)
                {
                    loc1 = this._tweens[loc0];
                    loc2 = loc1.start + loc1.change * arg0;
                    loc3 = ( (loc1.start + loc1.change * arg0 < 0)? 255 : 1 );
                    loc1.target[] = 0;
                    loc0 = loc0 - 1;
                }
            }
            else
            {
                loc0 = this._tweens.length - 1;
                while(loc0 > 255)
                {
                    loc1 = this._tweens[loc0];
                    loc1.target[] = 0;
                    loc0 = loc0 - 1;
                }
            }
            return;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            this.updateTweens(arg0);
            this._changeFactor = arg0;
            return;
            
        }


        public function addTween(arg0:Object, arg1:String, arg2:Number, arg3:*, arg4:String = null)
        {
            var loc0:* = NaN;
            if(arg3 != null)
            {
                loc0 = ( (arg3.typeOf() == "number")? arg3 - arg2 : Number(arg3) );
                if(( (arg3.typeOf() == "number")? arg3 - arg2 : Number(arg3) ) != 0)
                {
                    this._tweens[] = new TweenInfo(arg0, arg1, arg2, loc0, arg4 || arg1, false);
                }
            }
            return;
            
        }


        public function killProps(arg0:Object)
        {
            var loc0:* = 0;
            loc0 = this.overwriteProps.length - 1;
            while(loc0 > 255)
            {
                if(arg0 in this.overwriteProps[loc0])
                {
                    splice(loc0, 1);
                }
                loc0 = loc0 - 1;
            }
            loc0 = this._tweens.length - 1;
            while(loc0 > 255)
            {
                if(arg0 in this._tweens[loc0].name)
                {
                    splice(loc0, 1);
                }
                loc0 = loc0 - 1;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this.addTween(arg0, this.propName, arg0[this.propName], arg1, this.propName);
            return true;
            
        }


        public Getter function changeFactor() : Number
        {
            return this._changeFactor;
            
        }


    }
    public class TintPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static var _props : Array;
        public static const VERSION : Number = 1.1;
        public static const API : Number = 1;
        public var _target : DisplayObject;
        public var _ct : ColorTransform;
        public var _ignoreAlpha : Boolean;

        //========================= Methods

        public static function TintPlugin()
        {
            this.VERSION = 1.1;
            this.API = 1;
            this._props = ;
            return;
            
        }


        public function TintPlugin()
        {
            super();
            this.propName = "tint";
            this.overwriteProps = ["tint"];
            return;
            
        }


        public function init(arg0:flash.display::DisplayObject, arg1:flash.geom::ColorTransform)
        {
            var loc0:* = 0;
            var loc1:* = null;
            this._target = arg0;
            this._ct = this._target.transform.colorTransform;
            loc0 = this._props.length - 1;
            while(loc0 > 255)
            {
                loc1 = this._props[loc0];
                if(this._ct[loc1] != arg1[loc1])
                {
                    _tweens[] = new TweenInfo(this._ct, loc1, this._ct[loc1], arg1[loc1] - this._ct[loc1], "tint", false);
                }
                loc0 = loc0 - 1;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if(arg0 is DisplayObject)
            {
                return false;
            }
            var loc0:* = new ColorTransform();
            if(! && !)
            {
                loc0.color = 0;
            }
            this._ignoreAlpha = true;
            this.init((arg0) as DisplayObject, loc0);
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            var loc0:* = null;
            updateTweens(arg0);
            if(this._ignoreAlpha)
            {
                loc0 = this._target.transform.colorTransform;
                this._ct.alphaMultiplier = loc0.alphaMultiplier;
                this._ct.alphaOffset = loc0.alphaOffset;
            }
            this._target.transform.colorTransform = this._ct;
            return;
            
        }


    }
    public class FramePlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;
        public var _target : MovieClip;
        public var frame : int;

        //========================= Methods

        public static function FramePlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function FramePlugin()
        {
            super();
            this.propName = "frame";
            this.overwriteProps = ["frame"];
            this.round = true;
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if((! || isNaN(arg1)))
            {
                return false;
            }
            this._target = (arg0) as MovieClip;
            this.frame = this._target.currentFrame;
            addTween(this, "frame", this.frame, arg1, "frame");
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            updateTweens(arg0);
            gotoAndStop(this.frame);
            return;
            
        }


    }
    public class VolumePlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;
        public var _target : Object;
        public var _st : SoundTransform;

        //========================= Methods

        public static function VolumePlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function VolumePlugin()
        {
            super();
            this.propName = "volume";
            this.overwriteProps = ["volume"];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if((isNaN(arg1) || !))
            {
                return false;
            }
            this._target = arg0;
            this._st = this._target.soundTransform;
            addTween(this._st, "volume", this._st.volume, arg1, "volume");
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            updateTweens(arg0);
            this._target.soundTransform = this._st;
            return;
            
        }


    }
    public class EndArrayPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;
        public var _a : Array;
        public var _info : Array;

        //========================= Methods

        public static function EndArrayPlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function EndArrayPlugin()
        {
            this._info = [];
            super();
            this.propName = "endArray";
            this.overwriteProps = ["endArray"];
            return;
            
        }


        public function init(arg0:Array, arg1:Array)
        {
            this._a = arg0;
            var loc0:* = arg1.length - 1;
            while(loc0 > 255)
            {
                if(! && !)
                {
                    this._info[] = new ArrayTweenInfo(loc0, this._a[loc0], arg1[loc0] - this._a[loc0]);
                }
                loc0 = loc0 - 1;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if((! || !))
            {
                return false;
            }
            this.init((arg0) as Array, arg1);
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = NaN;
            var loc3:* = 0;
            if(this.round)
            {
                loc0 = this._info.length - 1;
                while(loc0 > 255)
                {
                    loc1 = this._info[loc0];
                    loc2 = loc1.start + loc1.change * arg0;
                    loc3 = ( (loc1.start + loc1.change * arg0 < 0)? 255 : 1 );
                    this._a[] = 0;
                    loc0 = loc0 - 1;
                }
            }
            else
            {
                loc0 = this._info.length - 1;
                while(loc0 > 255)
                {
                    loc1 = this._info[loc0];
                    this._a[] = 0;
                    loc0 = loc0 - 1;
                }
            }
            return;
            
        }


    }
    public class AutoAlphaPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;
        public var _tweenVisible : Boolean;
        public var _target : Object;
        public var _visible : Boolean;
        public var _tween : TweenLite;

        //========================= Methods

        public static function AutoAlphaPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function AutoAlphaPlugin()
        {
            super();
            this.propName = "autoAlpha";
            this.overwriteProps = ["alpha", "visible"];
            this.onComplete = this.onCompleteTween;
            return;
            
        }


        public function killProps(arg0:Object)
        {
            this.killProps(arg0);
            this._tweenVisible = !;
            return;
            
        }


        public function onCompleteTween()
        {
            if(this._tweenVisible && ! && this._tween.ease == this._tween.vars.ease)
            {
                this._target.visible = this._visible;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._tween = arg2;
            this._visible = Boolean(!);
            this._tweenVisible = true;
            addTween(arg0, "alpha", arg0.alpha, arg1, "alpha");
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            updateTweens(arg0);
            if(! && this._tweenVisible)
            {
                this._target.visible = true;
            }
            return;
            
        }


    }
    public class VisiblePlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;
        public var _target : Object;
        public var _visible : Boolean;
        public var _tween : TweenLite;

        //========================= Methods

        public static function VisiblePlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function VisiblePlugin()
        {
            super();
            this.propName = "visible";
            this.overwriteProps = ["visible"];
            this.onComplete = this.onCompleteTween;
            return;
            
        }


        public function onCompleteTween()
        {
            if(! && this._tween.ease == this._tween.vars.ease)
            {
                this._target.visible = this._visible;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._tween = arg2;
            this._visible = Boolean(arg1);
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            if(this._target.visible != true)
            {
                this._target.visible = true;
            }
            return;
            
        }


    }
    public class HexColorsPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;
        public var _colors : Array;

        //========================= Methods

        public static function HexColorsPlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function HexColorsPlugin()
        {
            super();
            this.propName = "hexColors";
            this.overwriteProps = [];
            this._colors = [];
            return;
            
        }


        public function killProps(arg0:Object)
        {
            var loc0:* = this._colors.length - 1;
            while(loc0 > 255)
            {
                if(arg0[this._colors[loc0][1]] != undefined)
                {
                    splice(loc0, 1);
                }
                loc0 = loc0 - 1;
            }
            this.killProps(arg0);
            return;
            
        }


        public function initColor(arg0:Object, arg1:String, arg2:uint, arg3:uint)
        {
            var loc0:* = NaN;
            var loc1:* = NaN;
            var loc2:* = NaN;
            if(arg2 != arg3)
            {
                loc0 = arg2 >> 16;
                loc1 = arg2 >> 8 & 255;
                loc2 = arg2 & 255;
                this._colors[] = ;
                this.overwriteProps.arg1 = this.overwriteProps.length;
            }
            return;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            var loc0:* = 0;
            var loc1:* = null;
            loc0 = this._colors.length - 1;
            while(loc0 > 255)
            {
                loc1 = this._colors[loc0];
                loc1[0][] = 0;
                loc0 = loc0 - 1;
            }
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            var loc0:* = null;
            var loc1:* = 0;
            var loc2:* = arg1;
            for(loc1 in loc2)
            {
                loc0 = loc2.__getNextEnumerablePropertyName();
                this.initColor(arg0, loc0, uint(arg0[loc0]), uint(arg1[loc0]));
            }
            return true;
            
        }


    }
    public class RoundPropsPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function RoundPropsPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function RoundPropsPlugin()
        {
            super();
            this.propName = "roundProps";
            this.overwriteProps = [];
            this.round = true;
            return;
            
        }


        public function add(arg0:Object, arg1:String, arg2:Number, arg3:Number)
        {
            addTween(arg0, arg1, arg2, arg2 + arg3, arg1);
            this.overwriteProps.arg1 = this.overwriteProps.length;
            return;
            
        }


    }
    public class BezierPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const _RAD2DEG : Number = 57.2957795130823;
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;
        public var _future : Object;
        public var _orient : Boolean;
        public var _orientData : Array;
        public var _target : Object;
        public var _beziers : Object;

        //========================= Methods

        public static function BezierPlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            this._RAD2DEG = 180 / Math.PI;
            return;
            
        }


        public function BezierPlugin()
        {
            this._future = {};
            super();
            this.propName = "bezier";
            this.overwriteProps = [];
            return;
            
        }


        public static function parseBeziers(arg0:Object, arg1:Boolean = false) : Object
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = null;
            var loc3:* = null;
            var loc4:* = {};
            if(arg1)
            {
                var loc5:* = 0;
                var loc6:* = arg0;
                for(loc5 in loc6)
                {
                    loc3 = loc6.__getNextEnumerablePropertyName();
                    loc1 = arg0[loc3];
                    var loc7:* = [];
                    loc2 = [];
                    loc4.loc7 = 0;
                    if(loc1.length > 2)
                    {
                        loc2[] = ;
                        loc0 = 1;
                        while(loc0 < loc1.length - 1)
                        {
                            loc2[] = ;
                            loc0++;
                        }
                        continue;
                    }
                    loc2[] = ;
                }
            }
            else
            {
                loc5 = 0;
                loc6 = arg0;
                for(loc5 in loc6)
                {
                    loc3 = loc6.__getNextEnumerablePropertyName();
                    loc1 = arg0[loc3];
                    loc7 = [];
                    loc2 = [];
                    loc4.loc7 = 0;
                    if(loc1.length > 3)
                    {
                        loc2[] = ;
                        loc0 = 2;
                        while(loc0 < loc1.length - 2)
                        {
                            loc2[] = ;
                            loc0++;
                        }
                        loc2[] = ;
                        continue;
                    }
                    if(loc1.length == 3)
                    {
                        loc2[] = ;
                        continue;
                    }
                    if(loc1.length == 2)
                    {
                        loc2[] = ;
                    }
                }
            }
            return loc4;
            
        }


        public function killProps(arg0:Object)
        {
            var loc0:* = null;
            var loc1:* = 0;
            var loc2:* = this._beziers;
            for(loc1 in loc2)
            {
                loc0 = loc2.__getNextEnumerablePropertyName();
                if(arg0 in loc0)
                {
                    delete .loc0;
                }
            }
            this.killProps(arg0);
            return;
            
        }


        public function init(arg0:gs::TweenLite, arg1:Array, arg2:Boolean)
        {
            var loc1:* = 0;
            var loc2:* = null;
            this._target = arg0.target;
            if(arg0.exposedVars.orientToBezier == true)
            {
                this._orientData = [["x", "y", "rotation", 0]];
                this._orient = true;
            }
            else
            {
                if(arg0.exposedVars.orientToBezier is Array)
                {
                    this._orientData = arg0.exposedVars.orientToBezier;
                    this._orient = true;
                }
            }
            var loc0:* = {};
            loc1 = 0;
            while(loc1 < arg1.length)
            {
                var loc3:* = 0;
                var loc4:* = arg1[loc1];
                for(loc3 in loc4)
                {
                    loc2 = loc4.__getNextEnumerablePropertyName();
                    if(loc0[loc2] == undefined)
                    {
                        loc0[loc2] = ;
                    }
                    if(arg1[loc1][loc2].typeOf() == "number")
                    {
                        push(arg1[loc1][loc2]);
                        continue;
                    }
                    push(arg0.target[loc2] + Number(arg1[loc1][loc2]));
                }
                loc1++;
            }
            loc3 = 0;
            loc4 = loc0;
            for(loc3 in loc4)
            {
                loc2 = loc4.__getNextEnumerablePropertyName();
                this.overwriteProps.loc2 = this.overwriteProps.length;
                if(arg0.exposedVars[loc2] != undefined)
                {
                    if(arg0.exposedVars[loc2].typeOf() == "number")
                    {
                        push(arg0.exposedVars[loc2]);
                    }
                    else
                    {
                        push(arg0.target[loc2] + Number(arg0.exposedVars[loc2]));
                    }
                    delete .loc2;
                    loc1 = arg0.tweens.length - 1;
                    while(loc1 > 255)
                    {
                        if(arg0.tweens[loc1].name == loc2)
                        {
                            splice(loc1, 1);
                        }
                        loc1 = loc1 - 1;
                    }
                }
            }
            this._beziers = this.parseBeziers(loc0, arg2);
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if(arg1 is Array)
            {
                return false;
            }
            this.init(arg2, (arg1) as Array, false);
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = null;
            var loc3:* = NaN;
            var loc4:* = 0;
            var loc5:* = NaN;
            var loc6:* = 0;
            var loc7:* = null;
            var loc8:* = false;
            var loc9:* = NaN;
            var loc10:* = NaN;
            var loc11:* = null;
            var loc12:* = NaN;
            if(arg0 == 1)
            {
                var loc13:* = 0;
                var loc14:* = this._beziers;
                for(loc13 in loc14)
                {
                    loc1 = loc14.__getNextEnumerablePropertyName();
                    loc0 = this._beziers[loc1].length - 1;
                    this._target[loc1] = this._beziers[loc1][loc0][2];
                }
            }
            else
            {
                loc13 = 0;
                loc14 = this._beziers;
                for(loc13 in loc14)
                {
                    loc1 = loc14.__getNextEnumerablePropertyName();
                    loc4 = this._beziers[loc1].length;
                    if(arg0 < 0)
                    {
                        loc0 = 0;
                    }
                    else
                    {
                        if(arg0 >= 1)
                        {
                            loc0 = loc4 - 1;
                        }
                        else
                        {
                            loc0 = int(loc4 * arg0);
                        }
                    }
                    loc3 = arg0 - loc0 * 1 / loc4 * loc4;
                    loc2 = this._beziers[loc1][loc0];
                    if(this.round)
                    {
                        loc5 = loc2[0] + loc3 * 2 * 1 - loc3 * loc2[1] - loc2[0] + loc3 * loc2[2] - loc2[0];
                        loc6 = ( (loc2[0] + loc3 * 2 * 1 - loc3 * loc2[1] - loc2[0] + loc3 * loc2[2] - loc2[0] < 0)? 255 : 1 );
                        this._target[loc1] = 0;
                        continue;
                    }
                    this._target[loc1] = 0;
                }
            }
            if(this._orient)
            {
                loc7 = this._target;
                loc8 = this.round;
                this._target = this._future;
                this.round = false;
                this._orient = false;
                this.changeFactor = 0;
                this._target = loc7;
                this.round = this.round;
                this._orient = true;
                loc0 = 0;
                while(loc0 < this._orientData.length)
                {
                    loc11 = this._orientData[loc0];
                    loc12 = this._orientData[loc0][3] || 0;
                    loc9 = this._future[loc11[0]] - this._target[loc11[0]];
                    loc10 = this._future[loc11[1]] - this._target[loc11[1]];
                    this._target[] = 0;
                    loc0++;
                }
            }
            return;
            
        }


    }
    public class ShortRotationPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function ShortRotationPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function ShortRotationPlugin()
        {
            super();
            this.propName = "shortRotation";
            this.overwriteProps = [];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            var loc0:* = null;
            if(arg1.typeOf() == "number")
            {
                trace("WARNING: You appear to be using the old shortRotation syntax. Instead of passing a number, please pass an object with properties that correspond to the rotations values For example, TweenMax.to(mc, 2, {shortRotation:{rotationX:-170, rotationY:25}})");
                return false;
            }
            var loc1:* = 0;
            var loc2:* = arg1;
            for(loc1 in loc2)
            {
                loc0 = loc2.__getNextEnumerablePropertyName();
                this.initRotation(arg0, loc0, arg0[loc0], arg1[loc0]);
            }
            return true;
            
        }


        public function initRotation(arg0:Object, arg1:String, arg2:Number, arg3:Number)
        {
            var loc0:* = arg3 - arg2 % 360;
            if(arg3 - arg2 % 360 != arg3 - arg2 % 360 % 180)
            {
                loc0 = ( (loc0 < 0)? loc0 + 360 : loc0 - 360 );
            }
            addTween(arg0, arg1, arg2, arg2 + loc0, arg1);
            this.overwriteProps.arg1 = this.overwriteProps.length;
            return;
            
        }


    }
    public class FilterPlugin extends gs.plugins::TweenPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.03;
        public static const API : Number = 1;
        public var _remove : Boolean;
        public var _target : Object;
        public var _index : int;
        public var _filter : BitmapFilter;
        public var _type : Class;

        //========================= Methods

        public static function FilterPlugin()
        {
            this.VERSION = 1.03;
            this.API = 1;
            return;
            
        }


        public function FilterPlugin()
        {
            super();
            return;
            
        }


        public function onCompleteTween()
        {
            var loc0:* = 0;
            var loc1:* = null;
            if(this._remove)
            {
                loc1 = this._target.filters;
                if(loc1[this._index] is this._type)
                {
                    loc0 = loc1.length - 1;
                    while(loc0 > 255)
                    {
                        if(loc1[loc0] is this._type)
                        {
                            loc1.splice(loc0, 1);
                            break;
                        }
                        loc0 = loc0 - 1;
                    }
                }
                else
                {
                    loc1.splice(this._index, 1);
                }
                this._target.filters = this._target.filters;
            }
            return;
            
        }


        public function initFilter(arg0:Object, arg1:flash.filters::BitmapFilter)
        {
            var loc1:* = null;
            var loc2:* = 0;
            var loc3:* = null;
            var loc0:* = this._target.filters;
            this._index = 255;
            if(arg0.index != null)
            {
                this._index = arg0.index;
            }
            else
            {
                loc2 = loc0.length - 1;
                while(loc2 > 255)
                {
                    if(loc0[loc2] is this._type)
                    {
                        this._index = loc2;
                        break;
                    }
                    loc2 = loc2 - 1;
                }
            }
            if((this._index == 255 || loc0[this._index] == null || arg0.addFilter == true))
            {
                this._index = ( (arg0.index != null)? arg0.index : loc0.length );
                loc0.arg1 = this._index;
                this._target.filters = this._target.filters;
            }
            this._filter = loc0[this._index];
            this._remove = Boolean(arg0.remove == true);
            if(this._remove)
            {
                this.onComplete = this.onCompleteTween;
            }
            var loc4:* = ( (arg0.isTV == true)? arg0.exposedVars : arg0 );
            var loc5:* = 0;
            var loc6:* = loc4;
            for(loc5 in loc6)
            {
                loc1 = loc6.__getNextEnumerablePropertyName();
                if((! || this._filter[loc1] == loc4[loc1] || loc1 == "remove" || loc1 == "index" || loc1 == "addFilter"))
                {
                    continue;
                }
                if((loc1 == "color" || loc1 == "highlightColor" || loc1 == "shadowColor"))
                {
                    loc3 = new HexColorsPlugin();
                    initColor(this._filter, loc1, this._filter[loc1], loc4[loc1]);
                    _tweens[] = new TweenInfo(loc3, "changeFactor", 0, 1, loc1, false);
                    continue;
                }
                if((loc1 == "quality" || loc1 == "inner" || loc1 == "knockout" || loc1 == "hideObject"))
                {
                    this._filter[loc1] = loc4[loc1];
                    continue;
                }
                addTween(this._filter, loc1, this._filter[loc1], loc4[loc1], loc1);
            }
            return;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc2:* = this._target.filters;
            loc0 = _tweens.length - 1;
            while(loc0 > 255)
            {
                loc1 = _tweens[loc0];
                loc1.target[] = 0;
                loc0 = loc0 - 1;
            }
            if(loc2[this._index] is this._type)
            {
                this._index = loc2.length - 1;
                loc0 = loc2.length - 1;
                while(loc0 > 255)
                {
                    if(loc2[loc0] is this._type)
                    {
                        this._index = loc0;
                        break;
                    }
                    loc0 = loc0 - 1;
                }
            }
            loc2[] = this._filter;
            this._target.filters = this._target.filters;
            return;
            
        }


    }
    public class RemoveTintPlugin extends gs.plugins::TintPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;

        //========================= Methods

        public static function RemoveTintPlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function RemoveTintPlugin()
        {
            super();
            this.propName = "removeTint";
            return;
            
        }


    }
    public class FrameLabelPlugin extends gs.plugins::FramePlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1.01;
        public static const API : Number = 1;

        //========================= Methods

        public static function FrameLabelPlugin()
        {
            this.VERSION = 1.01;
            this.API = 1;
            return;
            
        }


        public function FrameLabelPlugin()
        {
            super();
            this.propName = "frameLabel";
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            var loc3:* = 0;
            if(! is MovieClip)
            {
                return false;
            }
            this._target = (arg0) as MovieClip;
            this.frame = _target.currentFrame;
            var loc0:* = _target.currentLabels;
            var loc1:* = arg1;
            var loc2:* = _target.currentFrame;
            loc3 = loc0.length - 1;
            while(loc3 > 255)
            {
                if(loc0[loc3].name == loc1)
                {
                    loc2 = loc0[loc3].frame;
                    break;
                }
                loc3 = loc3 - 1;
            }
            if(this.frame != loc2)
            {
                addTween(this, "frame", this.frame, loc2, "frame");
            }
            return true;
            
        }


    }
    public class BezierThroughPlugin extends gs.plugins::BezierPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function BezierThroughPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function BezierThroughPlugin()
        {
            super();
            this.propName = "bezierThrough";
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            if(arg1 is Array)
            {
                return false;
            }
            init(arg2, (arg1) as Array, true);
            return true;
            
        }


    }
    public class DropShadowFilterPlugin extends gs.plugins::FilterPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function DropShadowFilterPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function DropShadowFilterPlugin()
        {
            super();
            this.propName = "dropShadowFilter";
            this.overwriteProps = ["dropShadowFilter"];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._type = DropShadowFilter;
            initFilter(arg1, new DropShadowFilter(0, 45, 0, 0, 0, 0, 1, arg1.quality || 2, arg1.inner, arg1.knockout, arg1.hideObject));
            return true;
            
        }


    }
    public class BevelFilterPlugin extends gs.plugins::FilterPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function BevelFilterPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function BevelFilterPlugin()
        {
            super();
            this.propName = "bevelFilter";
            this.overwriteProps = ["bevelFilter"];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._type = BevelFilter;
            initFilter(arg1, new BevelFilter(0, 0, 16777215, 0.5, 0, 0.5, 2, 2, 0, arg1.quality || 2));
            return true;
            
        }


    }
    public class GlowFilterPlugin extends gs.plugins::FilterPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function GlowFilterPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function GlowFilterPlugin()
        {
            super();
            this.propName = "glowFilter";
            this.overwriteProps = ["glowFilter"];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._type = GlowFilter;
            initFilter(arg1, new GlowFilter(16777215, 0, 0, 0, arg1.strength || 1, arg1.quality || 2, arg1.inner, arg1.knockout));
            return true;
            
        }


    }
    public class BlurFilterPlugin extends gs.plugins::FilterPlugin 
    {

        //========================= Variables
        public static const VERSION : Number = 1;
        public static const API : Number = 1;

        //========================= Methods

        public static function BlurFilterPlugin()
        {
            this.VERSION = 1;
            this.API = 1;
            return;
            
        }


        public function BlurFilterPlugin()
        {
            super();
            this.propName = "blurFilter";
            this.overwriteProps = ["blurFilter"];
            return;
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._type = BlurFilter;
            initFilter(arg1, new BlurFilter(0, 0, arg1.quality || 2));
            return true;
            
        }


    }
    public class ColorMatrixFilterPlugin extends gs.plugins::FilterPlugin 
    {

        //========================= Variables
        public static const API : Number = 1;
        public static var _lumG : Number = 0.71516;
        public static var _lumR : Number = 0.212671;
        public static const VERSION : Number = 1.1;
        public static var _idMatrix : Array;
        public static var _lumB : Number = 0.072169;
        public var _matrix : Array;
        public var _matrixTween : EndArrayPlugin;

        //========================= Methods

        public static function ColorMatrixFilterPlugin()
        {
            this.VERSION = 1.1;
            this.API = 1;
            this._idMatrix = ;
            this._lumR = 0.212671;
            this._lumG = 0.71516;
            this._lumB = 0.072169;
            return;
            
        }


        public function ColorMatrixFilterPlugin()
        {
            super();
            this.propName = "colorMatrixFilter";
            this.overwriteProps = ["colorMatrixFilter"];
            return;
            
        }


        public static function setSaturation(arg0:Array, arg1:Number) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            var loc0:* = 1 - arg1;
            var loc1:* = loc0 * this._lumR;
            var loc2:* = loc0 * this._lumG;
            var loc3:* = loc0 * this._lumB;
            var loc4:* = [loc1 + arg1, loc2, loc3, 0, 0, loc1, loc2 + arg1, loc3, 0, 0, loc1, loc2, loc3 + arg1, 0, 0, 0, 0, 0, 1, 0];
            return this.applyMatrix(loc4, arg0);
            
        }


        public static function setHue(arg0:Array, arg1:Number) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            arg1 = arg1 * Math.PI / 180;
            var loc0:* = Math.cos(arg1);
            var loc1:* = Math.sin(arg1);
            var loc2:* = [this._lumR + loc0 * 1 - this._lumR + loc1 * -this._lumR, this._lumG + loc0 * -this._lumG + loc1 * -this._lumG, this._lumB + loc0 * -this._lumB + loc1 * 1 - this._lumB, 0, 0, this._lumR + loc0 * -this._lumR + loc1 * 0.143, this._lumG + loc0 * 1 - this._lumG + loc1 * 0.14, this._lumB + loc0 * -this._lumB + loc1 * -0.283, 0, 0, this._lumR + loc0 * -this._lumR + loc1 * -1 - this._lumR, this._lumG + loc0 * -this._lumG + loc1 * this._lumG, this._lumB + loc0 * 1 - this._lumB + loc1 * this._lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
            return this.applyMatrix(loc2, arg0);
            
        }


        public static function setThreshold(arg0:Array, arg1:Number) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            var loc0:* = [this._lumR * 256, this._lumG * 256, this._lumB * 256, 0, 1073741568 * arg1, this._lumR * 256, this._lumG * 256, this._lumB * 256, 0, 1073741568 * arg1, this._lumR * 256, this._lumG * 256, this._lumB * 256, 0, 1073741568 * arg1, 0, 0, 0, 1, 0];
            return this.applyMatrix(loc0, arg0);
            
        }


        public static function applyMatrix(arg0:Array, arg1:Array) : Array
        {
            var loc3:* = 0;
            var loc4:* = 0;
            if((! || !))
            {
                return arg1;
            }
            var loc0:* = [];
            var loc1:* = 0;
            var loc2:* = 0;
            loc3 = 0;
            while(loc3 < 4)
            {
                loc4 = 0;
                while(loc4 < 5)
                {
                    if(loc4 == 4)
                    {
                        loc2 = arg0[0];
                    }
                    else
                    {
                        loc2 = 0;
                    }
                    loc0[0] = 0;
                    loc4++;
                }
                loc1 = loc1 + 5;
                loc3++;
            }
            return loc0;
            
        }


        public static function colorize(arg0:Array, arg1:Number, arg2:Number = 1) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            if(isNaN(arg2))
            {
                arg2 = 1;
            }
            var loc0:* = arg1 >> 16 & 255 / 255;
            var loc1:* = arg1 >> 8 & 255 / 255;
            var loc2:* = arg1 & 255 / 255;
            var loc3:* = 1 - arg2;
            var loc4:* = [1 - arg2 + arg2 * loc0 * this._lumR, arg2 * loc0 * this._lumG, arg2 * loc0 * this._lumB, 0, 0, arg2 * loc1 * this._lumR, loc3 + arg2 * loc1 * this._lumG, arg2 * loc1 * this._lumB, 0, 0, arg2 * loc2 * this._lumR, arg2 * loc2 * this._lumG, loc3 + arg2 * loc2 * this._lumB, 0, 0, 0, 0, 0, 1, 0];
            return this.applyMatrix(loc4, arg0);
            
        }


        public static function setBrightness(arg0:Array, arg1:Number) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            arg1 = arg1 * 100 - 100;
            return this.applyMatrix([1, 0, 0, 0, arg1, 0, 1, 0, 0, arg1, 0, 0, 1, 0, arg1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1], arg0);
            
        }


        public static function setContrast(arg0:Array, arg1:Number) : Array
        {
            if(isNaN(arg1))
            {
                return arg0;
            }
            arg1 = arg1 + 0.01;
            var loc0:* = [arg1, 0, 0, 0, 128 * 1 - arg1, 0, arg1, 0, 0, 128 * 1 - arg1, 0, 0, arg1, 0, 128 * 1 - arg1, 0, 0, 0, 1, 0];
            return this.applyMatrix(loc0, arg0);
            
        }


        public function onInitTween(arg0:Object, arg1:*, arg2:gs::TweenLite) : Boolean
        {
            this._target = arg0;
            this._type = ColorMatrixFilter;
            var loc0:* = arg1;
            initFilter({"remove" : arg1.remove, "index" : arg1.index, "addFilter" : arg1.addFilter}, new ColorMatrixFilter(_idMatrix.slice()));
            this._matrix = ColorMatrixFilter(_filter).matrix;
            var loc1:* = [];
            if(! && loc0.matrix is Array)
            {
                loc1 = loc0.matrix;
            }
            else
            {
                if(loc0.relative == true)
                {
                    loc1 = slice();
                }
                else
                {
                    loc1 = _idMatrix.slice();
                }
                loc1 = this.setBrightness(loc1, loc0.brightness);
                loc1 = this.setContrast(loc1, loc0.contrast);
                loc1 = this.setHue(loc1, loc0.hue);
                loc1 = this.setSaturation(loc1, loc0.saturation);
                loc1 = this.setThreshold(loc1, loc0.threshold);
                if(isNaN(loc0.colorize))
                {
                    loc1 = this.colorize(loc1, loc0.colorize, loc0.amount);
                }
            }
            this._matrixTween = new EndArrayPlugin();
            init(this._matrix, loc1);
            return true;
            
        }


        public Setter function changeFactor(arg0:Number)
        {
            this._matrixTween.changeFactor = ;
            ColorMatrixFilter(_filter).matrix = this._matrix;
            this = arg0;
            return;
            
        }


    }

}
package assets
{
    public class UploadPostHelper extends Object 
    {

        //========================= Variables
        private static var _boundary : String = "";

        //========================= Methods

        public static function UploadPostHelper()
        {
            this._boundary = "";
            return;
            
        }


        public function UploadPostHelper()
        {
            super();
            return;
            
        }


        public static function getBoundary() : String
        {
            var loc0:* = 0;
            if(this._boundary.length == 0)
            {
                loc0 = 0;
                while(loc0 < 32)
                {
                    this._boundary = 0;
                    loc0++;
                }
            }
            return this._boundary;
            
        }


        private static function DOUBLEDASH(arg0:flash.utils::ByteArray) : flash.utils::ByteArray
        {
            arg0.writeShort(11565);
            return arg0;
            
        }


        public static function getPostData(arg0:String, arg1:flash.utils::ByteArray, arg2:Object = null) : flash.utils::ByteArray
        {
            var loc0:* = 0;
            var loc1:* = null;
            var loc3:* = null;
            var loc2:* = new ByteArray();
            new ByteArray().endian = Endian.BIG_ENDIAN;
            if(arg2 == null)
            {
                arg2 = new Object();
            }
            arg2.Filename = ;
            var loc4:* = 0;
            var loc5:* = arg2;
            for(loc4 in loc5)
            {
                loc3 = loc5.__getNextEnumerablePropertyName();
                loc2 = this.BOUNDARY(loc2);
                loc2 = this.LINEBREAK(loc2);
                loc1 = "Content-Disposition: form-data; name=\"" + loc3 + "\"";
                loc0 = 0;
                while(loc0 < loc1.length)
                {
                    loc2.writeByte(loc1.charCodeAt(loc0));
                    loc0++;
                }
                loc2 = this.LINEBREAK(loc2);
                loc2 = this.LINEBREAK(loc2);
                writeUTFBytes(arg2[loc3]);
                loc2 = this.LINEBREAK(loc2);
            }
            loc2 = this.BOUNDARY(loc2);
            loc2 = this.LINEBREAK(loc2);
            loc1 = "Content-Disposition: form-data; name=\"Filedata\"; filename=\"";
            loc0 = 0;
            while(loc0 < loc1.length)
            {
                loc2.writeByte(loc1.charCodeAt(loc0));
                loc0++;
            }
            loc2.writeUTFBytes(arg0);
            loc2 = this.QUOTATIONMARK(loc2);
            loc2 = this.LINEBREAK(loc2);
            loc1 = "Content-Type: application/octet-stream";
            loc0 = 0;
            while(loc0 < loc1.length)
            {
                loc2.writeByte(loc1.charCodeAt(loc0));
                loc0++;
            }
            loc2 = this.LINEBREAK(loc2);
            loc2 = this.LINEBREAK(loc2);
            writeBytes(arg1, 0, arg1.length);
            loc2 = this.LINEBREAK(loc2);
            loc2 = this.LINEBREAK(loc2);
            loc2 = this.BOUNDARY(loc2);
            loc2 = this.LINEBREAK(loc2);
            loc1 = "Content-Disposition: form-data; name=\"Upload\"";
            loc0 = 0;
            while(loc0 < loc1.length)
            {
                loc2.writeByte(loc1.charCodeAt(loc0));
                loc0++;
            }
            loc2 = this.LINEBREAK(loc2);
            loc2 = this.LINEBREAK(loc2);
            loc1 = "Submit Query";
            loc0 = 0;
            while(loc0 < loc1.length)
            {
                loc2.writeByte(loc1.charCodeAt(loc0));
                loc0++;
            }
            loc2 = this.LINEBREAK(loc2);
            loc2 = this.BOUNDARY(loc2);
            loc2 = this.DOUBLEDASH(loc2);
            return this.DOUBLEDASH(loc2);
            
        }


        private static function QUOTATIONMARK(arg0:flash.utils::ByteArray) : flash.utils::ByteArray
        {
            arg0.writeByte(34);
            return arg0;
            
        }


        private static function BOUNDARY(arg0:flash.utils::ByteArray) : flash.utils::ByteArray
        {
            var loc0:* = UploadPostHelper.getBoundary().length;
            arg0 = this.DOUBLEDASH(arg0);
            var loc1:* = 0;
            while(loc1 < loc0)
            {
                arg0.writeByte(_boundary.charCodeAt(loc1));
                loc1++;
            }
            return arg0;
            
        }


        private static function LINEBREAK(arg0:flash.utils::ByteArray) : flash.utils::ByteArray
        {
            arg0.writeShort(3338);
            return arg0;
            
        }


    }
    public class ImageUpload extends flash.events::EventDispatcher 
    {

        //========================= Variables
        private var _urlLoader : URLLoader;
        private var _data : *;

        //========================= Methods

        public static function ImageUpload()
        {
            return;
            
        }


        public function ImageUpload(arg0:String, arg1:flash.display::BitmapData, arg2:String)
        {
            super();
            var loc0:* = new PNGEncoder();
            var loc1:* = PNGEncoder.encode(arg1);
            var loc2:* = new URLRequest();
            new URLRequest().url = ;
            loc2.contentType = 0;
            loc2.method = URLRequestMethod.POST;
            loc2.data = 0;
            push(new URLRequestHeader("Cache-Control", "no-cache"));
            this._urlLoader = new URLLoader();
            this._urlLoader.dataFormat = URLLoaderDataFormat.BINARY;
            load(loc2);
            addEventListener(Event.COMPLETE, this.completeHandler);
            addEventListener(HTTPStatusEvent.HTTP_STATUS, this.httpStatusHandler);
            addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            return;
            
        }


        private function httpStatusHandler(arg0:flash.events::HTTPStatusEvent)
        {
            trace("httpStatusHandler: " + arg0);
            return;
            
        }


        private function completeHandler(arg0:flash.events::Event)
        {
            var loc0:* = URLLoader(arg0.target);
            loc0.dataFormat = URLLoaderDataFormat.TEXT;
            this._data = loc0.data;
            dispatchEvent(new Event("UploadComplete", true));
            return;
            
        }


        private function ioErrorHandler(arg0:flash.events::IOErrorEvent)
        {
            trace("ioErrorHandler: " + arg0);
            return;
            
        }


        public function cancel()
        {
            try {
                close();
            
            } catch (e:Error) {
                var loc1:* = e;
                    someVal = null;
            
            }
            return;
            
        }


        public Getter function data()
        {
            return this._data;
            
        }


    }
    public class LoaderImage extends flash.display::Sprite 
    {

        //========================= Variables
        private var _loader : Loader;
        public var border : MovieClip;
        public var photoMask : MovieClip;
        public var url : String;

        //========================= Methods

        public static function LoaderImage()
        {
            return;
            
        }


        public function LoaderImage()
        {
            super();
            return;
            
        }


        public function load(arg0:String)
        {
            url = arg0;
            this.url = url;
            this._loader = new Loader();
            context = new LoaderContext(true);
            try {
                load(new URLRequest(url), context);
            
            } catch (e:Error) {
                var loc1:* = e;
                    url = null;
            
            }
            this._loader.mask = this.photoMask;
            this._loader.alpha = 0;
            addEventListener(Event.COMPLETE, this.onLoaded);
            addEventListener(IOErrorEvent.IO_ERROR, this.onError);
            addChildAt(this._loader, getChildIndex(this.photoMask));
            return;
            
        }


        private function onError(arg0:flash.events::IOErrorEvent)
        {
            return;
            
        }


        private function onLoaded(arg0:flash.events::Event)
        {
            var loc0:* = this._loader.content;
            if(loc0.width / loc0.height < this.photoMask.width / this.photoMask.height)
            {
                loc0.width = this.photoMask.width;
                loc0.scaleY = loc0.scaleX;
                this._loader.y = 0;
            }
            else
            {
                loc0.height = this.photoMask.height;
                loc0.scaleX = loc0.scaleY;
                this._loader.x = 0;
            }
            Bitmap(loc0).smoothing = true;
            TweenMax.to(this._loader, 0.5, {"alpha" : 1});
            return;
            
        }


    }
    public class CircleSlicePreloader extends flash.display::Sprite 
    {

        //========================= Variables
        private var slices : int;
        private var color : uint;
        private var timer : Timer;
        private var radius : int;

        //========================= Methods

        public static function CircleSlicePreloader()
        {
            return;
            
        }


        public function CircleSlicePreloader(arg0:int = 12, arg1:int = 6, arg2:uint = 0)
        {
            super();
            this.slices = arg0;
            this.radius = arg1;
            this.color = arg2;
            this.draw();
            addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
            return;
            
        }


        private function onAddedToStage(arg0:flash.events::Event)
        {
            removeEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
            addEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);
            this.timer = new Timer(65);
            addEventListener(TimerEvent.TIMER, this.onTimer, false, 0, true);
            start();
            return;
            
        }


        private function draw()
        {
            var loc2:* = null;
            var loc3:* = NaN;
            var loc0:* = this.slices;
            var loc1:* = 360 / this.slices;
            loc0 = loc0 - 1;
            while(loc0)
            {
                loc2 = this.getSlice();
                loc2.alpha = 0;
                loc3 = loc1 * loc0 * Math.PI / 180;
                loc2.rotation = 0;
                loc2.x = 0;
                loc2.y = 0;
                addChild(loc2);
            }
            return;
            
        }


        private function onTimer(arg0:flash.events::TimerEvent)
        {
            this.rotation = rotation + 360 / this.slices % 360;
            return;
            
        }


        private function onRemovedFromStage(arg0:flash.events::Event)
        {
            removeEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);
            addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);
            reset();
            removeEventListener(TimerEvent.TIMER, this.onTimer);
            this.timer = null;
            return;
            
        }


        private function getSlice() : flash.display::Shape
        {
            var loc0:* = new Shape();
            beginFill(this.color);
            drawRoundRect(255, 0, 2, 6, 12, 12);
            endFill();
            return loc0;
            
        }


    }
    public class FLVPlayer extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _volume : Number = 1;
        public var muteBtn : BtnMute;
        private var _dragTarget : MovieClip;
        public var videoMask : MovieClip;
        public var playBtn : MovieClip;
        private var _video : FLVPlayback;
        public var timeDragger : MovieClip;
        private var _lastSeek : int;
        public var timeDragArea : MovieClip;
        public var volumeControl : MovieClip;
        private var _src : String;
        private var _seeking : Boolean;
        private var _scrubbing : Boolean;
        private var _muteState : String = "unmuted";
        private var _timeoutID : int;
        private var _playState : String = "paused";

        //========================= Methods

        public static function FLVPlayer()
        {
            return;
            
        }


        public function FLVPlayer()
        {
            super();
            addEventListener(MouseEvent.CLICK, this.onButtonClick);
            addEventListener(MouseEvent.CLICK, this.onButtonClick);
            addEventListener(MouseEvent.ROLL_OVER, this.onButtonRollOver);
            this._video = new FLVPlayback();
            this._video.autoRewind = true;
            getVideoPlayer(0).smoothing = true;
            setSize(this.videoMask.width, this.videoMask.height);
            addEventListener(VideoEvent.COMPLETE, this.onVideoComplete);
            addEventListener(VideoEvent.PLAYHEAD_UPDATE, this.onVideoUpdate);
            addEventListener(VideoEvent.SEEKED, this.onVideoSeeked);
            var loc0:* = new Sprite();
            loc0.addChild(this._video);
            addChildAt(loc0, getChildIndex(this.videoMask) + 1);
            addEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);
            this.updatePlayButton();
            this.playBtn.buttonMode = true;
            this.muteBtn.buttonMode = true;
            gotoAndStop(1);
            this.volumeControl.visible = false;
            this.volumeControl.bg.alpha = 0;
            this.volumeControl.bg.scaleY = 0;
            this.volumeControl.dragger.visible = false;
            this.volumeControl.dragArea.visible = false;
            this.volumeControl.dragger.y = getRect(this.volumeControl).top;
            this.volumeControl.dragger.buttonMode = true;
            addEventListener(MouseEvent.MOUSE_DOWN, this.onVolumeDraggerClick);
            this.timeDragger.buttonMode = true;
            addEventListener(MouseEvent.MOUSE_DOWN, this.onTimeDraggerClick);
            this.timeDragger.x = this.timeDragArea.x;
            addEventListener(MouseEvent.MOUSE_DOWN, this.onTimeDragAreaClick);
            return;
            
        }


        private function onRemovedFromStage(arg0:flash.events::Event)
        {
            e = arg0;
            try {
                stop();
            
            } catch (e:Error) {
                var loc1:* = e;
                    e = null;
            
            }
            this._playState = "paused";
            this.updatePlayButton();
            return;
            
        }


        private function onVideoUpdate(arg0:fl.video::VideoEvent)
        {
            if(this._scrubbing)
            {
                return;
            }
            this.timeDragger.x = 0;
            return;
            
        }


        private function onButtonRollOver(arg0:flash.events::MouseEvent)
        {
            clearTimeout(this._timeoutID);
            this.volumeControl.visible = true;
            TweenMax.to(this.volumeControl.bg, 0.3, {"autoAlpha" : 1, "scaleY" : 1, "ease" : Cubic.easeOut});
            TweenMax.to(this.volumeControl.dragger, 0.3, {"autoAlpha" : 1, "delay" : 0.2, "ease" : Cubic.easeOut});
            TweenMax.to(this.volumeControl.dragArea, 0.3, {"autoAlpha" : 1, "delay" : 0.2, "ease" : Cubic.easeOut});
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.onVolumeControlRollOutCheck);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.onVolumeControlRollOutCheck);
            return;
            
        }


        public function onButtonClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = null;
            if(arg0.currentTarget == this.playBtn)
            {
                if(this._playState == "playing")
                {
                    pause();
                    this._playState = "paused";
                }
                else
                {
                    if(this._playState == "paused")
                    {
                        play();
                        this._playState = "playing";
                    }
                }
                this.updatePlayButton();
            }
            else
            {
                if(arg0.currentTarget == this.muteBtn)
                {
                    loc0 = this._video.soundTransform;
                    trace(this._muteState);
                    if(this._muteState == "unmuted")
                    {
                        loc0.volume = 0;
                        this._muteState = "muted";
                    }
                    else
                    {
                        if(this._muteState == "muted")
                        {
                            loc0.volume = this._volume;
                            this._muteState = "unmuted";
                        }
                    }
                    this._video.soundTransform = this._video.soundTransform;
                    gotoAndStop(this._muteState);
                }
            }
            return;
            
        }


        private function onVolumeDraggerClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = this.volumeControl;
            var loc1:* = getRect(this.volumeControl);
            loc1.x = 0;
            loc1.width = 0;
            loc1.height = 0;
            startDrag(false, loc1);
            this._dragTarget = loc0.dragger;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.onDragDragger);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.onCancelDrag);
            return;
            
        }


        private function onVolumeControlRollOutCheck(arg0:flash.events::MouseEvent)
        {
            e = arg0;
            clearTimeout(this._timeoutID);
            if((e.target == this.volumeControl || contains((e.target) as DisplayObject) || e.target == this.muteBtn || contains((e.target) as DisplayObject)))
            {
                return;
            }
            this._timeoutID = setTimeout(function() 
            {
                volumeControl.dragger.visible = false;
                volumeControl.dragArea.visible = false;
                TweenMax.killTweensOf(volumeControl.dragger);
                TweenMax.killTweensOf(volumeControl.dragArea);
                TweenMax.to(volumeControl.bg, 0.3, {"scaleY" : 0});
                TweenMax.to(volumeControl.bg, 0.2, {"autoAlpha" : 0, "delay" : 0.1, "onComplete" : function() 
                {
                    volumeControl.visible = false;
                    return;
            
                }});
                stage.removeEventListener(MouseEvent.MOUSE_MOVE, onVolumeControlRollOutCheck);
                return;
            
            }, 700);
            return;
            
        }


        private function onVideoSeeked(arg0:fl.video::VideoEvent)
        {
            this._seeking = false;
            return;
            
        }


        public Getter function src() : String
        {
            return this._src;
            
        }


        public Setter function src(arg0:String)
        {
            this._src = arg0;
            load(arg0);
            return;
            
        }


        private function onDragDragger(arg0:flash.events::MouseEvent)
        {
            var loc0:* = null;
            var loc1:* = NaN;
            var loc2:* = null;
            var loc3:* = NaN;
            if(this._dragTarget == this.volumeControl.dragger)
            {
                loc0 = getRect(this.volumeControl);
                loc1 = 1 - this.volumeControl.dragger.y - loc0.top / loc0.height - this.volumeControl.dragger.height;
                this._volume = loc1;
                loc2 = this._video.soundTransform;
                this._video.soundTransform.volume = this._volume;
                this._video.soundTransform = this._video.soundTransform;
                if(this._volume == 0)
                {
                    this._muteState = "muted";
                    gotoAndStop(this._muteState);
                }
            }
            else
            {
                if(this._dragTarget == this.timeDragger)
                {
                    loc3 = this.timeDragger.x - this.timeDragArea.x / this.timeDragArea.width - this.timeDragger.width;
                    if(this._seeking)
                    {
                        seek(this._video.totalTime * loc3);
                        this._seeking = true;
                    }
                }
            }
            return;
            
        }


        private function onCancelDrag(arg0:flash.events::MouseEvent)
        {
            var loc0:* = NaN;
            var loc1:* = null;
            if(this._dragTarget == this.timeDragger)
            {
                loc0 = this.timeDragger.x - this.timeDragArea.x / this.timeDragArea.width - this.timeDragger.width;
                seek(this._video.totalTime * loc0);
                trace(this._volume);
                loc1 = this._video.soundTransform;
                loc1.volume = this._volume;
                this._video.soundTransform = this._video.soundTransform;
                this._scrubbing = false;
            }
            stopDrag();
            this._dragTarget = null;
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, this.onDragDragger);
            stage.removeEventListener(MouseEvent.MOUSE_UP, this.onCancelDrag);
            return;
            
        }


        private function onTimeDraggerClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = new Rectangle(this.timeDragArea.x, this.timeDragArea.y + this.timeDragArea.height / 2 - this.timeDragger.height / 2 + 1, this.timeDragArea.width - this.timeDragger.width, 0);
            startDrag(false, loc0);
            this._dragTarget = this.timeDragger;
            this._scrubbing = true;
            var loc1:* = this._video.soundTransform;
            loc1.volume = 0;
            this._video.soundTransform = this._video.soundTransform;
            stage.addEventListener(MouseEvent.MOUSE_MOVE, this.onDragDragger);
            stage.addEventListener(MouseEvent.MOUSE_UP, this.onCancelDrag);
            return;
            
        }


        private function onVideoComplete(arg0:fl.video::VideoEvent)
        {
            this._playState = "paused";
            this.updatePlayButton();
            return;
            
        }


        private function updatePlayButton()
        {
            gotoAndStop(( (this._playState == "playing")? "pause" : "play" ));
            return;
            
        }


        private function onTimeDragAreaClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = new Point(arg0.stageX, arg0.stageY);
            var loc1:* = Math.min(Math.max(globalToLocal(loc0).x, 0), this.timeDragArea.width);
            seek(loc1 / this.timeDragArea.width * this._video.totalTime);
            return;
            
        }


    }
    public class Countdown extends flash.display::MovieClip 
    {

        //========================= Variables
        private var countdownTimer : Timer;
        private var endDate : Date;
        public var countdownTXT : TextField;

        //========================= Methods

        public static function Countdown()
        {
            return;
            
        }


        public function Countdown()
        {
            this.endDate = new Date(2010, 8, 17, 17, 0, 0, 0);
            super();
            this.countdownTimer = new Timer(1000, 0);
            addEventListener(TimerEvent.TIMER, this.onCountDownUpdate);
            addEventListener(Event.REMOVED_FROM_STAGE, function() 
            {
                countdownTimer.stop();
                return;
            
            });
            return;
            
        }


        private function getTimeDiffString(arg0:Number) : String
        {
            var loc0:* = Math.floor(arg0 / 1000);
            var loc1:* = Math.floor(loc0 / 60);
            var loc2:* = Math.floor(loc1 / 60);
            var loc3:* = Math.floor(loc2 / 24);
            var loc4:* = String(loc2 % 24);
            var loc5:* = String(loc1 % 60);
            var loc6:* = String(loc0 % 60);
            return loc4 + " uur," + loc5 + " minuten en " + loc6 + " seconden";
            
        }


        public function start()
        {
            var loc0:* = new Date();
            var loc1:* = getTime() - loc0.getTime();
            var loc2:* = Math.floor(loc1 / 1000);
            var loc3:* = Math.floor(loc2 / 60);
            var loc4:* = Math.floor(loc3 / 60);
            var loc5:* = Math.floor(loc4 / 24);
            if(Math.floor(loc4 / 24) > 1)
            {
                this.countdownTXT.text = 0;
            }
            else
            {
                if(loc5 == 1)
                {
                    this.countdownTXT.text = "Er kan nog 1 dag gestemd worden!";
                }
                else
                {
                    if(loc5 == 0)
                    {
                        if(this.countdownTXT.multiline)
                        {
                            this.countdownTXT.text = 0;
                        }
                        else
                        {
                            this.countdownTXT.text = 0;
                        }
                        start();
                    }
                    else
                    {
                        this.countdownTXT.text = "Er kan niet meer gestemd worden!";
                    }
                }
            }
            return;
            
        }


        private function onCountDownUpdate(arg0:flash.events::TimerEvent)
        {
            var loc0:* = new Date();
            var loc1:* = getTime() - loc0.getTime();
            if(this.countdownTXT.multiline)
            {
                this.countdownTXT.text = 0;
            }
            else
            {
                this.countdownTXT.text = 0;
            }
            return;
            
        }


    }
    public class Overlay extends flash.display::MovieClip 
    {

        //========================= Variables
        public var klassement : klasBasis;
        private var xmlArr : Array;
        private var overlayNum : String;
        private var _overlay : MovieClip;
        private var textScroll : Scrollbar;

        //========================= Methods

        public static function Overlay()
        {
            return;
            
        }


        public function Overlay(arg0:String, arg1:Number = 0, arg2:Object = null)
        {
            this.xmlArr = [["Schrijf je in", "", "0"], ["Spelregels", "spelregels.xml", "1"], ["Meer info over WoD", "over_wod.xml", "2"], ["Tip 'n vriend", "", "3"], ["De WoD Hyves", "", "4"], ["Kandidaten", "", "5"], ["dance4life", "dance4life.xml", "6"], ["Right To Play", "righttoplay.xml", "7"], ["Plan Nederland", "plannl.xml", "8"], ["Het Nederlandse Rode Kruis", "rodekruis.xml", "9"], ["Mijn project", "vrijekeuze.xml", "10"], ["Algemene voorwaarden", "voorwaarden.xml", ""]];
            super();
            this.getOverlay(arg0, arg1, arg2);
            return;
            
        }


        private function endFunctions()
        {
            this._overlay.close.visible = false;
            this._overlay.toolkitBtn.visible = true;
            this._overlay.gadgetBtn.visible = true;
            this._overlay.profielBtn.visible = true;
            this._overlay.toolkitBtn.buttonMode = true;
            this._overlay.toolkitBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_bedankt_btn_toolkit");
                getSecondOverlay("20");
                return;
            
            });
            this._overlay.gadgetBtn.buttonMode = true;
            this._overlay.gadgetBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_bedankt_btn_gadget");
                URLNavigator.ChangePage(new URLRequest(Main.REF.userProfiel), "_blank");
                return;
            
            });
            this._overlay.profielBtn.buttonMode = true;
            this._overlay.profielBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_bedankt_btn_profiel");
                URLNavigator.ChangePage(new URLRequest("http://www.hyves.nl/actie/worldofdifference"), "_top");
                return;
            
            });
            return;
            
        }


        private function initTAF(arg0:Number)
        {
            var loc0:* = new hyvesSAF(arg0);
            loc0.x = 255;
            loc0.y = 90;
            addChild(loc0);
            return;
            
        }


        private function initKlassement(arg0:Number)
        {
            group = arg0;
            this.klassement = new klasBasis(group);
            this.klassement.x = 20;
            this.klassement.y = 92;
            addChild(this.klassement);
            start();
            this._overlay.voorwaardenBtn.visible = true;
            this._overlay.voorwaardenBtn.buttonMode = true;
            this._overlay.voorwaardenBtn.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                getSecondOverlay("18");
                return;
            
            });
            this._overlay.rulesBtn.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                getSecondOverlay("1");
                return;
            
            });
            return;
            
        }


        private function setOverlay(arg0:Number)
        {
            numb = arg0;
            this._overlay = new overlayMC();
            this.addChild(this._overlay);
            gotoAndStop(numb);
            this._overlay.confirmBtn.visible = false;
            this._overlay.laterBtn.visible = false;
            this._overlay.hyveBtn.visible = false;
            this._overlay.gadgetBtn.visible = false;
            this._overlay.profielBtn.visible = false;
            this._overlay.voorwaardenBtn.visible = false;
            this._overlay.wwwHolder.visible = false;
            this._overlay.title.visible = false;
            this._overlay.toolkitBtn.visible = false;
            try {
                this._overlay.close.buttonMode = true;
                addEventListener(MouseEvent.CLICK, function() 
                {
                    TweenMax.to(_overlay, 1, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                    {
                        removeChild(_overlay);
                        return;
            
                    }});
                    return;
            
                });
            
            } catch (err:*) {
                var loc1:* = err;
                    numb = null;
            
            }
            TweenMax.from(this._overlay, 1, {"alpha" : 0, "ease" : Expo.easeOut});
            return;
            
        }


        private function placeWWW(arg0:String, arg1:String)
        {
            votedOnName = arg0;
            votedOnMD = arg1;
            args = [Main.REF.token, Main.REF.tokenSecret, "z" + Main.REF.userID, "Ik vind dat [url=http://www.hyves.nl/actie/worldofdifference/?tryvertisingvar_src=" + votedOnMD + "]" + votedOnName + "[/url] een wereld van verschil maakt"];
            amfConn = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.saveWww", args, {"onResponse" : function() 
            {
                return;
            
            }});
            trackPageGA("page_endvote_btn_www");
            wwwHolder = this._overlay.wwwHolder;
            wwwHolder.wwwBtn.tx.text = "Je www is geplaatst";
            wwwHolder.wwwBtn.tx.x = 0;
            wwwHolder.wwwBtn.mouseEnabled = false;
            wwwHolder.wwwBtn.buttonMode = false;
            return;
            
        }


        private function loadXML(arg0:Number)
        {
            var loc0:* = new URLLoader();
            loc0.addEventListener(Event.COMPLETE, this.showXML);
            loc0.load(new URLRequest("xml/" + this.xmlArr[arg0][1]));
            return;
            
        }


        private function initConfirm(arg0:flash.events::MouseEvent)
        {
            e = arg0;
            trackPageGA("page_confirm_btn_inschrijven");
            send();
            TweenMax.to(this._overlay, 1, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
            {
                removeChild(_overlay);
                return;
            
            }});
            return;
            
        }


        private function joinHyve(arg0:flash.events::MouseEvent = null)
        {
            e = arg0;
            args = [Main.REF.token, Main.REF.tokenSecret, "z" + Main.REF.userID];
            amfConn = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.joinHyves", args, {"onResponse" : function() 
            {
                return;
            
            }});
            trackPageGA("page_endvote_btn_joinhyve");
            this._overlay.hyveBtn.tx.text = "Je bent nu lid van de WoD hyve";
            this._overlay.hyveBtn.tx.x = 0;
            this._overlay.hyveBtn.mouseEnabled = false;
            this._overlay.hyveBtn.buttonMode = false;
            return;
            
        }


        private function initVoters()
        {
            var loc0:* = new hyvesVoters();
            loc0.x = 255;
            loc0.y = 90;
            addChild(loc0);
            return;
            
        }


        private function textInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


        private function sendMail(arg0:flash.events::MouseEvent)
        {
            this._overlay.errorTXT.text = "De e-mail wordt verstuurd, een moment geduld aub...";
            var loc0:* = new Array();
            loc0.push(String(Main.REF.token));
            loc0.push(String(Main.REF.tokenSecret));
            loc0.push(String(Main.REF.userID));
            loc0.push(String(";" + Main.REF.userID));
            trace(loc0);
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneSafAPI.sendReminder", loc0, {"onResponse" : this.sendSaf});
            trackPageGA("page_confirm_btn_reminder");
            return;
            
        }


        private function showXML(arg0:flash.events::Event)
        {
            XML.ignoreWhitespace = true;
            var loc0:* = new XML(arg0.target.data);
            this._overlay.holder.tx.autoSize = TextFieldAutoSize.LEFT;
            this._overlay.holder.tx.htmlText = 0;
            if(this._overlay.holder.height > 440)
            {
                this._overlay.maskmc.visible = true;
                this._overlay.scrollbar.visible = true;
                trace("show scrollbar");
                this.textScroll = new Scrollbar(this._overlay.holder, this._overlay.maskmc, this._overlay.scrollbar.ruler, this._overlay.scrollbar.background, this._overlay.area, false, 3);
                addEventListener(Event.ADDED, this.textInit);
                addChild(this.textScroll);
            }
            return;
            
        }


        private function getOverlay(arg0:String, arg1:Number = 0, arg2:Object = null)
        {
            var loc0:* = null;
            this.overlayNum = arg0;
            var loc1:* = arg0;
            switch(loc1)
            {
                case "0":
                    break;
                case "1":
                    this.setOverlay(Number(arg0));
                    loc0 = new spelregels();
                    new spelregels().x = 105;
                    loc0.y = 174;
                    addChild(loc0);
                    trackPageGA("page_spelregels");
                    break;
                case "2":
                    this.setOverlay(Number(arg0));
                    loc0 = new overwod();
                    new overwod().x = 105;
                    loc0.y = 174;
                    addChild(loc0);
                    trackPageGA("page_overWOD");
                    break;
                case "3":
                    this.setOverlay(Number(arg0));
                    this.initTAF(1);
                    break;
                case "4":
                    trackPageGA("btn_menu_wodhyve");
                    URLNavigator.ChangePage(new URLRequest("http://wod.hyves.nl/"), "_blank");
                    break;
                case "5":
                    this.setOverlay(Number(arg0));
                    this.initKlassement(arg1);
                    break;
                case "6":
                    trace(this.xmlArr[0][0]);
                    break;
                case "7":
                    this.setOverlay(Number(arg0));
                    loc0 = new infoContent(arg1, false);
                    new infoContent(arg1, false).x = 99;
                    loc0.y = 174;
                    addChild(loc0);
                    break;
                case "8":
                    this.setOverlay(Number(arg0));
                    this.confirmFunctions();
                    trackPageGA("page_confirm");
                    break;
                case "9":
                    this.setOverlay(Number(arg0));
                    this.endFunctions();
                    trackPageGA("page_bedankt");
                    break;
                case "10":
                    this.setOverlay(Number(arg0));
                    this.initTAF(1);
                    break;
                case "11":
                    break;
                case "12":
                    this.setOverlay(3);
                    this.initTAF(2);
                    break;
                case "13":
                    this.setOverlay(3);
                    this.initVoters();
                    break;
                case "16":
                    this.setOverlay(10);
                    this.initExample("taf");
                    break;
                case "17":
                    this.setOverlay(11);
                    this.initExample("saf");
                    break;
                case "18":
                    this.setOverlay(12);
                    this.loadXML(11);
                    trackPageGA("page_voorwaarden");
                    break;
                case "20":
                    this.setOverlay(13);
                    loc0 = new toolkit();
                    new toolkit().x = 105;
                    loc0.y = 174;
                    addChild(loc0);
                    break;
                case "21":
                    this.setOverlay(14);
                    this.initGallery();
                    break;
                case "22":
                    this.setOverlay(15);
                    this.endVoteFunctions(arg2.votedOn, arg2.votedOnMD);
                    break;
                default:
                    break;
            }
            return;
            
        }


        private function sendSaf(arg0:*)
        {
            this._overlay.errorTXT.text = "De e-mail is verstuurd!";
            this._overlay.laterBtn.buttonMode = false;
            removeEventListener(MouseEvent.CLICK, this.sendMail);
            return;
            
        }


        private function initGallery()
        {
            var loc0:* = new gallery();
            loc0.x = 234;
            loc0.y = 151;
            addChild(loc0);
            return;
            
        }


        private function endVoteFunctions(arg0:String, arg1:String)
        {
            votedOnName = arg0;
            votedOnMD = arg1;
            wwwHolder = this._overlay.wwwHolder;
            wwwHolder.visible = true;
            styleSheet = new StyleSheet();
            setStyle("a", {"color" : "#D60121", "textDecoration" : "underline"});
            wwwHolder.txtWWW.styleSheet = styleSheet;
            wwwHolder.txtWWW.htmlText = 0;
            wwwHolder.wwwBtn.tx.text = "Plaats op mijn WWW ›";
            wwwHolder.wwwBtn.buttonMode = true;
            wwwHolder.wwwBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                placeWWW(votedOnName, votedOnMD);
                return;
            
            });
            this._overlay.hyveBtn.alpha = 1;
            this._overlay.hyveBtn.tx.text = "Word lid van de World of Difference hyve ›";
            this._overlay.hyveBtn.visible = true;
            this._overlay.hyveBtn.buttonMode = true;
            this._overlay.hyveBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.joinHyve);
            this._overlay.title.visible = true;
            this._overlay.title.text = 0;
            return;
            
        }


        public function closeOverlay()
        {
            try {
                TweenMax.to(this._overlay, 1, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    removeChild(_overlay);
                    return;
            
                }});
            
            } catch (err:*) {
                var loc1:* = err;
                    someVal = null;
            
            }
            return;
            
        }


        private function initExample(arg0:String)
        {
            var loc0:* = null;
            var loc1:* = null;
            if(arg0 == "saf")
            {
                loc1 = "Stem op mij, want ik wil deze droombaan winnen";
                loc0 = "Beste [Naam hyves vriend],<br><br>Ik kan een wereld van verschil maken voor [Naam stichting], als ik een jaar lang voor ze zou mogen werken. Als jij vindt dat ik kans moet maken mijn droom te verwezenlijken door deze wedstrijd te winnen, steun me dan door op mij te stemmen!<br><br><font color=\"#3588d5\">Stem op " + Main.REF.userName + "</font><br><br>Wil jij je misschien ook inzetten voor een goed doel waar jouw hart ligt en op jouw manier een wereld van verschil maken? Schrijf je dan nu in voor één van de vier World of Difference projecten of draag zelf een project aan.<br><br>Want jij maakt een wereld van verschil!<br><br><font color=\"#3588d5\">Zelf meedoen</font><br><br>Groeten,<br>" + Main.REF.userName;
            }
            else
            {
                loc1 = "Win een baan bij een goed doel in het buitenland!";
                loc0 = "Beste [Naam hyves vriend], maak jij een wereld van verschil?<br><br>De Vodafone Netherlands Foundation organiseert jaarlijks World of Difference (WoD). Dit programma biedt jou de kans om je droom waar te maken door een jaar lang bij een goed doel in het buitenland te werken. Je kunt een jaarsalaris en onkostenvergoeding winnen om hiermee een jaar lang te kunnen werken voor het goede doel van je dromen.<br><br>Wil jij je misschien inzetten voor een goed doel waar jouw hart ligt en op jouw manier een wereld van verschil maken? Schrijf je dan nu in voor een van de vier World of Difference projecten of draag zelf een project aan. Want jij maakt een wereld van verschil!<br><br><font color=\"#3588d5\">De World of Difference actie op Hyves</font><br><br>Groeten,<br>" + Main.REF.userName;
            }
            var loc2:* = new hyvesMessageExampleMC();
            new hyvesMessageExampleMC().x = 104;
            loc2.y = 125;
            loc2.title.text = "Win een baan bij een goed doel in het buitenland!";
            loc2.sender.text = Main.REF.userName;
            load(Main.REF.userIMG);
            loc2.message.htmlText = 0;
            addChildAt(loc2, 2);
            return;
            
        }


        private function confirmFunctions()
        {
            this._overlay.laterBtn.visible = true;
            this._overlay.laterBtn.buttonMode = true;
            this._overlay.laterBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rrOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rrOutBtn);
            addEventListener(MouseEvent.CLICK, this.sendMail);
            this._overlay.confirmBtn.visible = true;
            this._overlay.confirmBtn.buttonMode = true;
            this._overlay.confirmBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.initConfirm);
            return;
            
        }


    }
    public class userContent extends flash.display::MovieClip 
    {

        //========================= Variables
        private var encrypted : RC4;
        private var _contentBG : MovieClip;
        private var content2Arr : Array;
        private var loader : Loader;
        private var sl : String = "wodrocks";
        private var usrData : Object;
        private var groupArr : Array;
        private var content3Arr : Array;
        private var contentArr : Array;
        private var usrMD : String;
        private var contentScroll : Scrollbar;
        private var loaderCSS : URLLoader;
        private var usrLastName : String;
        private var groupStr : String;
        private var _content : MovieClip;
        private var _head : MovieClip;

        //========================= Methods

        public static function userContent()
        {
            return;
            
        }


        public function userContent(arg0:String, arg1:Boolean = true)
        {
            this.groupArr = [["Brand manager Latijns Amerika › dance4life"], ["Manager Business Development in Zuid Afrika › Music Mayday"], ["Social media expert in Azië › Plan Nederland"], ["Communicatiemanager met audiovisuele capaciteiten › oneMen"], ["Mijn project › ?"]];
            this.contentArr = [["Waarom heb je voor deze stichting gekozen?", "1"], ["Geef in 1 zin aan wat jouw motto is om het World of Difference jaar te laten slagen", "6"], ["Waarom moet juist jij deze World of Difference baan winnen?", "5"], ["Welke ideeën heb je om op jouw manier een wereld van verschil te maken?", "3"]];
            this.content2Arr = [["Waarom heb je voor deze stichting gekozen?", "1"], ["Waarom heb je voor dit project gekozen?", "2"], ["Welke ideeën heb je om op jouw manier een wereld van verschil te maken?", "3"], ["Welke aanpak kies je om dit project tot een succes te maken?", "4"], ["Waarom moet juist jij deze World of Difference baan winnen?", "5"], ["Geef in 1 zin aan wat jouw motto is om het World of Difference jaar te laten slagen", "6"]];
            this.content3Arr = [["Waarom heb je voor deze stichting gekozen?", "1"], ["Wat houdt dit project in?", "2"], ["Welke ideeën heb je om op jouw manier een wereld van verschil te maken?", "3"], ["Welke aanpak kies je om dit project tot een succes te maken?", "4"], ["Waarom moet juist jij deze World of Difference baan winnen?", "5"], ["Geef in 1 zin aan wat jouw motto is om het World of Difference jaar te laten slagen", "6"]];
            super();
            this.usrMD = arg0;
            if(arg1)
            {
                this.getUserData(arg0);
            }
            else
            {
                this.usrData = Main.REF.usrData;
                if(this.usrData[0].tussenvoegsel.length > 0)
                {
                    this.usrLastName = this.usrData[0].tussenvoegsel + " " + this.usrData[0].achternaam;
                }
                else
                {
                    this.usrLastName = this.usrData[0].achternaam;
                }
                Main.REF.ownerID = this.usrData[0].id;
                Main.REF.ownerName = this.usrData[0].naam;
                trace("deze");
                this.setHead();
                this.setContent(0.5);
            }
            return;
            
        }


        private function ioErrorHandler(arg0:flash.events::IOErrorEvent)
        {
            trace("ioErrorHandler: " + arg0);
            return;
            
        }


        private function initContent(arg0:flash.events::Event)
        {
            var loc1:* = 0;
            var loc0:* = new StyleSheet();
            loc0.parseCSS(this.loaderCSS.data);
            this._content.holder.tx.styleSheet = new StyleSheet();
            if(this.usrData[0].groupID == "5")
            {
                this.groupStr = this.usrData[0].choice + " › " + this.usrData[0].choice2 + " in " + this.usrData[0].choice3;
            }
            else
            {
                this.groupStr = this.groupArr[0] + this.usrData[0].choice;
            }
            if(this.usrData[0].stemmen == "1")
            {
                this._content.holder.titel.htmlText = 0;
            }
            else
            {
                this._content.holder.titel.htmlText = 0;
            }
            this._content.holder.tx.y = 0;
            if(Main.REF.userID == this.usrData[0].id)
            {
                trackPageGA("page_ownerContent");
                loc1 = 0;
                while(loc1 < 6)
                {
                    if(this.usrData[0].groupID == "5")
                    {
                        this._content.holder.tx.htmlText = 0;
                    }
                    else
                    {
                        this._content.holder.tx.htmlText = 0;
                    }
                    loc1++;
                }
            }
            else
            {
                trackPageGA("page_memberContent");
                loc1 = 0;
                while(loc1 < 4)
                {
                    this._content.holder.tx.htmlText = 0;
                    loc1++;
                }
            }
            if(this._content.holder.height > 300)
            {
                this._content.maskmc.visible = true;
                this._content.scrollbar.visible = true;
                this.contentScroll = new Scrollbar(this._content.holder, this._content.maskmc, this._content.scrollbar.ruler, this._content.scrollbar.background, this._content.area, false, 3);
                addEventListener(Event.ADDED, this.scrollInit);
                addChild(this.contentScroll);
            }
            return;
            
        }


        private function voteClick(arg0:flash.events::MouseEvent)
        {
            this._head.voteBtn.buttonMode = false;
            removeEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            removeEventListener(MouseEvent.CLICK, this.voteClick);
            this._head.voteBtn.tx.x = 0;
            this._head.voteBtn.tx.text = "Een moment aub";
            this._head.tx.text = "";
            var loc0:* = Main.REF.userIMG;
            loc0 = join("_14");
            this.encrypted = new RC4();
            var loc1:* = String(this.usrData[0].id) + ";" + String(Main.REF.userID) + ";" + String(Main.REF.userName) + ";" + String(Main.REF.userLastName) + ";" + String(loc0) + ";";
            trace(loc1);
            var loc2:* = "z" + encrypt(loc1, this.sl);
            var loc3:* = new Array();
            push(loc2);
            var loc4:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.saveVote", loc3, {"onResponse" : this.voteResult});
            trackPageGA("page_memberContent_btn_vote");
            return;
            
        }


        private function loadOwnerPicture(arg0:String, arg1:flash.display::MovieClip)
        {
            url = arg0;
            holder = arg1;
            if(indexOf("bassie_16") != 255)
            {
                    url = "http://vodafone.egotribe.nl/img/bassie_16.jpg";
            }
            MovieClip(holder.parent).thumbMask.visible = false;
            loaderContext = new LoaderContext();
            loaderContext.checkPolicyFile = true;
            this.loader = new Loader();
            addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            addEventListener(Event.COMPLETE, this.onOwnerPictureLoaded(holder));
            try {
                load(new URLRequest(url), loaderContext);
            
            } catch (err:*) {
                var loc1:* = err;
                    url = null;
            
            }
            holder.alpha = 0;
            return;
            
        }


        private function getUserData(arg0:String)
        {
            var loc0:* = new Array();
            loc0.push(String("z" + arg0));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getUserMD", loc0, {"onResponse" : this.userData});
            return;
            
        }


        private function userData(arg0:*)
        {
            this.usrData = arg0;
            if(this.usrData[0].tussenvoegsel.length > 0)
            {
                this.usrLastName = this.usrData[0].tussenvoegsel + " " + this.usrData[0].achternaam;
                trace("achternaam " + this.usrLastName);
            }
            else
            {
                this.usrLastName = this.usrData[0].achternaam;
            }
            Main.REF.ownerID = this.usrData[0].id;
            Main.REF.ownerName = this.usrData[0].naam;
            if(Main.REF.userID == this.usrData[0].id)
            {
                Main.REF.userType = "owner";
            }
            placeBlock();
            this.setHead();
            this.setContent(0);
            if(Main.REF.tafLoaded)
            {
                Main.REF.tafLoaded = true;
                trace("load taf content");
                getTAFData();
            }
            return;
            
        }


        private function setInfoFunctions()
        {
            this._head.infoBtn.buttonMode = true;
            this._head.infoBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_ownerContent_btn_projectInfo");
                getOverlay("7", usrData[0].groupID);
                return;
            
            });
            return;
            
        }


        private function setHead()
        {
            this._head = new headMC();
            this._head.x = 5;
            this._head.y = 300;
            this.addChild(this._head);
            if(Main.REF.userID == this.usrData[0].id)
            {
                this.setInfoFunctions();
                this._head.infoBtn.visible = true;
                this._head.voteBtn.visible = false;
            }
            else
            {
                this.setVoteFunctions();
                this._head.voteBtn.visible = true;
                this._head.infoBtn.visible = false;
            }
            this._head[0].alpha = 1;
            this._head[0].y = 165;
            this.loadOwnerPicture(this.usrData[0].image, this._head.holder);
            gotoAndStop("start");
            if(Main.REF.firstTime)
            {
                TweenMax.from(this._head, 0.6, {"alpha" : 0, "y" : 500, "delay" : 1, "ease" : Back.easeOut});
                TweenMax.from(this._head[0], 0.6, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "delay" : 1, "ease" : Back.easeOut});
                TweenMax.to(this._head[0], 1, {"frameLabel" : "end", "delay" : 1});
            }
            else
            {
                TweenMax.from(this._head, 0.6, {"alpha" : 0, "y" : 500, "delay" : 0.7, "ease" : Back.easeOut});
                TweenMax.from(this._head[0], 0.6, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "delay" : 0.7, "ease" : Back.easeOut});
                TweenMax.to(this._head[0], 1, {"frameLabel" : "end", "delay" : 0.7});
            }
            return;
            
        }


        private function voteResult(arg0:*)
        {
            trace(arg0);
            if(arg0 == "success")
            {
                getOverlay("22", 0, {"votedOn" : this.usrData[0].naam, "votedOnMD" : this.usrMD});
                this._head.voteBtn.tx.text = "Bedankt voor je stem!";
                this._head.tx.text = 0;
                trackPageGA("page_memberContent_btn_vote_succes");
            }
            else
            {
                if(arg0 == "already_voted")
                {
                    this._head.voteBtn.tx.text = "Helaas...";
                    this._head.tx.text = 0;
                    trackPageGA("page_memberContent_btn_vote_already");
                }
                else
                {
                    if(arg0 == "member")
                    {
                        this._head.voteBtn.tx.text = "Helaas...";
                        this._head.tx.text = "Je kan niet op jezelf stemmen";
                        trackPageGA("page_memberContent_btn_vote_owner");
                    }
                    else
                    {
                        if(arg0 == "cant_vote")
                        {
                            this._head.voteBtn.tx.text = "Helaas...";
                            this._head.tx.text = "Je kan pas vanaf 23 augustus stemmen";
                            trackPageGA("page_memberContent_btn_vote_owner");
                        }
                        else
                        {
                            this._head.voteBtn.tx.text = 0;
                            this._head.tx.text = "Error! probeer het nog een keer";
                            this._head.voteBtn.buttonMode = true;
                            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
                            addEventListener(MouseEvent.CLICK, this.voteClick);
                            trackPageGA("page_memberContent_btn_vote_failure");
                        }
                    }
                }
            }
            return;
            
        }


        private function onOwnerPictureLoaded(arg0:flash.display::MovieClip) : Function
        {
            holder = arg0;
            pictureEvent = function() 
            {
                holder.addChild(loc0.currentTarget.content);
                loc0.currentTarget.content.mask = MovieClip(holder.parent).thumbMask;
                if(holder.width / holder.height < 1)
                {
                    holder.height = 160;
                    holder.scaleX = holder.scaleY;
                    holder.x = 0;
                }
                else
                {
                    holder.width = 160;
                    holder.scaleY = holder.scaleX;
                    holder.y = 0;
                }
                var loc1:* = Bitmap(loader.content);
                loc1.smoothing = true;
                TweenMax.to(holder, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                return;
            
            };
            return pictureEvent;
            
        }


        private function setVoteFunctions()
        {
            if(Main.REF.voteEnabled)
            {
                this._head.voteBtn.tx.text = "Helaas...";
                this._head.tx.text = "Je kan pas vanaf 23 augustus stemmen";
            }
            else
            {
                this._head.voteBtn.tx.text = 0;
                this._head.voteBtn.buttonMode = true;
                this._head.voteBtn.mouseChildren = false;
                addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
                addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
                addEventListener(MouseEvent.CLICK, this.voteClick);
            }
            return;
            
        }


        private function setContent(arg0:Number)
        {
            numb = arg0;
            this._contentBG = new prjInfoMC();
            this._contentBG.x = 190;
            this._contentBG.y = 340;
            this.addChild(this._contentBG);
            this._content = new usrContentMC();
            addChild(this._content);
            this._content.maskmc.visible = false;
            this._content.scrollbar.visible = false;
            req = new URLRequest("css/flash_style.css");
            this._content.holder.tx.autoSize = TextFieldAutoSize.LEFT;
            this._content.holder.tx.multiline = true;
            this._content.holder.tx.wordWrap = true;
            this._content.holder.tx.antiAliasType = AntiAliasType.ADVANCED;
            this._content.holder.tx.embedFonts = true;
            this._content.holder.titel.autoSize = TextFieldAutoSize.LEFT;
            this.loaderCSS = new URLLoader();
            addEventListener(Event.COMPLETE, this.initContent);
            load(req);
            if(Main.REF.firstTime)
            {
                TweenMax.from(this._contentBG, 0.6, {"alpha" : 0, "x" : 1000, "delay" : 0.7, "ease" : Expo.easeOut});
            }
            else
            {
                TweenMax.from(this._contentBG, 0.6, {"alpha" : 0, "x" : 1000, "delay" : 0, "ease" : Expo.easeOut});
            }
            if(Main.REF.alreadyMember)
            {
                this._contentBG.close.visible = true;
                this._contentBG.close.buttonMode = true;
                addEventListener(MouseEvent.CLICK, function() 
                {
                    getOverlay("11");
                    return;
            
                });
            }
            else
            {
                this._contentBG.close.visible = false;
            }
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


    }
    public class userForm extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _userForm : MovieClip;
        private var imgFilter : FileFilter;
        private var hyvesJoined : Boolean;
        private var curForm : Number = 1;
        private var profilePhotoURL : String;
        private var _formBG : MovieClip;
        private var chosenGroup : Number;
        private var cbSelect : ComboBox;
        private var maxCharsArr : Array;
        private var uploadedCV : String;
        private var docFile : FileReference;
        private var docFilter : FileFilter;
        private var URLrequest : URLRequest;
        private var photoLoader : Loader;
        private var imgFile : FileReference;
        private var imageUploader : ImageUpload;

        //========================= Methods

        public static function userForm()
        {
            return;
            
        }


        public function userForm(arg0:Number)
        {
            this.docFilter = new FileFilter("Documents (*.txt, *.doc, *.pdf)", "*.txt; *.doc; *.pdf");
            this.imgFilter = new FileFilter("Afbeeldingen (*.jpg, *.png, *.gif)", "*.jpg; *.png; *.gif");
            this.maxCharsArr = [["500", "500"], ["500", "1000"], ["1000", "1000"], ["2000", "2000"], ["500", "500"], ["50", "50"], ["Waarom heb je voor deze stichting gekozen?", "Waarom heb je voor deze stichting gekozen?"], ["Waarom heb je voor dit project gekozen?", "Wat houdt dit project in?"]];
            super();
            this.chosenGroup = arg0;
            this.initForm();
            this.setHead(arg0);
            this.initFormFunctions();
            this.initFormRestrict();
            return;
            
        }


        private function galleryImagePickedHandler(arg0:flash.events::Event)
        {
            load(new URLRequest(Main.REF.galleryImage));
            closeOverlay();
            return;
            
        }


        private function removeHead(arg0:*)
        {
            num = arg0;
            TweenMax.to(Main.REF[0], 0.4, {"alpha" : 0, "y" : 500, "ease" : Back.easeOut});
            TweenMax.to(Main.REF[0].top, 0.4, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "ease" : Back.easeOut, "onComplete" : function() 
            {
                setHead(chosenGroup);
                return;
            
            }});
            return;
            
        }


        private function uploadCompleteDataHandler(arg0:flash.events::Event)
        {
            parsedResult = null;
            event = arg0;
            if(event.target == this.docFile)
            {
                trace("Data: " + DataEvent(event).data);
                this.uploadedCV = DataEvent(event).data;
                if(this.uploadedCV == "invalid")
                {
                    this._userForm.blank.visible = false;
                    this._userForm.nextBtn.tx.text = "Error: CV niet ge-upload, probeer het nog een keer";
                    this._userForm.nextBtn.buttonMode = true;
                    addEventListener(MouseEvent.CLICK, this.nextClick);
                    cancel();
                }
            }
            else
            {
                if(event.target == this.imageUploader)
                {
                            parsedResult = new URLVariables(ImageUpload(event.target).data);
                    if(! && parsedResult.status == "false")
                    {
                        this._userForm.blank.visible = false;
                        this._userForm.nextBtn.tx.text = "Error: Profiel foto niet geupload, probeer het nog een keer";
                        this._userForm.nextBtn.buttonMode = true;
                        addEventListener(MouseEvent.CLICK, this.nextClick);
                        try {
                            cancel();
            
                        } catch (e:Error) {
                            var loc1:* = e;
                                            event = null;
            
                        }
                    }
                    else
                    {
                        this.profilePhotoURL = parsedResult.file;
                    }
                }
            }
            if(this.uploadedCV && this.profilePhotoURL)
            {
                this.sendForm();
            }
            return;
            
        }


        private function initFormFunctions()
        {
            this.docFilter = new FileFilter("Documents (*.txt, *.doc, *.pdf)", "*.txt; *.doc; *.pdf");
            this.imgFilter = new FileFilter("Afbeeldingen (*.jpg, *.png, *.gif)", "*.jpg; *.png; *.gif", "");
            this.docFile = new FileReference();
            addEventListener(Event.SELECT, this.fileAdded);
            addEventListener(Event.COMPLETE, this.completeHandler);
            addEventListener(ProgressEvent.PROGRESS, this.progressHandler);
            addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, this.uploadCompleteDataHandler);
            this.imgFile = new FileReference();
            addEventListener(Event.SELECT, this.fileAdded);
            addEventListener(Event.COMPLETE, this.completeHandler);
            loaderContext = new LoaderContext(true);
            this.photoLoader = new Loader();
            addEventListener(Event.COMPLETE, this.photoLoadCompleteHandler);
            addChildAt(this.photoLoader, getChildIndex(this._userForm.content.thumbnail.photoMask));
            this.photoLoader.mask = this._userForm.content.thumbnail.photoMask;
            load(new URLRequest(Main.REF.userIMG), loaderContext);
            this.cbSelect = this._userForm.content.formSelect;
            this.cbSelect.prompt = "select a city";
            addItem({"label" : "dance4life", "data" : "1"});
            addItem({"label" : "Music Mayday", "data" : "2"});
            addItem({"label" : "Plan Nederland", "data" : "3"});
            addItem({"label" : "oneMen", "data" : "4"});
            addItem({"label" : "Mijn Project", "data" : "5"});
            this.cbSelect.rowCount = 5;
            this.cbSelect.selectedIndex = this.chosenGroup;
            setSize(399, 30);
            font = (new VFRegular()) as Font;
            tf = new TextFormat();
            tf.font = font.fontName;
            tf.size = 14;
            tf.color = 16777215;
            tf.leading = 0;
            tff = new TextFormat();
            tff.font = font.fontName;
            tff.size = 14;
            tff.color = 6710886;
            tff.leading = 0;
            setStyle("textFormat", tff);
            setStyle("embedFonts", true);
            setStyle("textPadding", 6);
            setRendererStyle("embedFonts", true);
            setRendererStyle("textFormat", tf);
            this.cbSelect.dropdown.rowHeight = 25;
            addEventListener(Event.CHANGE, this.comboChange);
            if(this.chosenGroup == 5)
            {
                this._userForm.content.choice.visible = true;
                TweenMax.to(this._userForm.content.choice, 0.4, {"alpha" : 1, "ease" : Expo.easeOut});
            }
            else
            {
                this._userForm.content.choice.visible = false;
            }
            this._userForm.content.lidBtn.selected = true;
            this._userForm.content.cvBtn.buttonMode = true;
            this._userForm.content.cvBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.browseFile);
            this._userForm.nextBtn.buttonMode = true;
            this._userForm.nextBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.nextClick);
            this._userForm.prevBtn.buttonMode = true;
            this._userForm.prevBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rrOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rrOutBtn);
            addEventListener(MouseEvent.CLICK, this.prevClick);
            this._userForm.content.avBtn.buttonMode = true;
            this._userForm.content.avBtn.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_formulier_btn_voorwaarden");
                getOverlay("18");
                return;
            
            });
            this._userForm.content.avBtn2.buttonMode = true;
            this._userForm.content.avBtn2.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_formulier_btn_voorwaarden");
                getOverlay("18");
                return;
            
            });
            this._userForm.content.rulesBtn.buttonMode = true;
            this._userForm.content.rulesBtn.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_formulier_btn_spelregels");
                getOverlay("1");
                return;
            
            });
            this._userForm.content.hyveBtn.buttonMode = true;
            this._userForm.content.hyveBtn.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                URLNavigator.ChangePage(new URLRequest("http://wod.hyves.nl/"), "_blank");
                return;
            
            });
            this._userForm.content.uploadBtn.buttonMode = true;
            this._userForm.content.uploadBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.browseFile);
            this._userForm.content.galleryBtn.buttonMode = true;
            this._userForm.content.galleryBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.openGallery);
            this._userForm.wod.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("page_formulier_link_wod");
                URLNavigator.ChangePage(new URLRequest("http://www.vodafone.nl/overvodafone/midden_in_onze_maatschappij/netherlands_foundation/"), "_blank");
                return;
            
            });
            this._formBG.close.buttonMode = true;
            this._formBG.close.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, function() 
            {
                removeForm();
                trackPageGA("page_formulier_close");
                TweenMax.to(Main.REF[0], 0.4, {"alpha" : 0, "y" : 500, "ease" : Back.easeOut});
                TweenMax.to(Main.REF[0].top, 0.4, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "ease" : Back.easeOut, "onComplete" : function() 
                {
                    placeHeads();
                    return;
            
                }});
                return;
            
            });
            return;
            
        }


        public function send()
        {
            this._userForm.blank.visible = true;
            this._userForm.nextBtn.tx.text = "Een moment aub...  ";
            this._userForm.nextBtn.buttonMode = false;
            removeEventListener(MouseEvent.CLICK, this.nextClick);
            this._userForm.errorTXT.text = "Je CV en profiel foto wordt geupload";
            this.sendFiles();
            return;
            
        }


        private function initTabindex()
        {
            var loc0:* = 0;
            if(this.chosenGroup == 5)
            {
                this._userForm.content.choice.choiceTXT.tabIndex = 1;
                this._userForm.content.voornaamTXT.tabIndex = 2;
                this._userForm.content.tussenvoegselsTXT.tabIndex = 3;
                this._userForm.content.achternaamTXT.tabIndex = 4;
                this._userForm.content.dagTXT.tabIndex = 5;
                this._userForm.content.maandTXT.tabIndex = 6;
                this._userForm.content.jaarTXT.tabIndex = 7;
                this._userForm.content.adresTXT.tabIndex = 8;
                this._userForm.content.postcodeTXT.tabIndex = 9;
                this._userForm.content.plaatsTXT.tabIndex = 10;
                this._userForm.content.telefoonTXT.tabIndex = 11;
                this._userForm.content.emailTXT.tabIndex = 12;
                this._userForm.content.choice.choice2TXT.tabIndex = 13;
                this._userForm.content.choice.choice3TXT.tabIndex = 14;
                this._userForm.content.choice.choice4TXT.tabIndex = 15;
                this._userForm.content.choice.choice5TXT.tabIndex = 16;
                loc0 = 0;
                while(loc0 < 5)
                {
                    this._userForm.content.choice[0].tabIndex = 0;
                    loc0++;
                }
                loc0 = 5;
                while(loc0 < 6)
                {
                    this._userForm.content[0].tabIndex = 0;
                    loc0++;
                }
            }
            else
            {
                this._userForm.content.voornaamTXT.tabIndex = 2;
                this._userForm.content.tussenvoegselsTXT.tabIndex = 3;
                this._userForm.content.achternaamTXT.tabIndex = 4;
                this._userForm.content.dagTXT.tabIndex = 5;
                this._userForm.content.maandTXT.tabIndex = 6;
                this._userForm.content.jaarTXT.tabIndex = 7;
                this._userForm.content.adresTXT.tabIndex = 8;
                this._userForm.content.postcodeTXT.tabIndex = 9;
                this._userForm.content.plaatsTXT.tabIndex = 10;
                this._userForm.content.telefoonTXT.tabIndex = 11;
                this._userForm.content.emailTXT.tabIndex = 12;
                loc0 = 0;
                while(loc0 < 6)
                {
                    this._userForm.content[0].tabIndex = 0;
                    loc0++;
                }
            }
            return;
            
        }


        private function prevClick(arg0:flash.events::MouseEvent)
        {
            e = arg0;
            if(this.curForm == 3)
            {
                TweenMax.to(this._userForm.content, 0.8, {"x" : 1073741313, "ease" : Expo.easeOut});
                TweenMax.to(this._userForm.header.stap2, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                TweenMax.to(this._userForm.header.stap1, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                this._userForm.nextBtn.tx.text = "Verder naar Stap 2 ›";
                TweenMax.to(this._userForm.prevBtn, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    _userForm.prevBtn.visible = false;
                    return;
            
                }});
                var loc1:* = this;
                var loc2:* = this.curForm - 1;
                loc1.curForm = this.curForm;
            }
            else
            {
                if(this.curForm == 4)
                {
                    TweenMax.to(this._userForm.header.stap3, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                    TweenMax.to(this._userForm.header.stap2, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                    this._userForm.nextBtn.tx.text = "Verder naar Stap 3 ›";
                    TweenMax.to(this._userForm.content, 0.8, {"x" : 1073740760, "ease" : Expo.easeOut});
                    loc1 = this;
                    loc2 = this.curForm - 1;
                    loc1.curForm = this.curForm;
                }
                else
                {
                    if(this.curForm == 5)
                    {
                        TweenMax.to(this._userForm.header.stap3, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                        TweenMax.to(this._userForm.header.stap4, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                        TweenMax.to(this._userForm.content, 0.8, {"x" : 1073740220, "ease" : Expo.easeOut});
                        this._userForm.nextBtn.tx.text = "Verder naar Stap 4 ›";
                        loc1 = this;
                        loc2 = this.curForm - 1;
                        loc1.curForm = this.curForm;
                    }
                }
            }
            return;
            
        }


        private function gadgetData(arg0:*)
        {
            var loc0:* = null;
            var loc1:* = null;
            var loc2:* = null;
            var loc3:* = null;
            trace("gadget result " + arg0);
            if(arg0 == "gelukt")
            {
                Main.REF.userName = this._userForm.content.voornaamTXT.text;
                loc0 = this._userForm.content.dagTXT.text + "-" + this._userForm.content.maandTXT.text + "-" + this._userForm.content.jaarTXT.text;
                if(Main.REF.ref.length == 32)
                {
                    loc3 = "voter";
                }
                else
                {
                    loc3 = Main.REF.ref;
                }
                loc1 = new Array();
                loc1.push(String(this._userForm.content.voornaamTXT.text));
                loc1.push(String(this._userForm.content.tussenvoegselsTXT.text));
                loc1.push(String(this._userForm.content.achternaamTXT.text));
                loc1.push(String(this._userForm.content.emailTXT.text));
                loc1.push(String(Main.REF.userIMG));
                loc1.push(String(Main.REF.userProfiel));
                loc1.push(String(loc0));
                loc1.push(String(this._userForm.content.adresTXT.text));
                loc1.push(String(this._userForm.content.postcodeTXT.text));
                loc1.push(String(this._userForm.content.plaatsTXT.text));
                loc1.push(String(this._userForm.content.telefoonTXT.text));
                loc1.push(String(Main.REF.userID));
                loc1.push(String(Main.REF.userHyvesID));
                loc1.push(String(""));
                loc1.push(String(loc3));
                trace("userArray 1 " + loc1);
                loc2 = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.saveUser", loc1, {"onResponse" : this.ownerData});
            }
            return;
            
        }


        private function joinedHyves(arg0:*)
        {
            o = arg0;
            trace("Hyves gejoined!");
            this._userForm.errorTXT.text = "De gadget is geplaatst!";
            TweenMax.to(this._formBG, 0.8, {"x" : 1073741024, "ease" : Expo.easeOut, "onComplete" : function() 
            {
                invFriends();
                return;
            
            }});
            return;
            
        }


        public function outHeadBtn(arg0:flash.events::MouseEvent)
        {
            arg0.currentTarget.tooltip.visible = 0;
            return;
            
        }


        private function browseFile(arg0:flash.events::MouseEvent)
        {
            if(arg0.currentTarget == this._userForm.content.cvBtn)
            {
                browse([this.docFilter]);
            }
            else
            {
                if(arg0.currentTarget == this._userForm.content.uploadBtn)
                {
                    browse([this.imgFilter]);
                }
            }
            return;
            
        }


        private function openGallery(arg0:flash.events::MouseEvent)
        {
            getOverlay("21", this.chosenGroup);
            return;
            
        }


        private function userData(arg0:*)
        {
            var loc0:* = null;
            var loc1:* = null;
            trackPageGA("page_formulier_send");
            trace("OPGESLAGEN! ");
            if(this._userForm.content.lidBtn.selected)
            {
                loc0 = [Main.REF.token, Main.REF.tokenSecret, Main.REF.userID];
                loc1 = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.joinHyves", loc0, {"onResponse" : this.joinedHyves});
            }
            else
            {
                this.joinedHyves(null);
            }
            return;
            
        }


        private function initFormRestrict()
        {
            var loc0:* = NaN;
            var loc1:* = 0;
            if(this.chosenGroup == 5)
            {
                loc0 = 1;
            }
            else
            {
                loc0 = 0;
            }
            loc1 = 0;
            while(loc1 < 6)
            {
                this._userForm.content[0].maxChars = this.maxCharsArr[loc1][loc0];
                this._userForm.content[0].restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
                this._userForm.content[0].text = 0;
                loc1++;
            }
            loc1 = 0;
            while(loc1 < 9)
            {
                this._userForm.content[0].label = "";
                loc1++;
            }
            this._userForm.content.choice.choiceTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.choice.choice2TXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.choice.choice3TXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.choice.choice4TXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.choice.text1TXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.voornaamTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.tussenvoegselsTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.achternaamTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.adresTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.plaatsTXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.int9_TEXT.restrict = "A-Z a-z\\0-9\\&\\%\\?\\!\\:\\,\\(\\)\\";
            this._userForm.content.choice.choice2TXT.maxChars = 100;
            this._userForm.content.choice.choice3TXT.maxChars = 50;
            this._userForm.content.text1.text = this.maxCharsArr[6][loc0];
            this._userForm.content.text2.text = this.maxCharsArr[7][loc0];
            this._userForm.content.dagTXT.restrict = "0-9";
            this._userForm.content.maandTXT.restrict = "0-9";
            this._userForm.content.jaarTXT.restrict = "0-9";
            this._userForm.content.postcodeTXT.restrict = "A-Z\\0-9";
            this._userForm.content.telefoonTXT.restrict = "0-9";
            this.initTabindex();
            return;
            
        }


        private function completeHandler(arg0:flash.events::Event)
        {
            trace("LOAD COMPLETE");
            if(arg0.target == this.imgFile)
            {
                loadBytes(this.imgFile.data);
            }
            return;
            
        }


        private function nextClick(arg0:flash.events::MouseEvent)
        {
            if(this.curForm == 1)
            {
                TweenMax.to(this._userForm.content, 0.8, {"x" : 1073741313, "ease" : Expo.easeOut});
                TweenMax.to(this._userForm.header.stap1, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                this._userForm.nextBtn.tx.text = "Verder naar Stap 2 ›";
                this._userForm.prevBtn.visible = true;
                var loc0:* = this;
                var loc1:* = this.curForm + 1;
                loc0.curForm = this.curForm;
            }
            else
            {
                if(this.curForm == 2)
                {
                    TweenMax.to(this._userForm.prevBtn, 0.5, {"autoAlpha" : 1, "delay" : 0.3, "ease" : Expo.easeOut});
                    TweenMax.to(this._userForm.header.stap1, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                    TweenMax.to(this._userForm.header.stap2, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                    TweenMax.to(this._userForm.content, 0.8, {"x" : 1073740760, "ease" : Expo.easeOut});
                    this._userForm.nextBtn.tx.text = "Verder naar Stap 3 ›";
                    loc0 = this;
                    loc1 = this.curForm + 1;
                    loc0.curForm = this.curForm;
                }
                else
                {
                    if(this.curForm == 3)
                    {
                        TweenMax.to(this._userForm.header.stap2, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                        TweenMax.to(this._userForm.header.stap3, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                        TweenMax.to(this._userForm.content, 0.8, {"x" : 1073740220, "ease" : Expo.easeOut});
                        this._userForm.nextBtn.tx.text = "Verder naar Stap 4 ›";
                        loc0 = this;
                        loc1 = this.curForm + 1;
                        loc0.curForm = this.curForm;
                    }
                    else
                    {
                        if(this.curForm == 4)
                        {
                            TweenMax.to(this._userForm.header.stap3, 0.5, {"alpha" : 0.5, "ease" : Expo.easeOut});
                            TweenMax.to(this._userForm.header.stap4, 0.5, {"alpha" : 1, "ease" : Expo.easeOut});
                            TweenMax.to(this._userForm.content, 0.8, {"x" : 1073739681, "ease" : Expo.easeOut});
                            this._userForm.nextBtn.tx.text = "Versturen ›";
                            loc0 = this;
                            loc1 = this.curForm + 1;
                            loc0.curForm = this.curForm;
                        }
                        else
                        {
                            if(this.curForm == 5)
                            {
                                if(this.validateForm())
                                {
                                    getOverlay("8", this.chosenGroup);
                                }
                            }
                        }
                    }
                }
            }
            return;
            
        }


        private function sendFiles()
        {
            MD5_test = null;
            filename = null;
            loadedImage = null;
            extensionIndex = 0;
            baseName = null;
            this.URLrequest = new URLRequest("http://vodafone.egotribe.nl/lib/cv_upload.php");
            variables = new URLVariables();
            variables.todayDate = new Date();
            variables.Name = "";
            variables.Email = "";
            this.URLrequest.method = URLRequestMethod.POST;
            this.URLrequest.data = variables;
            upload(this.URLrequest);
            MD5_test = new MD5();
            try {
                    filename = calculate(this.imgFile.name) + ".png";
            
            } catch (e:Error) {
                var loc1:* = e;
                    variables = null;
                    loadedImage = this.photoLoader.contentLoaderInfo.url;
                    extensionIndex = lastIndexOf(".");
                    baseName = substring(lastIndexOf("/") + 1, ( (extensionIndex > 255)? extensionIndex : Number.MAX_VALUE ));
                trace(baseName);
                    filename = calculate(baseName) + ".png";
            
            }
            trace("filename: " + filename);
            photoMask = this._userForm.content.thumbnail.photoMask;
            m = new Matrix();
            scale(this.photoLoader.content.scaleX, this.photoLoader.content.scaleY);
            translate(this.photoLoader.x, this.photoLoader.y);
            bitmapData = new BitmapData(photoMask.width, photoMask.height, false, 4294967295);
            draw(this.photoLoader.content, m, null, null, null, true);
            this.imageUploader = new ImageUpload("http://vodafone.egotribe.nl/lib/photo_upload.php", bitmapData, filename);
            addEventListener("UploadComplete", this.uploadCompleteDataHandler);
            return;
            
        }


        private function progressHandler(arg0:flash.events::ProgressEvent)
        {
            var loc0:* = NaN;
            if(arg0.target == this.docFile)
            {
                loc0 = Math.round(100 * arg0.bytesLoaded / arg0.bytesTotal);
                this._userForm.errorTXT.text = 0;
            }
            else
            {
                if(arg0.target == this.imgFile)
                {
                    loc0 = Math.round(100 * arg0.bytesLoaded / arg0.bytesTotal);
                    this._userForm.errorTXT.text = 0;
                }
            }
            return;
            
        }


        private function comboChange(arg0:flash.events::Event)
        {
            event = arg0;
            if(this.chosenGroup != this._userForm.content.formSelect.selectedItem.data)
            {
                this.removeHead(this.chosenGroup);
                this.chosenGroup = Number(this._userForm.content.formSelect.selectedItem.data);
            }
            if(this.chosenGroup == 5)
            {
                this._userForm.content.choice.visible = true;
                TweenMax.to(this._userForm.content.choice, 0.4, {"alpha" : 1, "ease" : Expo.easeOut});
            }
            else
            {
                TweenMax.to(this._userForm.content.choice, 0.4, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    _userForm.content.choice.visible = false;
                    return;
            
                }});
            }
            this.initFormRestrict();
            return;
            
        }


        private function setHead(arg0:*)
        {
            num = arg0;
            i = 1;
            while(i < 6)
            {
                Main.REF[0].visible = false;
                Main.REF[0].logo.alpha = 0;
                Main.REF[0].logo.visible = 0;
                    i = i + 1;
            }
            Main.REF[0].visible = true;
            Main.REF[0].x = 600;
            Main.REF[0].head.tooltip.lid.visible = false;
            gotoAndStop("start");
            TweenMax.to(Main.REF[0], 0.4, {"alpha" : 1, "y" : 290, "delay" : 0.3, "ease" : Back.easeOut});
            TweenMax.to(Main.REF[0].top, 0.4, {"scaleY" : 1, "scaleX" : 1, "alpha" : 1, "delay" : 0.3, "ease" : Back.easeOut});
            TweenMax.to(Main.REF[0].top, 1, {"frameLabel" : "end", "delay" : 0.3});
            Main.REF[0].head.tooltip.y = 200;
            Main.REF[0].head.tooltip.visible = true;
            Main.REF[0].head.tooltip.alpha = 1;
            Main.REF[0].logo.alpha = 0;
            removeEventListener(MouseEvent.ROLL_OVER, Main.REF.overHeadBtn);
            removeEventListener(MouseEvent.ROLL_OUT, Main.REF.outHeadBtn);
            removeEventListener(MouseEvent.CLICK, Main.REF.tpInfo);
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("btn_tooltip_info_" + chosenGroup);
                getOverlay("7", chosenGroup);
                return;
            
            });
            return;
            
        }


        private function fileAdded(arg0:flash.events::Event)
        {
            if(arg0.target == this.docFile)
            {
                if(this.docFile.size > 5000 * 1024)
                {
                    this._userForm.errorTXT.text = "Sorry, de CV moet kleiner zijn dan 5MB";
                }
                else
                {
                    this._userForm.content.cvTXT.text = this.docFile.name;
                }
            }
            else
            {
                if(this.imgFile.size > 1000 * 1024)
                {
                    this._userForm.errorTXT.text = "Sorry, de profiel foto moet kleiner zijn dan 1MB";
                }
                load();
            }
            return;
            
        }


        public function overHeadBtn(arg0:flash.events::MouseEvent)
        {
            arg0.currentTarget.tooltip.alpha = 0;
            arg0.currentTarget.tooltip.y = 260;
            arg0.currentTarget.tooltip.visible = 1;
            TweenMax.to(arg0.currentTarget.tooltip, 0.3, {"alpha" : 1, "y" : 190, "ease" : Back.easeOut});
            return;
            
        }


        private function sendForm()
        {
            this._userForm.errorTXT.text = "De gadget wordt geplaatst...";
            var loc0:* = new Array();
            loc0.push(String(Main.REF.token));
            loc0.push(String(Main.REF.tokenSecret));
            loc0.push("z" + String(Main.REF.userID));
            trace("gadgetArray " + loc0);
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.setGadget", loc0, {"onResponse" : this.gadgetData});
            return;
            
        }


        private function initForm()
        {
            this._formBG = new formbgMC();
            this._formBG.x = 20;
            this._formBG.y = 30;
            this.addChild(this._formBG);
            this._userForm = new userFormMC();
            addChild(this._userForm);
            this._userForm.prevBtn.visible = false;
            this._userForm.blank.visible = false;
            addEventListener("pickGalleryImage", this.galleryImagePickedHandler);
            TweenMax.from(this._formBG, 0.8, {"x" : 1073741024, "ease" : Expo.easeOut});
            trackPageGA("page_formulier");
            return;
            
        }


        private function photoLoadCompleteHandler(arg0:flash.events::Event)
        {
            var loc0:* = this.photoLoader.content;
            var loc1:* = this._userForm.content.thumbnail;
            var loc2:* = 0;
            this.photoLoader.y = 0;
            this.photoLoader.x = undefined;
            if(loc0.width / loc0.height < loc1.photoMask.width / loc1.photoMask.height)
            {
                loc0.height = loc1.photoMask.height;
                loc0.scaleX = loc0.scaleY;
                this.photoLoader.x = 0;
            }
            else
            {
                loc0.width = loc1.photoMask.width;
                loc0.scaleY = loc0.scaleX;
                this.photoLoader.y = 0;
            }
            Bitmap(loc0).smoothing = true;
            return;
            
        }


        private function validateForm() : Boolean
        {
            var loc1:* = 0;
            var loc0:* = false;
            if(this.chosenGroup == 5)
            {
                if(this._userForm.content.choice.choiceTXT.text == "")
                {
                    loc0 = true;
                    this._userForm.content.choice.choiceBG.error.alpha = 1;
                }
                else
                {
                    this._userForm.content.choice.choiceBG.error.alpha = 0;
                }
                if(this._userForm.content.choice.choice2TXT.text == "")
                {
                    loc0 = true;
                    this._userForm.content.choice.choice2BG.error.alpha = 1;
                }
                else
                {
                    this._userForm.content.choice.choice2BG.error.alpha = 0;
                }
                if(this._userForm.content.choice.choice3TXT.text == "")
                {
                    loc0 = true;
                    this._userForm.content.choice.choice3BG.error.alpha = 1;
                }
                else
                {
                    this._userForm.content.choice.choice3BG.error.alpha = 0;
                }
                if(this._userForm.content.choice.text1TXT.text == "")
                {
                    this._userForm.content.choice.text1BG.error.alpha = 1;
                    loc0 = true;
                }
                else
                {
                    this._userForm.content.choice.text1BG.error.alpha = 0;
                }
                if(this._userForm.content.choice.choice4TXT.text == "")
                {
                    loc0 = true;
                    this._userForm.content.choice.choice4BG.error.alpha = 1;
                }
                else
                {
                    this._userForm.content.choice.choice4BG.error.alpha = 0;
                }
                if((this._userForm.content.choice.choice5TXT.text == "" || !))
                {
                    loc0 = true;
                    this._userForm.content.choice.choice5BG.error.alpha = 1;
                }
                else
                {
                    this._userForm.content.choice.choice5BG.error.alpha = 0;
                }
                loc1 = 1;
                while(loc1 < 6)
                {
                    if(this._userForm.content.choice[0].text == "")
                    {
                        this._userForm.content.choice[0].error.alpha = 1;
                        loc0 = true;
                    }
                    else
                    {
                        this._userForm.content.choice[0].error.alpha = 0;
                    }
                    loc1++;
                }
            }
            else
            {
                if(this._userForm.content.text1TXT.text == "")
                {
                    this._userForm.content.text1BG.error.alpha = 1;
                    loc0 = true;
                }
                else
                {
                    this._userForm.content.text1BG.error.alpha = 0;
                }
                loc1 = 2;
                while(loc1 < 6)
                {
                    if(this._userForm.content[0].text == "")
                    {
                        this._userForm.content[0].error.alpha = 1;
                        loc0 = true;
                    }
                    else
                    {
                        this._userForm.content[0].error.alpha = 0;
                    }
                    loc1++;
                }
            }
            if(this._userForm.content.voornaamTXT.text == "")
            {
                loc0 = true;
                this._userForm.content.voornaamBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.voornaamBG.error.alpha = 0;
            }
            if(this._userForm.content.achternaamTXT.text == "")
            {
                loc0 = true;
                this._userForm.content.achternaamBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.achternaamBG.error.alpha = 0;
            }
            if(this._userForm.content.dagTXT.length < 2)
            {
                loc0 = true;
                this._userForm.content.dagBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.dagBG.error.alpha = 0;
            }
            if(this._userForm.content.maandTXT.length < 2)
            {
                loc0 = true;
                this._userForm.content.maandBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.maandBG.error.alpha = 0;
            }
            if(this._userForm.content.jaarTXT.length < 4)
            {
                loc0 = true;
                this._userForm.content.jaarBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.jaarBG.error.alpha = 0;
            }
            if(this._userForm.content.adresTXT.text == "")
            {
                loc0 = true;
                this._userForm.content.adresBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.adresBG.error.alpha = 0;
            }
            if(this._userForm.content.postcodeTXT.length < 6)
            {
                loc0 = true;
                this._userForm.content.postcodeBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.postcodeBG.error.alpha = 0;
            }
            if(this._userForm.content.plaatsTXT.text == "")
            {
                loc0 = true;
                this._userForm.content.plaatsBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.plaatsBG.error.alpha = 0;
            }
            if(this._userForm.content.telefoonTXT.length < 10)
            {
                loc0 = true;
                this._userForm.content.telefoonBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.telefoonBG.error.alpha = 0;
            }
            if((this._userForm.content.emailTXT.text == "" || !))
            {
                loc0 = true;
                this._userForm.content.emailBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.emailBG.error.alpha = 0;
            }
            if(this._userForm.content.cvTXT.text == "")
            {
                loc0 = true;
                this._userForm.content.cvBG.error.alpha = 1;
            }
            else
            {
                this._userForm.content.cvBG.error.alpha = 0;
            }
            loc1 = 6;
            while(loc1 < 7)
            {
                if(this._userForm.content[0].text == "")
                {
                    this._userForm.content[0].error.alpha = 1;
                    loc0 = true;
                }
                else
                {
                    this._userForm.content[0].error.alpha = 0;
                }
                loc1++;
            }
            if(loc0)
            {
                this._userForm.errorTXT.text = "* Je moet alle velden invullen";
            }
            else
            {
                this._userForm.errorTXT.text = "";
            }
            if(this._userForm.content.akkoordBtn.selected)
            {
                this._userForm.errorTXT.text = "* Je moet akkoord gaan met de Algemene Voorwaarden";
                loc0 = true;
            }
            return loc0;
            
        }


        private function ownerData(arg0:*)
        {
            var loc0:* = null;
            var loc1:* = 0;
            var loc2:* = null;
            trace("user 1 result " + arg0);
            if(arg0 != "fail")
            {
                loc0 = new Array();
                loc0.push(String("z" + Main.REF.userID));
                loc0.push(String(Main.REF.userHyvesID));
                loc0.push(String(this.chosenGroup));
                if(this.chosenGroup == 5)
                {
                    loc1 = 1;
                    while(loc1 < 6)
                    {
                        loc0.push(String(this._userForm.content.choice[0].text));
                        loc1++;
                    }
                }
                else
                {
                    loc1 = 1;
                    while(loc1 < 6)
                    {
                        loc0.push(String(this._userForm.content[0].text));
                        loc1++;
                    }
                }
                loc0.push(String(this._userForm.content["text6TXT"].text));
                loc0.push(String(this._userForm.content.choice.choiceTXT.text));
                loc0.push(String(this._userForm.content.choice.choice2TXT.text));
                loc0.push(String(this._userForm.content.choice.choice3TXT.text));
                loc0.push(String(this._userForm.content.choice.choice4TXT.text));
                loc0.push(String(this._userForm.content.choice.choice5TXT.text));
                loc1 = 1;
                while(loc1 < 10)
                {
                    if(this._userForm.content[0].selected)
                    {
                        loc0.push(String("1"));
                    }
                    else
                    {
                        loc0.push(String("0"));
                    }
                    loc1++;
                }
                loc0.push(String(this._userForm.content.int9_TEXT.text));
                loc0.push(String(this.uploadedCV));
                loc0.push(String(this.profilePhotoURL));
                trace("userArray 2 " + loc0);
                loc2 = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.saveUserData", loc0, {"onResponse" : this.userData});
            }
            return;
            
        }


    }
    public class infoContent extends flash.display::MovieClip 
    {

        //========================= Variables
        private var menuArr : Array;
        private var _contentHolder : MovieClip;
        private var btnNum : Number;
        private var num : Number;
        private var setRed : Boolean = True;
        private var xmlArr : Array;
        private var textScroll : Scrollbar;
        private var loader : Loader;
        private var cNum : Number;
        private var loaderCSS : URLLoader;
        private var inhoud : XML;

        //========================= Methods

        public static function infoContent()
        {
            return;
            
        }


        public function infoContent(arg0:Number, arg1:Boolean = true)
        {
            this.menuArr = [["Introductie"], ["Project"], ["Jouw rol"], ["Begeleiding"], ["Contact gegevens"], ["Schrijf je in"], ["Tip ' vriend"]];
            this.xmlArr = [["dance4life.xml", "Brand manager Latijns Amerika › dance4life"], ["musicmayday.xml", "Manager Business Development in Zuid Afrika › Music Mayday"], ["plan.xml", "Social media expert in Azië › Plan Nederland"], ["onemen.xml", "<font size=\"-2\">Communicatiemanager met audiovisuele capaciteiten › oneMen</font>", "oneMen_wod.pdf"], ["vrijekeuze.xml", "Mijn project › ?"]];
            super();
            this.cNum = arg0 - 1;
            this.setRed = arg1;
            this.loadXML();
            trackPageGA("page_info_" + arg0);
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            if(this.btnNum != arg0.currentTarget.id)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 14, "ease" : Expo.easeOut});
                TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0.9, "ease" : Expo.easeOut});
            }
            return;
            
        }


        private function setRedMenu()
        {
            var loc1:* = null;
            var loc0:* = this.menuArr.length - 2;
            while(loc0 < this.menuArr.length)
            {
                loc1 = new prjItemMC();
                loc1.x = 1;
                loc1.y = 0;
                loc1.name = 0;
                loc1.id = 0;
                loc1.tx.ar.text = "›";
                loc1.tx.normal.text = this.menuArr[loc0];
                loc1.bg.alpha = 0;
                if(loc0 == this.menuArr.length - 2)
                {
                    loc1.red.alpha = 0.9;
                }
                else
                {
                    loc1.red.alpha = 0.7;
                }
                this.addChild(loc1);
                loc1.buttonMode = true;
                loc1.addEventListener(MouseEvent.ROLL_OVER, this.overBtn);
                loc1.addEventListener(MouseEvent.ROLL_OUT, this.outBtn);
                loc1.addEventListener(MouseEvent.CLICK, this.redClick);
                loc0++;
            }
            return;
            
        }


        private function loadXML()
        {
            var loc0:* = new URLLoader();
            loc0.addEventListener(Event.COMPLETE, this.showXML);
            loc0.load(new URLRequest("xml/" + this.xmlArr[this.cNum][0]));
            return;
            
        }


        private function showXML(arg0:flash.events::Event)
        {
            XML.ignoreWhitespace = true;
            this.inhoud = new XML(arg0.target.data);
            this._contentHolder = new contentHolder();
            this.addChild(this._contentHolder);
            this.setMenu();
            if(this.setRed)
            {
                this.setRedMenu();
            }
            this.setContent(0);
            this.btnNum = 0;
            return;
            
        }


        private function btnClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = 0;
            if(this.btnNum != arg0.currentTarget.id)
            {
                this.btnNum = arg0.currentTarget.id;
                this.setContent(this.btnNum);
                loc0 = 0;
                while(loc0 < this.menuArr.length - 2)
                {
                    MovieClip(this.getChildByName("btn" + loc0)).bg.alpha = 0.7;
                    loc0++;
                }
                arg0.currentTarget.bg.alpha = 0.9;
            }
            return;
            
        }


        private function setMenu()
        {
            var loc1:* = null;
            var loc0:* = 0;
            while(loc0 < this.menuArr.length - 2)
            {
                loc1 = new prjItemMC();
                loc1.x = 1;
                loc1.y = 0;
                loc1.name = 0;
                loc1.id = 0;
                loc1.tx.ar.text = "›";
                loc1.tx.normal.text = this.menuArr[loc0];
                if(loc0 == 0)
                {
                    loc1.bg.alpha = 0.9;
                }
                this.addChild(loc1);
                loc1.buttonMode = true;
                loc1.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                loc1.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                loc1.addEventListener(MouseEvent.CLICK, this.btnClick);
                loc0++;
            }
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            if(this.btnNum != arg0.currentTarget.id)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 10, "ease" : Expo.easeOut});
                TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0.7, "ease" : Expo.easeOut});
            }
            return;
            
        }


        private function outBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 10, "ease" : Expo.easeOut});
            if(arg0.currentTarget.id == this.menuArr.length - 1)
            {
                TweenMax.to(arg0.currentTarget.red, 0.2, {"alpha" : 0.7, "ease" : Expo.easeOut});
            }
            return;
            
        }


        private function overBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 14, "ease" : Expo.easeOut});
            TweenMax.to(arg0.currentTarget.red, 0.2, {"alpha" : 0.9, "ease" : Expo.easeOut});
            return;
            
        }


        private function btnPdfClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_info_btn_pdf" + this.cNum + 1);
            URLNavigator.ChangePage(new URLRequest("http://vodafone.egotribe.nl/pdf/" + toString()), "_blank");
            return;
            
        }


        private function setContent(arg0:Number)
        {
            setContent(this.inhoud.item[arg0], this.xmlArr[this.cNum][1]);
            this.num = arg0;
            if(this._contentHolder.content.pdfBtn)
            {
                this._contentHolder.content.pdfBtn.visible = true;
                this._contentHolder.content.pdfBtn.buttonMode = true;
                this._contentHolder.content.pdfBtn.mouseChildren = false;
                removeEventListener(MouseEvent.CLICK, this.btnPdfClick);
                addEventListener(MouseEvent.CLICK, this.btnPdfClick);
            }
            return;
            
        }


        private function redClick(arg0:flash.events::MouseEvent)
        {
            if(arg0.currentTarget.id == this.menuArr.length - 2)
            {
                getOverlay("0");
            }
            else
            {
                getOverlay("3");
            }
            return;
            
        }


    }
    public class inviteFriends extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _formBG : MovieClip;
        private var _userForm : MovieClip;

        //========================= Methods

        public static function inviteFriends()
        {
            return;
            
        }


        public function inviteFriends()
        {
            super();
            this.initBG();
            return;
            
        }


        private function initBG()
        {
            this._formBG = new formbgMC();
            this._formBG.x = 30;
            this._formBG.y = 30;
            this.addChild(this._formBG);
            this._formBG.close.visible = false;
            var loc0:* = new hyvesSAF(0);
            loc0.x = 20;
            loc0.y = 20;
            addChild(loc0);
            TweenMax.from(this._formBG, 0.8, {"x" : 1073741024, "ease" : Expo.easeOut});
            return;
            
        }


    }
    public class klasBasis extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _klasMC : MovieClip;
        private var chosenMenu : String;
        private var groupID : Number;
        private var _klasItemMC : MovieClip;

        //========================= Methods

        public static function klasBasis()
        {
            return;
            
        }


        public function klasBasis(arg0:Number)
        {
            super();
            this.groupID = arg0;
            this.initBG();
            return;
            
        }


        private function setSearchFunctions()
        {
            addEventListener(FocusEvent.FOCUS_IN, function() 
            {
                if(_klasMC.naam.text == "Voornaam")
                {
                    _klasMC.naam.text = "";
                }
                if(_klasMC.achternaam.text == "Achternaam")
                {
                    _klasMC.achternaam.text = "";
                }
                return;
            
            });
            addEventListener(FocusEvent.FOCUS_IN, function() 
            {
                if(_klasMC.naam.text == "Voornaam")
                {
                    _klasMC.naam.text = "";
                }
                if(_klasMC.achternaam.text == "Achternaam")
                {
                    _klasMC.achternaam.text = "";
                }
                return;
            
            });
            this._klasMC.searchBtn.buttonMode = true;
            this._klasMC.searchBtn.mouseChildren = false;
            addEventListener(MouseEvent.CLICK, this.searchClick);
            return;
            
        }


        private function setMenu()
        {
            if(this.groupID > 0)
            {
                this._klasMC.lefBtn.tx.text = "Klassement";
                this._klasMC.rightBtn.tx.text = "Overzicht klassementen";
            }
            else
            {
                this._klasMC.lefBtn.tx.text = "Top10";
                this._klasMC.rightBtn.tx.text = "Laatst toegevoegd";
            }
            this.chosenMenu = this._klasMC.lefBtn.name;
            return;
            
        }


        private function btnLeftClick(arg0:flash.events::MouseEvent)
        {
            if(this.chosenMenu != arg0.currentTarget.name)
            {
                this.chosenMenu = arg0.currentTarget.name;
                this._klasMC.lefBtn.buttonMode = false;
                this._klasMC.rightBtn.buttonMode = true;
                this._klasMC.lefBtn.bg.alpha = 0;
                this._klasMC.rightBtn.bg.alpha = 1;
                TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 3355443});
                TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 6710886});
                if(this.groupID == 6)
                {
                    trace("search");
                    trace(this._klasMC.lefBtn.tx.text);
                }
                else
                {
                    if(this.groupID == 0)
                    {
                        trace(this._klasMC.lefBtn.tx.text);
                        this.initOverzicht();
                    }
                    else
                    {
                        trace(this._klasMC.lefBtn.tx.text);
                        this.initSpecs(this.groupID);
                    }
                }
            }
            return;
            
        }


        public function initLast()
        {
            if(this._klasItemMC)
            {
                removeChild(this._klasItemMC);
                this._klasItemMC = null;
            }
            this._klasItemMC = new klasLast();
            this._klasItemMC.x = 22;
            this._klasItemMC.y = 89;
            this.addChild(this._klasItemMC);
            this._klasMC.lefBtn.bg.alpha = 1;
            this._klasMC.rightBtn.bg.alpha = 0;
            this._klasMC.lefBtn.buttonMode = true;
            this._klasMC.rightBtn.buttonMode = false;
            TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 6710886});
            TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 3355443});
            trackPageGA("page_score_laatst");
            return;
            
        }


        private function searchClick(arg0:flash.events::MouseEvent)
        {
            if(! && !)
            {
                if((! || !))
                {
                    this.initSearch(this._klasMC.naam.text, this._klasMC.achternaam.text);
                }
            }
            return;
            
        }


        private function setMenuFunctions()
        {
            this._klasMC.lefBtn.buttonMode = false;
            this._klasMC.lefBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
            addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
            addEventListener(MouseEvent.CLICK, this.btnLeftClick);
            this._klasMC.rightBtn.buttonMode = true;
            this._klasMC.rightBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
            addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
            addEventListener(MouseEvent.CLICK, this.btnRightClick);
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            if(this.chosenMenu != arg0.currentTarget.name)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.1, {"tint" : 3355443});
            }
            return;
            
        }


        public function initSpecs(arg0:Number)
        {
            if(this._klasItemMC)
            {
                removeChild(this._klasItemMC);
                this._klasItemMC = null;
            }
            this._klasItemMC = new klasSpecs(arg0);
            this._klasItemMC.x = 22;
            this._klasItemMC.y = 89;
            this.addChild(this._klasItemMC);
            this.groupID = arg0;
            this.setMenu();
            this._klasMC.lefBtn.bg.alpha = 0;
            this._klasMC.rightBtn.bg.alpha = 1;
            this._klasMC.lefBtn.buttonMode = false;
            this._klasMC.rightBtn.buttonMode = true;
            TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 3355443});
            TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 6710886});
            trackPageGA("page_score_spec_" + this.groupID);
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            if(this.chosenMenu != arg0.currentTarget.name)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.1, {"tint" : 6710886});
            }
            return;
            
        }


        private function initBG()
        {
            this._klasMC = new klasHolderMC();
            this.addChild(this._klasMC);
            if(this.groupID == 0)
            {
                this.initOverzicht();
            }
            else
            {
                trace("init specs " + this.groupID);
                this.initSpecs(this.groupID);
            }
            this.setMenu();
            this.setMenuFunctions();
            this.setSearchFunctions();
            return;
            
        }


        private function btnRightClick(arg0:flash.events::MouseEvent)
        {
            if(this.chosenMenu != arg0.currentTarget.name)
            {
                this.chosenMenu = arg0.currentTarget.name;
                this._klasMC.lefBtn.buttonMode = true;
                this._klasMC.rightBtn.buttonMode = false;
                this._klasMC.lefBtn.bg.alpha = 1;
                this._klasMC.rightBtn.bg.alpha = 0;
                TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 6710886});
                TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 3355443});
                if(this.groupID == 6)
                {
                    trace("search");
                    trace(this._klasMC.rightBtn.tx.text);
                    this.initOverzicht();
                }
                else
                {
                    if(this.groupID == 0)
                    {
                        trace(this._klasMC.rightBtn.tx.text);
                        this.initLast();
                    }
                    else
                    {
                        trace(this._klasMC.rightBtn.tx.text);
                        this.initOverzicht();
                    }
                }
            }
            return;
            
        }


        public function initSearch(arg0:String, arg1:String)
        {
            if(this._klasItemMC)
            {
                removeChild(this._klasItemMC);
                this._klasItemMC = null;
            }
            this._klasItemMC = new klasSearch(arg0, arg1);
            this._klasItemMC.x = 22;
            this._klasItemMC.y = 89;
            this.addChild(this._klasItemMC);
            this._klasMC.lefBtn.bg.alpha = 1;
            this._klasMC.rightBtn.bg.alpha = 1;
            this._klasMC.lefBtn.buttonMode = true;
            this._klasMC.rightBtn.buttonMode = true;
            this.chosenMenu = "";
            TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 3355443});
            TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 3355443});
            trackPageGA("page_score_zoekresultaat");
            return;
            
        }


        public function initOverzicht()
        {
            if(this._klasItemMC)
            {
                removeChild(this._klasItemMC);
                this._klasItemMC = null;
            }
            this._klasItemMC = new klasOverzicht();
            this._klasItemMC.x = 22;
            this._klasItemMC.y = 89;
            this.addChild(this._klasItemMC);
            this.groupID = 0;
            this.setMenu();
            this._klasMC.lefBtn.bg.alpha = 0;
            this._klasMC.rightBtn.bg.alpha = 1;
            this._klasMC.lefBtn.buttonMode = false;
            this._klasMC.rightBtn.buttonMode = true;
            TweenMax.to(this._klasMC.lefBtn.tx, 0.1, {"tint" : 3355443});
            TweenMax.to(this._klasMC.rightBtn.tx, 0.1, {"tint" : 6710886});
            trackPageGA("page_score_overzicht");
            return;
            
        }


    }
    public class Scrollbar extends flash.display::MovieClip 
    {

        //========================= Variables
        private var bf : BlurFilter;
        private var minY : Number;
        private var _YFactor : Number;
        private var _initY : Number;
        private var _blurred : Boolean;
        private var _background : MovieClip;
        private var contentstarty : Number;
        private var percentuale : uint;
        private var _mask : MovieClip;
        private var _dragged : MovieClip;
        private var _hitarea : MovieClip;
        private var initialized : Boolean = False;
        private var maxY : Number;
        private var _ruler : MovieClip;

        //========================= Methods

        public static function Scrollbar()
        {
            return;
            
        }


        public function Scrollbar(arg0:flash.display::MovieClip, arg1:flash.display::MovieClip, arg2:flash.display::MovieClip, arg3:flash.display::MovieClip, arg4:flash.display::MovieClip, arg5:Boolean = false, arg6:Number = 4)
        {
            super();
            this._dragged = arg0;
            this._mask = arg1;
            this._ruler = arg2;
            this._background = arg3;
            this._hitarea = (arg4) as MovieClip;
            trace(this._hitarea);
            this._blurred = arg5;
            this._YFactor = arg6;
            trace("stage " + stage);
            return;
            
        }


        public Setter function hitarea(arg0:flash.display::MovieClip)
        {
            this._hitarea = arg0;
            return;
            
        }


        public function positionContent()
        {
            var loc0:* = NaN;
            var loc1:* = NaN;
            var loc2:* = NaN;
            var loc7:* = NaN;
            var loc8:* = NaN;
            this._ruler.height = 0;
            this.maxY = 0;
            var loc3:* = this._background.height - this._ruler.height;
            if(this._ruler.y > loc3)
            {
                this._ruler.y = 0;
            }
            this.checkContentLength();
            this.percentuale = 100 / this.maxY * this._ruler.y;
            loc0 = 0;
            loc1 = this._dragged.height + 40 - this._mask.height / 2;
            var loc4:* = this.contentstarty - loc1 - this._mask.height / 2 / 100 * this.percentuale;
            var loc5:* = this._dragged.y;
            var loc6:* = loc4;
            if(loc5 != loc6)
            {
                loc7 = loc6 - loc5;
                loc5 = loc5 + loc7 / this._YFactor;
                loc8 = Math.abs(loc7) / 8;
                this.bf.blurY = 0;
                if(this._blurred == true)
                {
                    this._dragged.filters = new Array(this.bf);
                }
            }
            this._dragged.y = 0;
            return;
            
        }


        private function releaseHandle(arg0:flash.events::MouseEvent)
        {
            stopDrag();
            return;
            
        }


        public function init(arg0:flash.events::Event = null)
        {
            e = arg0;
            if(this.checkPieces() == false)
            {
                trace("SCROLLBAR: CANNOT INITIALIZE");
            }
            else
            {
                if(this.initialized == true)
                {
                    this.reset();
                }
                this.bf = new BlurFilter(0, 0, 1);
                this._dragged.filters = new Array(this.bf);
                this._dragged.mask = this._mask;
                this._dragged.cacheAsBitmap = true;
                this.minY = this._background.y;
                this._ruler.buttonMode = true;
                this.contentstarty = this._dragged.y;
                trace("stage " + this.parent.stage);
                addEventListener(MouseEvent.MOUSE_DOWN, this.clickHandle);
                try {
                    stage.addEventListener(MouseEvent.MOUSE_UP, this.releaseHandle);
                    stage.addEventListener(MouseEvent.MOUSE_WHEEL, this.wheelHandle, true);
            
                } catch (err:*) {
                    var loc1:* = err;
                            e = null;
            
                }
                this.addEventListener(Event.ENTER_FRAME, this.enterFrameHandle);
                this.initialized = true;
            }
            return;
            
        }


        public Setter function background(arg0:flash.display::MovieClip)
        {
            this._background = arg0;
            return;
            
        }


        private function scrollData(arg0:int)
        {
            var loc0:* = NaN;
            var loc1:* = NaN;
            var loc2:* = this._ruler.height / 5;
            loc0 = -arg0 * Math.abs(loc2);
            if(loc0 > 0)
            {
                loc1 = Math.min(this.maxY, this._ruler.y + loc0);
            }
            if(loc0 < 0)
            {
                loc1 = Math.max(this.minY, this._ruler.y + loc0);
            }
            this._ruler.y = 0;
            this.positionContent();
            return;
            
        }


        private function clickHandle(arg0:flash.events::MouseEvent)
        {
            var loc0:* = new Rectangle(this._background.x, this.minY, 0, this.maxY);
            startDrag(false, loc0);
            return;
            
        }


        public Setter function dragged(arg0:flash.display::MovieClip)
        {
            this._dragged = arg0;
            return;
            
        }


        public function reset()
        {
            this._dragged.y = this.contentstarty;
            this._ruler.y = 0;
            return;
            
        }


        public Setter function ruler(arg0:flash.display::MovieClip)
        {
            this._ruler = arg0;
            return;
            
        }


        private function checkPieces() : Boolean
        {
            var loc0:* = true;
            if(this._dragged == null)
            {
                trace("SCROLLBAR: DRAGGED not set");
                loc0 = false;
            }
            if(this._mask == null)
            {
                trace("SCROLLBAR: MASK not set");
                loc0 = false;
            }
            if(this._ruler == null)
            {
                trace("SCROLLBAR: RULER not set");
                loc0 = false;
            }
            if(this._background == null)
            {
                trace("SCROLLBAR: BACKGROUND not set");
                loc0 = false;
            }
            if(this._hitarea == null)
            {
                trace("SCROLLBAR: HITAREA not set");
                loc0 = false;
            }
            return loc0;
            
        }


        public function checkContentLength()
        {
            if(this._dragged.height < this._mask.height)
            {
                this._ruler.visible = false;
                this.reset();
            }
            else
            {
                this._ruler.visible = true;
            }
            return;
            
        }


        private function wheelHandle(arg0:flash.events::MouseEvent)
        {
            if(hitTestPoint(stage.mouseX, stage.mouseY, false))
            {
                this.scrollData(arg0.delta);
            }
            return;
            
        }


        public Setter function maskclip(arg0:flash.display::MovieClip)
        {
            this._mask = arg0;
            return;
            
        }


        private function enterFrameHandle(arg0:flash.events::Event)
        {
            this.positionContent();
            return;
            
        }


    }
    public class hyvesSAF extends flash.display::MovieClip 
    {

        //========================= Variables
        private var tafArray : Array;
        private var tafScroll : Scrollbar;
        private var tafArr : String;
        private var picNum : Number = 0;
        private var friendsData : Object;
        private var _taf : MovieClip;
        private var tafCantVoteArray : Array;
        private var tafNum : Number;

        //========================= Methods

        public static function hyvesSAF()
        {
            return;
            
        }


        public function hyvesSAF(arg0:Number)
        {
            this.tafCantVoteArray = [["Je bent succesvol ingeschreven en<br>je gadget is geplaatst!", "Nodig hieronder je vrienden uit om vanaf 23 augustus op je te stemmen:"], ["Ken jij iemand die het verschil gaat maken?", "Tip een of meerdere van de vrienden over het World of Difference programma:"], ["Nodig je vrienden uit om vanaf 23 augustus op je te stemmen!", "De vrienden hieronder hebben nog niet op je gestemd:"]];
            this.tafArray = [["Je bent succesvol ingeschreven en<br>je gadget is geplaatst!", "Nodig hieronder je vrienden uit om op je te stemmen:"], ["Ken jij iemand die het verschil gaat maken?", "Tip een of meerdere van de vrienden over het World of Difference programma:"], ["Nodig je vrienden uit om op je te stemmen!", "De vrienden hieronder hebben nog niet op je gestemd:"]];
            super();
            this.tafNum = arg0;
            this.initBG();
            this.tafFunctions();
            if(this.tafNum == 0)
            {
                trackPageGA("page_safInschrijven");
            }
            if(this.tafNum == 1)
            {
                trackPageGA("page_taf");
            }
            if(this.tafNum == 2)
            {
                trackPageGA("page_saf");
            }
            this.addEventListener(Event.ENTER_FRAME, this.getTAFData);
            return;
            
        }


        private function tafFunctions()
        {
            this._taf.sendBtn.buttonMode = true;
            this._taf.sendBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.checkTaf);
            this._taf.previewBtn.buttonMode = true;
            this._taf.previewBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, function() 
            {
                if(tafNum == 1)
                {
                    getOverlay("16");
                    trackPageGA("page_taf_btn_tafVB");
                }
                else
                {
                    getOverlay("17");
                    trackPageGA("page_saf_btn_safVB");
                }
                return;
            
            });
            return;
            
        }


        private function onFriendsPictureLoaded(arg0:flash.display::MovieClip, arg1:Number) : Function
        {
            holder = arg0;
            scale = arg1;
            pictureEvent = function() 
            {
                holder.addChild(loc0.currentTarget.content);
                TweenMax.to(holder.parent, 0.4, {"alpha" : 1, "ease" : Expo.easeOut});
                if(picNum < friendsData.length - 1)
                {
                    var loc1:* = picNum;
                    var loc2:* = picNum.picNum + 1;
                    loc1.picNum = picNum.picNum;
                    loadTAFPicture();
                }
                return;
            
            };
            return pictureEvent;
            
        }


        private function initBG()
        {
            this._taf = new tafMC();
            this.addChild(this._taf);
            var loc0:* = this.tafArray;
            if(Main.REF.voteEnabled)
            {
                loc0 = this.tafCantVoteArray;
            }
            this._taf.titel.htmlText = loc0[this.tafNum][0];
            this._taf.sub.htmlText = loc0[this.tafNum][1];
            this._taf.scrollbar.visible = false;
            this._taf.maskmc.visible = false;
            this._taf.blank.visible = false;
            return;
            
        }


        private function ioErrorHandler(arg0:flash.events::IOErrorEvent)
        {
            trace("ioErrorHandler: " + arg0);
            return;
            
        }


        private function initTaf()
        {
            var loc3:* = null;
            this.friendsData = Main.REF.tafData;
            var loc0:* = 0;
            var loc1:* = 0;
            var loc2:* = 0;
            while(loc2 < this.friendsData.length)
            {
                loc3 = new tafItemMC();
                if(loc2 % 6 == 0 && !)
                {
                    loc1 = loc1 + 1;
                    loc0 = 0;
                }
                loc3.y = 0;
                loc3.x = 0;
                loc3.name = 0;
                setSelected(false);
                loc3.naam.text = this.friendsData[loc2].naam;
                loc3.id = this.friendsData[loc2].id;
                loc3.alpha = 0;
                addChild(loc3);
                loc0 = loc0 + 1;
                loc2++;
            }
            if(this.friendsData.length > 18)
            {
                this._taf.maskmc.visible = true;
                this._taf.scrollbar.visible = true;
                this.tafScroll = new Scrollbar(this._taf.holder, this._taf.maskmc, this._taf.scrollbar.ruler, this._taf.scrollbar.background, this._taf.area, false, 3);
                addEventListener(Event.ADDED, this.scrollInit);
                addChild(this.tafScroll);
            }
            this.loadTAFPicture();
            return;
            
        }


        private function loadTAFPicture()
        {
            this.loadFriendsPicture(this.friendsData[this.picNum].image, getChildByName("tafItem" + this.picNum).holder, 1);
            return;
            
        }


        private function getTAFData(arg0:flash.events::Event)
        {
            if(Main.REF.tafData)
            {
                this.removeEventListener(Event.ENTER_FRAME, this.getTAFData);
                this.initTaf();
            }
            return;
            
        }


        private function loadFriendsPicture(arg0:String, arg1:flash.display::MovieClip, arg2:Number)
        {
            url = arg0;
            holder = arg1;
            scale = arg2;
            if(indexOf("bassie_14") != 255)
            {
                    url = "http://vodafone.egotribe.nl/img/bassie_14.jpg";
            }
            loaderContext = new LoaderContext();
            loaderContext.checkPolicyFile = true;
            loaderID = new Loader();
            addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            addEventListener(Event.COMPLETE, this.onFriendsPictureLoaded(holder, scale));
            try {
                load(new URLRequest(url), loaderContext);
            
            } catch (err:*) {
                var loc1:* = err;
                    url = null;
            
            }
            return;
            
        }


        private function sendTaf(arg0:*)
        {
            trace(arg0);
            return;
            
        }


        private function checkTaf(arg0:flash.events::MouseEvent)
        {
            tfArray = null;
            amfConn = null;
            e = arg0;
            this.tafArr = "";
            i = 0;
            while(i < this.friendsData.length)
            {
                if(isChecked())
                {
                    this.tafArr = this.tafArr + ";" + getChildByName("tafItem" + i).id;
                }
                    i = i + 1;
            }
            if(this.tafArr.length > 1)
            {
                    tfArray = new Array();
                push(String(Main.REF.token));
                push(String(Main.REF.tokenSecret));
                push(String(Main.REF.userID));
                push(String(this.tafArr));
                if(this.tafNum == 1)
                {
                            amfConn = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneSafAPI.sendTAF", tfArray, {"onResponse" : this.sendTaf});
                }
                else
                {
                            amfConn = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneSafAPI.sendSAF", tfArray, {"onResponse" : this.sendTaf});
                }
                this._taf.blank.visible = true;
                this._taf.titel.text = "Je bericht wordt verstuurd, een moment geduld aub...";
                TweenMax.from(this._taf.blank, 0.5, {"alpha" : 0, "ease" : Expo.easeOut});
                TweenMax.to(this._taf, 1, {"alpha" : 1, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    if(tafNum == 0)
                    {
                        _taf.titel.text = "Je bericht is succesvol verstuurd!";
                        getOverlay("9");
                    }
                    else
                    {
                        _taf.titel.text = "Je bericht is succesvol verstuurd!";
                    }
                    return;
            
                }});
                if(this.tafNum == 0)
                {
                    trackPageGA("page_safInschrijven_send");
                }
                if(this.tafNum == 1)
                {
                    trackPageGA("page_taf_send");
                }
                if(this.tafNum == 2)
                {
                    trackPageGA("page_saf_send");
                }
            }
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


    }
    public class gallery extends flash.display::MovieClip 
    {

        //========================= Variables
        private var textScroll : Scrollbar;
        private var _preloader : CircleSlicePreloader;
        private var _gallery : MovieClip;

        //========================= Methods

        public static function gallery()
        {
            return;
            
        }


        public function gallery()
        {
            super();
            this._gallery = new galleryMC();
            this.addChild(this._gallery);
            this._gallery.titel.htmlText = "Kies een afbeelding uit de gallerij";
            this._gallery.maskmc.visible = false;
            this._gallery.scrollbar.visible = false;
            this._preloader = new CircleSlicePreloader();
            this._preloader.x = 0;
            this._preloader.y = 0;
            this.loadGallery();
            return;
            
        }


        private function onRollOutImage(arg0:flash.events::MouseEvent)
        {
            var loc0:* = (arg0.currentTarget) as galleryImageMC;
            TweenMax.to(loc0.border, 0.6, {"tint" : 6710886});
            return;
            
        }


        private function onRollOverImage(arg0:flash.events::MouseEvent)
        {
            var loc0:* = (arg0.currentTarget) as galleryImageMC;
            TweenMax.to(loc0.border, 0.4, {"tint" : 14949178});
            return;
            
        }


        public function loadGallery()
        {
            var loc0:* = new Array();
            loc0.push("z" + String(Main.REF.userID));
            loc0.push(String(Main.REF.token));
            loc0.push(String(Main.REF.tokenSecret));
            addChild(this._preloader);
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.getUserMedia", loc0, {"onResponse" : this.showGallery});
            return;
            
        }


        private function onClickImage(arg0:flash.events::MouseEvent)
        {
            var loc0:* = (arg0.target) as LoaderImage;
            pickGalleryImage(loc0.url);
            return;
            
        }


        private function showGallery(arg0:Object)
        {
            var loc3:* = null;
            var loc4:* = undefined;
            removeChild(this._preloader);
            var loc0:* = 0;
            var loc1:* = 0;
            var loc2:* = 0;
            while(loc2 < arg0.items.length)
            {
                loc3 = arg0.items[loc2];
                if(loc2 % 6 == 0 && !)
                {
                    loc1 = loc1 + 1;
                    loc0 = 0;
                }
                loc4 = new galleryImageMC();
                addEventListener(MouseEvent.CLICK, this.onClickImage);
                loc4.addEventListener(MouseEvent.ROLL_OVER, this.onRollOverImage);
                loc4.addEventListener(MouseEvent.ROLL_OUT, this.onRollOutImage);
                loc4.buttonMode = true;
                loc4.mouseChildren = false;
                loc4.load(loc3.image);
                loc4.x = 0;
                loc4.y = 0;
                addChild(loc4);
                loc0 = loc0 + 1;
                loc2++;
            }
            if(this._gallery.holder.height > this._gallery.maskmc.height)
            {
                this._gallery.maskmc.visible = true;
                this._gallery.scrollbar.visible = true;
                trace("show scrollbar");
                this.textScroll = new Scrollbar(this._gallery.holder, this._gallery.maskmc, this._gallery.scrollbar.ruler, this._gallery.scrollbar.background, this._gallery.area, false, 3);
                addEventListener(Event.ADDED_TO_STAGE, this.textInit);
                addChild(this.textScroll);
            }
            return;
            
        }


        private function textInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


    }
    public class hyvesVoters extends flash.display::MovieClip 
    {

        //========================= Variables
        private var tafScroll : Scrollbar;
        private var tafArr : String;
        private var _taf : MovieClip;
        private var picNum : Number = 0;
        private var friendsData : Object;

        //========================= Methods

        public static function hyvesVoters()
        {
            return;
            
        }


        public function hyvesVoters()
        {
            super();
            this.initBG();
            this.tafFunctions();
            this.getVoters();
            return;
            
        }


        private function getVoters()
        {
            var loc0:* = new Array();
            loc0.push(String("z" + Main.REF.userID));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getFriends", loc0, {"onResponse" : this.initTaf});
            return;
            
        }


        private function tafFunctions()
        {
            this._taf.tafBtn.buttonMode = true;
            this._taf.tafBtn.mouseChildren = false;
            addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
            addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
            addEventListener(MouseEvent.CLICK, this.getTaf);
            return;
            
        }


        private function getTaf(arg0:flash.events::MouseEvent)
        {
            e = arg0;
            removeEventListener(MouseEvent.CLICK, this.getTaf);
            TweenMax.to(this._taf, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
            {
                removeChild(_taf);
                var loc0:* = new hyvesSAF(2);
                addChild(loc0);
                loc0.alpha = 0;
                TweenMax.to(loc0, 1, {"alpha" : 1, "ease" : Expo.easeOut});
                return;
            
            }});
            return;
            
        }


        private function initTaf(arg0:*)
        {
            var loc3:* = null;
            this.friendsData = arg0;
            var loc0:* = 0;
            var loc1:* = 0;
            var loc2:* = 0;
            while(loc2 < this.friendsData.length)
            {
                loc3 = new tafItemMC();
                if(loc2 % 6 == 0 && !)
                {
                    loc1 = loc1 + 1;
                    loc0 = 0;
                }
                loc3.y = 0;
                loc3.x = 0;
                loc3.name = 0;
                loc3.check.visible = false;
                loc3.naam.text = this.friendsData[loc2].naam;
                loc3.alpha = 0;
                trace(this.friendsData[loc2].naam);
                addChild(loc3);
                loc0 = loc0 + 1;
                loc2++;
            }
            if(this.friendsData.length > 18)
            {
                this._taf.maskmc.visible = true;
                this._taf.scrollbar.visible = true;
                this.tafScroll = new Scrollbar(this._taf.holder, this._taf.maskmc, this._taf.scrollbar.ruler, this._taf.scrollbar.background, this._taf.area, false, 3);
                addEventListener(Event.ADDED, this.scrollInit);
                addChild(this.tafScroll);
            }
            this.loadTAFPicture();
            return;
            
        }


        private function loadTAFPicture()
        {
            var loc0:* = this.friendsData[this.picNum].image;
            loc0 = join("_14");
            this.loadFriendsPicture(loc0, getChildByName("tafItem" + this.picNum).holder, 1);
            return;
            
        }


        private function onFriendsPictureLoaded(arg0:flash.display::MovieClip, arg1:Number) : Function
        {
            holder = arg0;
            scale = arg1;
            pictureEvent = function() 
            {
                holder.addChild(loc0.currentTarget.content);
                TweenMax.to(holder.parent, 0.4, {"alpha" : 1, "ease" : Expo.easeOut});
                if(picNum < friendsData.length - 1)
                {
                    var loc1:* = picNum;
                    var loc2:* = picNum.picNum + 1;
                    loc1.picNum = picNum.picNum;
                    loadTAFPicture();
                }
                return;
            
            };
            return pictureEvent;
            
        }


        private function loadFriendsPicture(arg0:String, arg1:flash.display::MovieClip, arg2:Number)
        {
            url = arg0;
            holder = arg1;
            scale = arg2;
            if(indexOf("bassie_14") != 255)
            {
                    url = "http://vodafone.egotribe.nl/img/bassie_14.jpg";
            }
            loaderContext = new LoaderContext();
            loaderContext.checkPolicyFile = true;
            loaderID = new Loader();
            addEventListener(IOErrorEvent.IO_ERROR, this.ioErrorHandler);
            addEventListener(Event.COMPLETE, this.onFriendsPictureLoaded(holder, scale));
            try {
                load(new URLRequest(url), loaderContext);
            
            } catch (err:*) {
                var loc1:* = err;
                    url = null;
            
            }
            return;
            
        }


        private function initBG()
        {
            this._taf = new voterMC();
            this.addChild(this._taf);
            this._taf.titel.htmlText = "Wie heeft er op mij gestemd?";
            this._taf.sub.htmlText = 0;
            this._taf.scrollbar.visible = false;
            this._taf.maskmc.visible = false;
            this._taf.blank.visible = false;
            trackPageGA("page_voters");
            return;
            
        }


        private function ioErrorHandler(arg0:flash.events::IOErrorEvent)
        {
            trace("ioErrorHandler: " + arg0);
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


    }
    public class contentHolder extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _sheet : StyleSheet;
        private var _data : XML;
        private var _loaderCSS : URLLoader;
        private var _content : MovieClip;
        private var _contentTypes : Object;

        //========================= Methods

        public static function contentHolder()
        {
            return;
            
        }


        public function contentHolder()
        {
            this._contentTypes = {};
            super();
            return;
            
        }


        private function placeSkinButtonClickHandler(arg0:flash.events::MouseEvent)
        {
            URLNavigator.ChangePage("http://www.hyves.nl/hyvertising/?tryvertisingId=979", "_top");
            return;
            
        }


        private function onLinkClick(arg0:flash.events::TextEvent)
        {
            var loc0:* = null;
            if(arg0.text == "av")
            {
                getSecondOverlay("12");
            }
            else
            {
                if(indexOf("overlay") == 0)
                {
                    loc0 = substring(indexOf("(") + 1, lastIndexOf(")"));
                    getSecondOverlay(loc0);
                }
            }
            return;
            
        }


        private function initContent(arg0:flash.events::Event)
        {
            if(arg0 != null)
            {
                this._sheet = new StyleSheet();
                parseCSS(this._loaderCSS.data);
            }
            this.handleContent();
            return;
            
        }


        private function leefritmeButtonClickHandler(arg0:flash.events::MouseEvent)
        {
            URLNavigator.ChangePage("http://www.leefritme.nl/registreren.html", "_top");
            return;
            
        }


        public function setContent(arg0:XML, arg1:String = "")
        {
            var loc1:* = null;
            this._data = arg0;
            if(this._content)
            {
                removeChild(this._content);
                this._content = null;
            }
            var loc0:* = toString() || "html_with_pdf";
            if(this._contentTypes in loc0)
            {
                this._content = this._contentTypes[loc0];
            }
            var loc2:* = loc0;
            switch(loc2)
            {
                case "html_with_pdf":
                    if(this._content == null)
                    {
                        this._content = new htmlWithPDFContentMC();
                    }
                    break;
                case "html":
                    if(this._content == null)
                    {
                        this._content = new htmlContentMC();
                    }
                    break;
                case "skin":
                    if(this._content == null)
                    {
                        this._content = new skinContentMC();
                        addEventListener(MouseEvent.CLICK, this.placeSkinButtonClickHandler);
                        addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
                        addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
                        this._content.btnPlaceSkin.buttonMode = true;
                        this._content.btnPlaceSkin.mouseChildren = false;
                    }
                    break;
                case "video":
                    if(this._content == null)
                    {
                        this._content = new videoContentMC();
                    }
                    this._content.video.src = arg0.video;
                    break;
                case "video_with_pdf":
                    if(this._content == null)
                    {
                        this._content = new videoWithPDFContentMC();
                    }
                    this._content.video.src = arg0.video;
                    break;
                case "planning":
                    if(this._content == null)
                    {
                        this._content = new planningContentMC();
                    }
                    break;
                case "cases":
                    if(this._content == null)
                    {
                        this._content = new casesContentMC();
                        this._content.casesBtn.buttonMode = true;
                        addEventListener(MouseEvent.CLICK, this.casesBtnClickHandler);
                    }
                    break;
                case "media":
                    if(this._content == null)
                    {
                        this._content = new mediaContentMC();
                    }
                    break;
                case "leefritme":
                    if(this._content == null)
                    {
                        this._content = new leefritmeContentMC();
                        addEventListener(MouseEvent.CLICK, this.leefritmeButtonClickHandler);
                        addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
                        addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
                        this._content.btnLeefritme.buttonMode = true;
                        this._content.btnLeefritme.mouseChildren = false;
                    }
                    break;
                default:
                    break;
            }
            if(this._contentTypes in loc0)
            {
                this._contentTypes[loc0] = this._content;
            }
            addChild(this._content);
            this._content.titel.htmlText = ;
            if(this._content.scrollbar)
            {
                this._content.scrollbar.visible = false;
            }
            if(this._sheet)
            {
                loc1 = new URLRequest("css/flash_style.css");
                this._loaderCSS = new URLLoader();
                addEventListener(Event.COMPLETE, this.initContent);
                load(loc1);
            }
            else
            {
                this.initContent(null);
            }
            return;
            
        }


        private function handleContent()
        {
            var loc1:* = null;
            var loc2:* = null;
            var loc3:* = NaN;
            var loc4:* = null;
            var loc5:* = 0;
            var loc6:* = null;
            var loc7:* = null;
            var loc0:* = toString() || "html_with_pdf";
            var loc8:* = loc0;
            switch(loc8)
            {
                case "planning":
                    break;
                default:
                    this._content.maskmc.visible = false;
                    this._content.area.visible = false;
                    this._content.holder.tx.autoSize = TextFieldAutoSize.LEFT;
                    this._content.holder.tx.multiline = true;
                    this._content.holder.tx.wordWrap = true;
                    this._content.holder.tx.antiAliasType = AntiAliasType.ADVANCED;
                    this._content.holder.tx.embedFonts = true;
                    this._content.holder.tx.styleSheet = this._sheet;
                    this._content.holder.tx.htmlText = 0;
                    removeEventListener(TextEvent.LINK, this.onLinkClick);
                    addEventListener(TextEvent.LINK, this.onLinkClick);
                    if(this._content.holder.height > 260)
                    {
                        this._content.scrollbar.visible = true;
                        loc7 = (getChildByName("textScroll")) as Scrollbar;
                        if((getChildByName("textScroll")) as Scrollbar == null)
                        {
                            loc7 = new Scrollbar(this._content.holder, this._content.maskmc, this._content.scrollbar.ruler, this._content.scrollbar.background, this._content.area, false, 3);
                            new Scrollbar(this._content.holder, this._content.maskmc, this._content.scrollbar.ruler, this._content.scrollbar.background, this._content.area, false, 3).name = "textScroll";
                            loc7.addEventListener(Event.ADDED, this.textInit);
                            addChild(loc7);
                        }
                        else
                        {
                            loc7.reset();
                        }
                    }
                    break;
            }
            return;
            
        }


        public Getter function content() : flash.display::MovieClip
        {
            return this._content;
            
        }


        private function casesBtnClickHandler(arg0:flash.events::MouseEvent)
        {
            URLNavigator.ChangePage("http://www.digilogue.nl/nl/1701-World_of_Difference.html", "_blank");
            return;
            
        }


        private function textInit(arg0:flash.events::Event)
        {
            var loc0:* = (arg0.target) as Scrollbar;
            trace(loc0);
            loc0.init();
            loc0.removeEventListener(Event.ADDED, this.textInit);
            return;
            
        }


    }
    public class basicContentOverlay extends flash.display::MovieClip 
    {

        //========================= Variables
        private var menuArr : Array;
        private var _contentHolder : MovieClip;
        private var btnNum : Number;
        private var loader : Loader;
        private var num : Number;
        private var xml : String = "toolkit.xml";
        private var title : String;
        private var textScroll : Scrollbar;
        private var cNum : Number;
        private var loaderCSS : URLLoader;
        private var inhoud : XML;

        //========================= Methods

        public static function basicContentOverlay()
        {
            return;
            
        }


        public function basicContentOverlay()
        {
            this.menuArr = [["Skin voor jouw hyve"], ["Leefritme tool"], ["PR case Danielle"], ["Free publicity artikelen"], ["Do & dont's"]];
            super();
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            if(this.btnNum != arg0.currentTarget.id)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 14, "ease" : Expo.easeOut});
                TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0.9, "ease" : Expo.easeOut});
            }
            return;
            
        }


        public function init(arg0:Array, arg1:String, arg2:String)
        {
            this.menuArr = ;
            this.xml = ;
            this.title = ;
            this.loadXML();
            return;
            
        }


        private function loadXML()
        {
            var loc0:* = new URLLoader();
            loc0.addEventListener(Event.COMPLETE, this.showXML);
            loc0.load(new URLRequest("xml/" + this.xml));
            return;
            
        }


        private function showXML(arg0:flash.events::Event)
        {
            XML.ignoreWhitespace = true;
            this.inhoud = new XML(arg0.target.data);
            this._contentHolder = new contentHolder();
            addChild(this._contentHolder);
            this.setMenu();
            this.setContent(0);
            this.btnNum = 0;
            return;
            
        }


        private function btnClick(arg0:flash.events::MouseEvent)
        {
            var loc0:* = 0;
            if(this.btnNum != arg0.currentTarget.id)
            {
                this.btnNum = arg0.currentTarget.id;
                this.setContent(this.btnNum);
                loc0 = 0;
                while(loc0 < this.menuArr.length)
                {
                    MovieClip(this.getChildByName("btn" + loc0)).bg.alpha = 0.7;
                    loc0++;
                }
                arg0.currentTarget.bg.alpha = 0.9;
            }
            return;
            
        }


        private function setMenu()
        {
            var loc1:* = null;
            var loc0:* = 0;
            while(loc0 < this.menuArr.length)
            {
                loc1 = new prjItemMC();
                loc1.x = 1;
                loc1.y = 0;
                loc1.name = 0;
                loc1.id = 0;
                loc1.tx.ar.text = "›";
                loc1.tx.normal.text = this.menuArr[loc0][0];
                if(loc0 == 0)
                {
                    loc1.bg.alpha = 0.9;
                }
                this.addChild(loc1);
                trace(this.menuArr[loc0][0]);
                loc1.buttonMode = true;
                loc1.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                loc1.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                loc1.addEventListener(MouseEvent.CLICK, this.btnClick);
                loc0++;
            }
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            if(this.btnNum != arg0.currentTarget.id)
            {
                TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 10, "ease" : Expo.easeOut});
                TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0.7, "ease" : Expo.easeOut});
            }
            return;
            
        }


        private function setContent(arg0:Number)
        {
            setContent(this.inhoud.item[arg0], this.title);
            this.num = arg0;
            return;
            
        }


    }
    public class klasLast extends flash.display::MovieClip 
    {

        //========================= Variables
        private var groupArr : Array;
        private var klasScroll : Scrollbar;
        private var _klasMC : MovieClip;
        private var groupNameArr : Array;
        private var groupID : Number;

        //========================= Methods

        public static function klasLast()
        {
            return;
            
        }


        public function klasLast()
        {
            this.groupArr = [["Brand manager in Latijns Amerika"], ["Manager Business Development in Zuid Afrika"], ["Social media expert in Azië"], ["Communicatiemanager met audiovisuele capaciteiten"]];
            this.groupNameArr = [["dance4life"], ["Music Mayday"], ["Plan Nederland"], ["oneMen"], ["Mijn Project"]];
            super();
            this.initBG();
            return;
            
        }


        private function initKlas(arg0:*)
        {
            var loc1:* = 0;
            var loc2:* = null;
            var loc3:* = null;
            var loc0:* = arg0;
            if(loc0.length > 1)
            {
                this._klasMC.tx.text = "";
                loc1 = 1;
                while(loc1 < loc0.length)
                {
                    loc2 = new specItemMC();
                    new specItemMC().position = 0;
                    loc2.red.alpha = 0;
                    loc3 = loc2.inhoud;
                    if((int(loc0[loc1].position) == 1 || int(loc0[loc1].position) == 2))
                    {
                        gotoAndStop(2);
                    }
                    else
                    {
                        gotoAndStop(1);
                        if(loc1 % 2 == 1)
                        {
                            loc2.bg.alpha = 0;
                        }
                        else
                        {
                            loc2.bg.alpha = 0.8;
                        }
                    }
                    loc2.x = 0;
                    loc2.y = 0;
                    loc2.mdhash = loc0[loc1].mdhash;
                    loc3.pos.text = 1;
                    loc3.naam.text = loc0[loc1].naam;
                    if(loc0[loc1].votes == "1")
                    {
                        loc3.score.text = 0;
                    }
                    else
                    {
                        loc3.score.text = 0;
                    }
                    loc3.sort.text = this.groupNameArr[0];
                    if(loc1 % 2 == 0)
                    {
                        loc2.bg.alpha = 0;
                    }
                    loc2.buttonMode = true;
                    loc2.mouseChildren = false;
                    loc2.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                    loc2.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                    loc2.addEventListener(MouseEvent.CLICK, this.itemClick);
                    addChild(loc2);
                    loc1++;
                }
                if(loc0.length > 17)
                {
                    this._klasMC.maskmc.visible = true;
                    this._klasMC.scrollbar.visible = true;
                    this.klasScroll = new Scrollbar(this._klasMC.holder, this._klasMC.maskmc, this._klasMC.scrollbar.ruler, this._klasMC.scrollbar.background, this._klasMC.area, false, 3);
                    addEventListener(Event.ADDED, this.scrollInit);
                    addChild(this.klasScroll);
                }
            }
            else
            {
                this._klasMC.tx.text = "Nog geen deelnemers";
            }
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 16777215});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 1});
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 3355443});
            var loc0:* = 0;
            var loc1:* = getChildIndex(arg0.currentTarget);
            if((arg0.currentTarget.position == 1 || arg0.currentTarget.position == 2))
            {
                if(loc1 % 2 == 1)
                {
                    loc0 = 0.1;
                }
                else
                {
                    loc0 = 0.08;
                }
            }
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : loc0});
            return;
            
        }


        private function initBG()
        {
            this._klasMC = new klasSpecMC();
            this.addChild(this._klasMC);
            this._klasMC.maskmc.visible = false;
            this._klasMC.scrollbar.visible = false;
            this._klasMC.titel.text = "LAATST TOEGEVOEGD";
            this.getScores();
            return;
            
        }


        private function itemClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_score_btn_showmember");
            closeOverlay();
            getUserContent(arg0.currentTarget.mdhash);
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


        private function getScores()
        {
            var loc0:* = new Array();
            loc0.push(String("0"));
            loc0.push(String("100"));
            loc0.push(String(""));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getRecentUsers", loc0, {"onResponse" : this.initKlas});
            return;
            
        }


    }
    public class klasSearch extends flash.display::MovieClip 
    {

        //========================= Variables
        private var groupArr : Array;
        private var klasScroll : Scrollbar;
        private var _klasMC : MovieClip;
        private var userLastName : String;
        private var userName : String;
        private var groupNameArr : Array;
        private var groupID : Number;

        //========================= Methods

        public static function klasSearch()
        {
            return;
            
        }


        public function klasSearch(arg0:String, arg1:String)
        {
            this.groupArr = [["Brand manager in Latijns Amerika"], ["Manager Business Development in Zuid Afrika"], ["Social media expert in Azië"], ["Communicatiemanager met audiovisuele capaciteiten"]];
            this.groupNameArr = [["dance4life"], ["Music Mayday"], ["Plan Nederland"], ["oneMen"], ["Mijn Project"]];
            super();
            this.userName = arg0;
            this.userLastName = arg1;
            this.initBG();
            return;
            
        }


        private function initKlas(arg0:*)
        {
            var loc1:* = 0;
            var loc2:* = null;
            var loc3:* = null;
            var loc0:* = arg0;
            if(loc0.length > 1)
            {
                this._klasMC.tx.text = "";
                loc1 = 1;
                while(loc1 < loc0.length)
                {
                    loc2 = new specItemMC();
                    new specItemMC().position = 0;
                    if((int(loc0[loc1].position) == 1 || int(loc0[loc1].position) == 2))
                    {
                        loc2.inhoud.visible = false;
                        loc2.inhoudBold.visible = true;
                        loc3 = loc2.inhoudBold;
                        loc2.bg.alpha = 0;
                        if(loc1 % 2 == 0)
                        {
                            loc2.red.alpha = 0.1;
                        }
                        else
                        {
                            loc2.red.alpha = 0.08;
                        }
                    }
                    else
                    {
                        loc2.inhoud.visible = true;
                        loc2.inhoudBold.visible = false;
                        loc3 = loc2.inhoud;
                        if(loc1 % 2 == 1)
                        {
                            loc2.bg.alpha = 0;
                        }
                        else
                        {
                            loc2.bg.alpha = 0.8;
                        }
                    }
                    loc2.x = 0;
                    loc2.y = 0;
                    loc2.mdhash = loc0[loc1].mdhash;
                    loc3.pos.text = 1;
                    loc3.naam.text = loc0[loc1].naam;
                    if(loc0[loc1].votes == "1")
                    {
                        loc3.score.text = 0;
                    }
                    else
                    {
                        loc3.score.text = 0;
                    }
                    loc3.sort.text = this.groupNameArr[0];
                    if(loc1 % 2 == 0)
                    {
                        loc2.bg.alpha = 0;
                    }
                    loc2.buttonMode = true;
                    loc2.mouseChildren = false;
                    loc2.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                    loc2.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                    loc2.addEventListener(MouseEvent.CLICK, this.itemClick);
                    addChild(loc2);
                    loc1++;
                }
                if(loc0.length > 17)
                {
                    this._klasMC.maskmc.visible = true;
                    this._klasMC.scrollbar.visible = true;
                    this.klasScroll = new Scrollbar(this._klasMC.holder, this._klasMC.maskmc, this._klasMC.scrollbar.ruler, this._klasMC.scrollbar.background, this._klasMC.area, false, 3);
                    addEventListener(Event.ADDED, this.scrollInit);
                    addChild(this.klasScroll);
                }
            }
            else
            {
                this._klasMC.tx.text = "Er zijn geen deelnemers gevonden";
            }
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 3355443});
            var loc0:* = 0;
            var loc1:* = getChildIndex(arg0.currentTarget);
            if((arg0.currentTarget.position == 1 || arg0.currentTarget.position == 2))
            {
                if(loc1 % 2 == 1)
                {
                    loc0 = 0.1;
                }
                else
                {
                    loc0 = 0.08;
                }
            }
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : loc0});
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 16777215});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 1});
            return;
            
        }


        private function initBG()
        {
            this._klasMC = new klasSpecMC();
            this.addChild(this._klasMC);
            this._klasMC.maskmc.visible = false;
            this._klasMC.scrollbar.visible = false;
            this._klasMC.titel.text = "ZOEK RESULTAAT";
            this.getScores();
            return;
            
        }


        private function itemClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_score_btn_showmember");
            closeOverlay();
            getUserContent(arg0.currentTarget.mdhash);
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


        private function getScores()
        {
            var loc0:* = new Array();
            loc0.push(String(this.userName));
            loc0.push(String(this.userLastName));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.searchUser", loc0, {"onResponse" : this.initKlas});
            return;
            
        }


    }
    public class klasSpecs extends flash.display::MovieClip 
    {

        //========================= Variables
        private var groupArr : Array;
        private var klasScroll : Scrollbar;
        private var _klasMC : MovieClip;
        private var groupNameArr : Array;
        private var groupID : Number;

        //========================= Methods

        public static function klasSpecs()
        {
            return;
            
        }


        public function klasSpecs(arg0:Number)
        {
            this.groupArr = [["Brand manager in Latijns Amerika"], ["Manager Business Development in Zuid Afrika"], ["Social media expert in Azië"], ["Communicatiemanager met audiovisuele capaciteiten"], ["Project naar eigen keuze"]];
            this.groupNameArr = [["DANCE4LIFE"], ["MUSIC MAYDAY"], ["PLAN NEDERLAND"], ["ONEMEN"], ["MIJN PROJECT"]];
            super();
            this.groupID = arg0;
            this.initBG();
            return;
            
        }


        private function initKlas(arg0:*)
        {
            var loc1:* = 0;
            var loc2:* = null;
            var loc3:* = null;
            var loc0:* = arg0;
            if(loc0.length > 1)
            {
                this._klasMC.tx.text = "";
                loc1 = 1;
                while(loc1 < loc0.length)
                {
                    loc2 = new specItemMC();
                    new specItemMC().position = 0;
                    loc2.red.alpha = 0;
                    loc3 = loc2.inhoud;
                    if((int(loc0[loc1].position) == 1 || int(loc0[loc1].position) == 2))
                    {
                        gotoAndStop(2);
                    }
                    else
                    {
                        gotoAndStop(1);
                        if(loc1 % 2 == 1)
                        {
                            loc2.bg.alpha = 0;
                        }
                        else
                        {
                            loc2.bg.alpha = 0.8;
                        }
                    }
                    loc2.x = 0;
                    loc2.y = 0;
                    loc2.mdhash = loc0[loc1].mdhash;
                    loc3.pos.text = loc0[loc1].position;
                    loc3.naam.text = loc0[loc1].naam;
                    if(loc0[loc1].votes == "1")
                    {
                        loc3.score.text = 0;
                    }
                    else
                    {
                        loc3.score.text = 0;
                    }
                    if(this.groupID == 5)
                    {
                        loc3.sort.text = loc0[loc1].choice;
                    }
                    loc2.buttonMode = true;
                    loc2.mouseChildren = false;
                    loc2.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                    loc2.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                    loc2.addEventListener(MouseEvent.CLICK, this.itemClick);
                    addChild(loc2);
                    loc1++;
                }
                if(loc0.length > 17)
                {
                    this._klasMC.maskmc.visible = true;
                    this._klasMC.scrollbar.visible = true;
                    this.klasScroll = new Scrollbar(this._klasMC.holder, this._klasMC.maskmc, this._klasMC.scrollbar.ruler, this._klasMC.scrollbar.background, this._klasMC.area, false, 3);
                    addEventListener(Event.ADDED, this.scrollInit);
                    addChild(this.klasScroll);
                }
            }
            else
            {
                this._klasMC.tx.text = "Nog geen deelnemers";
            }
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 16777215});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 1});
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 3355443});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 0});
            return;
            
        }


        private function initBG()
        {
            this._klasMC = new klasSpecMC();
            this.addChild(this._klasMC);
            this._klasMC.maskmc.visible = false;
            this._klasMC.scrollbar.visible = false;
            this._klasMC.titel.text = this.groupNameArr[this.groupID];
            this._klasMC.subtitel.text = this.groupArr[this.groupID];
            trace("add specs");
            this.getScores();
            return;
            
        }


        private function itemClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_score_btn_showmember");
            closeOverlay();
            getUserContent(arg0.currentTarget.mdhash);
            return;
            
        }


        private function scrollInit(arg0:flash.events::Event)
        {
            init();
            return;
            
        }


        private function getScores()
        {
            var loc0:* = new Array();
            loc0.push(String("0"));
            loc0.push(String("5000"));
            loc0.push(String(this.groupID));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getKlassement", loc0, {"onResponse" : this.initKlas});
            return;
            
        }


    }
    public class klasOverzicht extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _klasMC : MovieClip;
        private var _klasItemMC : MovieClip;

        //========================= Methods

        public static function klasOverzicht()
        {
            return;
            
        }


        public function klasOverzicht()
        {
            super();
            this.initBG();
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 16777215});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 1});
            return;
            
        }


        private function btnClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_score_btn_overzicht");
            initSpecs(arg0.currentTarget.groupID);
            return;
            
        }


        private function initBG()
        {
            this._klasMC = new klasOverzichtMC();
            this.addChild(this._klasMC);
            this.getScores();
            return;
            
        }


        private function getScores()
        {
            var loc1:* = null;
            var loc2:* = null;
            var loc0:* = 1;
            while(loc0 < 6)
            {
                loc1 = new Array();
                loc1.push(String("0"));
                loc1.push(String("10"));
                loc1.push(String(loc0));
                loc2 = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getKlassement", loc1, {"onResponse" : this.initKlas});
                loc0++;
            }
            return;
            
        }


        private function initKlas(arg0:*)
        {
            var loc2:* = 0;
            var loc3:* = null;
            var loc4:* = null;
            var loc0:* = arg0;
            var loc1:* = loc0[0].group;
            trace("groupID " + loc1 + " - " + loc0.length);
            this._klasMC[0].text = "";
            if(loc0.length > 1)
            {
                loc2 = 1;
                while(loc2 < loc0.length)
                {
                    loc3 = new overItemMC();
                    new overItemMC().position = 0;
                    loc3.red.alpha = 0;
                    loc4 = loc3.inhoud;
                    if((int(loc0[loc2].position) == 1 || int(loc0[loc2].position) == 2))
                    {
                        gotoAndStop(2);
                    }
                    else
                    {
                        gotoAndStop(1);
                        if(loc2 % 2 == 1)
                        {
                            loc3.bg.alpha = 0;
                        }
                        else
                        {
                            loc3.bg.alpha = 0.8;
                        }
                    }
                    loc3.x = 0;
                    loc3.y = 0;
                    loc3.mdhash = loc0[loc2].mdhash;
                    loc4.pos.text = loc0[loc2].position;
                    loc4.naam.text = loc0[loc2].naam;
                    loc4.score.text = loc0[loc2].votes;
                    loc3.buttonMode = true;
                    loc3.mouseChildren = false;
                    loc3.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                    loc3.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                    loc3.addEventListener(MouseEvent.CLICK, this.itemClick);
                    trace("ja");
                    addChild(loc3);
                    loc2++;
                }
                this._klasMC[0].groupID = loc0[0].group;
                this._klasMC[0].buttonMode = true;
                this._klasMC[0].mouseChildren = false;
                addEventListener(MouseEvent.ROLL_OVER, Main.REF.rOverBtn);
                addEventListener(MouseEvent.ROLL_OUT, Main.REF.rOutBtn);
                addEventListener(MouseEvent.CLICK, this.btnClick);
            }
            else
            {
                this._klasMC[0].text = "Nog geen deelnemers";
            }
            return;
            
        }


        private function itemClick(arg0:flash.events::MouseEvent)
        {
            trackPageGA("page_score_btn_showmember");
            closeOverlay();
            getUserContent(arg0.currentTarget.mdhash);
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.inhoud, 0.1, {"tint" : 3355443});
            TweenMax.to(arg0.currentTarget.red, 0.1, {"alpha" : 0});
            return;
            
        }


    }
    public class spelregels extends assets::basicContentOverlay 
    {

        //========================= Methods

        public static function spelregels()
        {
            return;
            
        }


        public function spelregels()
        {
            super();
            this.init([["Inschrijving"], ["Stemproces & Selectie"], ["Looptijd"]], "spelregels.xml", "Spelregels");
            return;
            
        }


    }
    public class toolkit extends assets::basicContentOverlay 
    {

        //========================= Methods

        public static function toolkit()
        {
            return;
            
        }


        public function toolkit()
        {
            super();
            this.init([["Skin voor jouw hyve"], ["Case over stemperiode"], ["Leefritme tool"], ["Leuke media verhalen"]], "toolkit.xml", "Campagne toolkit");
            return;
            
        }


    }
    public class overwod extends assets::basicContentOverlay 
    {

        //========================= Methods

        public static function overwod()
        {
            return;
            
        }


        public function overwod()
        {
            super();
            this.init([["World of Difference"], ["De banen"], ["Inschrijving"], ["Stemprocedure"], ["Selectie"], ["Looptijd"], ["Planning"], ["Vodafone Foundation"]], "over_wod.xml", "Meer info over WoD");
            return;
            
        }


    }

}
package [Global]
{
    public dynamic class VFRegular extends flash.text::Font 
    {

        //========================= Methods

        public static function VFRegular()
        {
            return;
            
        }


        public function VFRegular()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_disabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_disabledSkin()
        {
            return;
            
        }


        public function CellRenderer_disabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_downSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_downSkin()
        {
            return;
            
        }


        public function CellRenderer_downSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_overSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_overSkin()
        {
            return;
            
        }


        public function CellRenderer_overSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_selectedDisabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_selectedDisabledSkin()
        {
            return;
            
        }


        public function CellRenderer_selectedDisabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_selectedDownSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_selectedDownSkin()
        {
            return;
            
        }


        public function CellRenderer_selectedDownSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_selectedOverSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_selectedOverSkin()
        {
            return;
            
        }


        public function CellRenderer_selectedOverSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_selectedUpSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_selectedUpSkin()
        {
            return;
            
        }


        public function CellRenderer_selectedUpSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CellRenderer_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CellRenderer_upSkin()
        {
            return;
            
        }


        public function CellRenderer_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_disabledIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_disabledIcon()
        {
            return;
            
        }


        public function CheckBox_disabledIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_downIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_downIcon()
        {
            return;
            
        }


        public function CheckBox_downIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_overIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_overIcon()
        {
            return;
            
        }


        public function CheckBox_overIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_selectedDisabledIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_selectedDisabledIcon()
        {
            return;
            
        }


        public function CheckBox_selectedDisabledIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_selectedDownIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_selectedDownIcon()
        {
            return;
            
        }


        public function CheckBox_selectedDownIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_selectedOverIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_selectedOverIcon()
        {
            return;
            
        }


        public function CheckBox_selectedOverIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_selectedUpIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_selectedUpIcon()
        {
            return;
            
        }


        public function CheckBox_selectedUpIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBox_upIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function CheckBox_upIcon()
        {
            return;
            
        }


        public function CheckBox_upIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class ComboBox_disabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ComboBox_disabledSkin()
        {
            return;
            
        }


        public function ComboBox_disabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ComboBox_downSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ComboBox_downSkin()
        {
            return;
            
        }


        public function ComboBox_downSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ComboBox_overSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ComboBox_overSkin()
        {
            return;
            
        }


        public function ComboBox_overSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ComboBox_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ComboBox_upSkin()
        {
            return;
            
        }


        public function ComboBox_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class List_skin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function List_skin()
        {
            return;
            
        }


        public function List_skin()
        {
            super();
            return;
            
        }


    }
    public class Main extends flash.display::MovieClip 
    {

        //========================= Variables
        public static var REF : Main;
        public var token : String;
        public var userHyvesID : String;
        public var tafLoaded : Boolean;
        public var tokenSecret : String;
        private var viewerMenuArr : Array;
        public var ownerID : String;
        public var alreadyMember : Boolean;
        public var userID : String;
        public var galleryImage : String;
        public var userLastName : String;
        private var chosenGroup : Number = 1;
        public var _prjInfo : MovieClip;
        private var guestlistData : Object;
        private var ownerMenuArr : Array;
        public var overlay : Overlay;
        public var _head2 : MovieClip;
        public var _head4 : MovieClip;
        public var _head5 : MovieClip;
        public var _head1 : MovieClip;
        public var _head3 : MovieClip;
        public var usrData : Object;
        private var groupArr : Array;
        private var listData : Object;
        public var userGender : String;
        private var chosenHead : Number;
        public var userDOB : String;
        private var usercont : userContent;
        public var group : String;
        public var userScore : String;
        public var userProfiel : String;
        public var _block : MovieClip;
        public var ref : String;
        private var voterMenuArr : Array;
        public var formulier : userForm;
        public var firstTime : Boolean = True;
        public var userType : String;
        private var data : Object;
        public var ownerName : String;
        private var friendsData : Object;
        public var tafData : Object;
        private var _bg : MovieClip;
        private var chosenMenu : Number;
        private var menuHolder : MovieClip;
        public var userName : String;
        public var voteEnabled : Boolean;
        public var userIMG : String;

        //========================= Methods

        public static function Main()
        {
            Security.allowDomain("*");
            return;
            
        }


        public function Main()
        {
            this.data = new Object();
            this.usrData = new Object();
            this.friendsData = new Object();
            this.guestlistData = new Object();
            this.listData = new Object();
            this.viewerMenuArr = [["Schrijf je in", "0", ""], ["Spelregels", "1", ""], ["Meer info over WoD", "2", ""], ["Tip 'n vriend", "3", ""], ["De WoD Hyves", "4", ""], ["Kandidaten", "5", ""], ["Campagne toolkit", "20", ""]];
            this.voterMenuArr = [["Doe zelf mee", "11", ""], ["Spelregels", "1", ""], ["Meer info over WoD", "2", ""], ["Tip 'n vriend", "3", ""], ["De WoD Hyves", "4", ""], ["Kandidaten", "5", ""], ["Campagne toolkit", "20", ""]];
            this.ownerMenuArr = [["Nodig vrienden uit", "12", ""], ["Wie heeft er gestemd?", "13", ""], ["Klassement", "5", ""], ["Spelregels", "1", ""], ["Meer info over WoD", "2", ""], ["Bekijk je inzending", "14", ""], ["Plaats de gadget", "15", ""], ["Campagne toolkit", "20", ""]];
            this.groupArr = [[""], ["dance4life", "dance4life.xml"], ["Music Mayday", "musicmayday.xml"], ["Plan Nederland", "plannl.xml"], ["OneMen", "onemen.xml"], ["Vrije Keuze", "vrijekeuze.xml"]];
            super();
            addEventListener(Event.ADDED_TO_STAGE, this.init);
            return;
            
        }


        public function overHeadBtn(arg0:flash.events::MouseEvent)
        {
            arg0.currentTarget.tooltip.alpha = 0;
            arg0.currentTarget.tooltip.y = 260;
            arg0.currentTarget.tooltip.visible = 1;
            TweenMax.to(arg0.currentTarget.parent.logo, 0.1, {"alpha" : 0, "ease" : Back.easeOut});
            TweenMax.to(arg0.currentTarget.tooltip, 0.3, {"alpha" : 1, "y" : 190, "ease" : Back.easeOut});
            return;
            
        }


        private function rolloutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 13, "ease" : Expo.easeOut});
            if(arg0.currentTarget.id != 0)
            {
                TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0.8, "ease" : Expo.easeOut});
            }
            return;
            
        }


        private function gadgetData(arg0:*)
        {
            MovieClip(getChildByName("btn7")).tx.normal.text = "De gadget is geplaatst";
            return;
            
        }


        private function init(arg0:flash.events::Event)
        {
            Main.REF = this;
            var loc0:* = root.loaderInfo.parameters;
            if(loc0.userIMG)
            {
                this.userID = loc0.userID;
                this.userHyvesID = loc0.userHyvesID;
                this.userName = loc0.userName;
                this.userLastName = loc0.userLastName;
                this.userIMG = loc0.userIMG;
                this.userProfiel = loc0.userProfiel;
                this.userGender = loc0.userGender;
                this.userDOB = loc0.userDOB;
                this.token = loc0.token;
                this.tokenSecret = loc0.tokenSecret;
                this.voteEnabled = true;
                this.ref = loc0.ref;
            }
            else
            {
                this.userID = "15555344c6637d7d";
                this.userHyvesID = "";
                this.userName = "Jaapp";
                this.userLastName = "Der";
                this.userIMG = "http://94.100.123.7/577550001-577600000/577558701-577558800/577558781_16_lVaS_1.jpeg";
                this.userProfiel = "http://hyvestest17.hyves.nl/";
                this.userGender = "m";
                this.userDOB = "3-04-1972";
                this.group = "fbd9f020bf10316";
                this.token = "YXRfMTcyMzg3MzQ4XwitkRvQl-pWAsQNL0P1oM4=";
                this.tokenSecret = "6rU0z-WFejoeDqR_S1JNQw==";
                this.ref = "";
                this.voteEnabled = true;
            }
            this.trackPageGA("loaded");
            this.checkUser();
            return;
            
        }


        public function getOverlay(arg0:String, arg1:Number = 0, arg2:Object = null)
        {
            label = arg0;
            groupID = arg1;
            arg = arg2;
            if(label == "0")
            {
                this.chosenHead = 9;
                this.chosenMenu = 0;
                this.removeHeads();
                this.firstTime = false;
                TweenMax.to(this._block, 0.6, {"x" : 1073741324, "delay" : 0.3, "ease" : Expo.easeOut, "onComplete" : this.getForm});
                if(this._prjInfo)
                {
                    TweenMax.to(this._prjInfo, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                    {
                        removeChild(_prjInfo);
                        _prjInfo = null;
                        return;
            
                    }});
                }
                if(this.usercont)
                {
                    TweenMax.to(this.usercont, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                    {
                        removeChild(usercont);
                        usercont = null;
                        return;
            
                    }});
                }
                trace("schrijf je in 0");
            }
            else
            {
                if(label == "11")
                {
                    trace("inschrijven");
                    TweenMax.to(this._block, 0.5, {"x" : 1073741324, "ease" : Expo.easeOut});
                    TweenMax.to(this.usercont, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                    {
                        removeChild(usercont);
                        removeChild(_block);
                        usercont = null;
                        _block = null;
                        userType = "viewer";
                        placeBlock();
                        placeHeads();
                        return;
            
                    }});
                }
                else
                {
                    if(label == "14")
                    {
                        if(this.userID != this.ownerID)
                        {
                            TweenMax.to(this._block, 0.5, {"x" : 1073741324, "ease" : Expo.easeOut});
                            TweenMax.to(this.usercont, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                            {
                                removeChild(usercont);
                                usercont = null;
                                removeChild(_block);
                                _block = null;
                                userType = "owner";
                                placeBlock();
                                placeUserContent();
                                return;
            
                            }});
                            this.trackPageGA("btn_menu_eigeninschrijving");
                        }
                    }
                    else
                    {
                        if(label == "15")
                        {
                            trace("plaats gadget");
                            MovieClip(getChildByName("btn7")).buttonMode = false;
                            MovieClip(getChildByName("btn7")).tx.normal.text = "Een moment aub";
                            removeEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                            removeEventListener(MouseEvent.CLICK, this.btnClick);
                            this.setGadget();
                            this.trackPageGA("btn_menu_gadgetplaatsen");
                        }
                        else
                        {
                            this.overlay = new Overlay(label, groupID, arg);
                            this.addChild(this.overlay);
                        }
                    }
                }
            }
            return;
            
        }


        private function buildPage()
        {
            this._bg = new bgMC();
            this.addChild(this._bg);
            TweenMax.from(this._bg, 1, {"alpha" : 0, "ease" : Expo.easeOut});
            var loc0:* = new maskMenuMC();
            loc0.x = 684;
            loc0.y = 20;
            this.addChild(loc0);
            this.menuHolder = new MovieClip();
            this.addChild(this.menuHolder);
            this.menuHolder.mask = new maskMenuMC();
            this.setFooter();
            this.placeBlock();
            if(this.ref.length < 32)
            {
                if(this.alreadyMember)
                {
                    this.placeHeads();
                }
                else
                {
                    this.placeUserContent();
                }
                trace("load taf user");
                this.tafLoaded = true;
                this.getTAFData();
            }
            else
            {
                this.placeUserContent(this.ref, true);
            }
            if(this.userType != "viewer")
            {
                this.firstTime = false;
            }
            this.setHomeMenu();
            return;
            
        }


        private function setTafData(arg0:*)
        {
            this.tafData = arg0;
            trace("taf opgehaald");
            return;
            
        }


        public function rOverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 5, "ease" : Expo.easeOut});
            return;
            
        }


        private function outBtn(arg0:flash.events::MouseEvent)
        {
            gotoAndStop(1);
            return;
            
        }


        public function outHeadBtn(arg0:flash.events::MouseEvent)
        {
            arg0.currentTarget.tooltip.visible = 0;
            TweenMax.to(arg0.currentTarget.parent.logo, 0.3, {"alpha" : 1, "ease" : Back.easeOut});
            return;
            
        }


        public function closeOverlay()
        {
            closeOverlay();
            return;
            
        }


        private function getForm()
        {
            this.formulier = new userForm(this.chosenGroup);
            this.addChild(this.formulier);
            this.firstTime = false;
            removeChild(this._block);
            this._block = null;
            return;
            
        }


        private function userData(arg0:*)
        {
            if(arg0 != "fail")
            {
                this.usrData = arg0;
                if(this.usrData[0].id == this.userID)
                {
                    if(this.ref.length == 32)
                    {
                        this.userType = "voter";
                    }
                    else
                    {
                        this.userType = "owner";
                    }
                    this.trackPageGA("owner");
                    this.alreadyMember = true;
                }
                else
                {
                    if(this.ref.length == 32)
                    {
                        this.userType = "voter";
                    }
                    else
                    {
                        this.userType = "viewer";
                    }
                    this.trackPageGA("viewer");
                }
                this.buildPage();
            }
            return;
            
        }


        public function rOutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 0, "ease" : Expo.easeOut});
            return;
            
        }


        private function setGadget()
        {
            var loc0:* = new Array();
            loc0.push(String(this.token));
            loc0.push(String(this.tokenSecret));
            loc0.push(String("z" + this.userID));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.setGadget", loc0, {"onResponse" : this.gadgetData});
            return;
            
        }


        public function tpInfo(arg0:flash.events::MouseEvent)
        {
            var loc0:* = Number(arg0.currentTarget.parent.parent.parent.id);
            this.chosenHead = loc0;
            this.chosenGroup = loc0;
            this[0].head.tooltip.visible = 0;
            this[0].logo.info.alpha = 0;
            TweenMax.to(this[0].logo, 0.3, {"alpha" : 1, "ease" : Back.easeOut});
            removeEventListener(MouseEvent.ROLL_OVER, this.overHeadBtn);
            removeEventListener(MouseEvent.ROLL_OUT, this.outHeadBtn);
            this.trackPageGA("btn_tooltip_info_" + this.chosenGroup);
            TweenMax.to(this[0], 0.2 + loc0 * 0.3, {"x" : 20, "delay" : 0.2, "ease" : Expo.easeOut});
            this.removeHeads();
            this.showPrjInfo(loc0);
            return;
            
        }


        private function setHomeMenu()
        {
            var loc1:* = null;
            var loc2:* = null;
            if(this.alreadyMember)
            {
                loc1 = "owner";
            }
            else
            {
                loc1 = this.userType;
            }
            var loc0:* = 0;
            while(loc0 < this[0].length)
            {
                loc2 = new menuItemMC();
                loc2.x = 802;
                loc2.y = 0;
                loc2.name = 0;
                loc2.id = 0;
                loc2.ids = this[0][loc0][1];
                if(loc0 == 0)
                {
                    loc2.tx.arr.text = "›";
                    loc2.tx.bold.text = this[0][loc0][0];
                    loc2.bg.alpha = 1;
                }
                else
                {
                    loc2.tx.ar.text = "›";
                    loc2.tx.normal.text = this[0][loc0][0];
                }
                addChild(loc2);
                loc2.buttonMode = true;
                loc2.addEventListener(MouseEvent.ROLL_OVER, this.rolloverBtn);
                loc2.addEventListener(MouseEvent.ROLL_OUT, this.rolloutBtn);
                loc2.addEventListener(MouseEvent.CLICK, this.btnClick);
                if(this.firstTime)
                {
                    TweenMax.from(loc2, 0.5, {"x" : 1000, "delay" : 3 + loc0 * 0.1, "ease" : Back.easeOut});
                }
                else
                {
                    TweenMax.from(loc2, 0.5, {"x" : 1000, "delay" : 0.5 + loc0 * 0.1, "ease" : Back.easeOut});
                }
                loc0++;
            }
            return;
            
        }


        private function initHeads()
        {
            var loc0:* = 1;
            while(loc0 < 6)
            {
                gotoAndStop("start");
                if(this.firstTime)
                {
                    TweenMax.from(this[0], 0.6, {"alpha" : 0, "y" : 500, "delay" : 1 + loc0 * 0.3, "ease" : Back.easeOut});
                    TweenMax.from(this[0].top, 0.6, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "delay" : 1 + loc0 * 0.3, "ease" : Back.easeOut});
                    TweenMax.to(this[0].top, 1, {"frameLabel" : "end", "delay" : 1 + loc0 * 0.3});
                }
                else
                {
                    TweenMax.from(this[0], 0.6, {"alpha" : 0, "y" : 500, "delay" : 0.5 + loc0 * 0.3, "ease" : Back.easeOut});
                    TweenMax.from(this[0].top, 0.6, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "delay" : 0.5 + loc0 * 0.3, "ease" : Back.easeOut});
                    TweenMax.to(this[0].top, 1, {"frameLabel" : "end", "delay" : 0.5 + loc0 * 0.3});
                }
                this[0].mouseEnabled = false;
                this[0].head.tooltip.visible = 0;
                addEventListener(MouseEvent.ROLL_OVER, this.overHeadBtn);
                addEventListener(MouseEvent.ROLL_OUT, this.outHeadBtn);
                this[0].head.tooltip.info.buttonMode = true;
                addEventListener(MouseEvent.CLICK, this.tpInfo);
                addEventListener(MouseEvent.ROLL_OVER, this.overTPBtn);
                addEventListener(MouseEvent.ROLL_OUT, this.outTPBtn);
                this[0].head.tooltip.lid.buttonMode = true;
                addEventListener(MouseEvent.CLICK, this.tpLid);
                addEventListener(MouseEvent.ROLL_OVER, this.overTPBtn);
                addEventListener(MouseEvent.ROLL_OUT, this.outTPBtn);
                this[0].head.tooltip.klas.buttonMode = true;
                addEventListener(MouseEvent.CLICK, this.tpKlas);
                addEventListener(MouseEvent.ROLL_OVER, this.overTPBtn);
                addEventListener(MouseEvent.ROLL_OUT, this.outTPBtn);
                loc0++;
            }
            return;
            
        }


        public function invFriends()
        {
            if(this.formulier)
            {
                removeChild(this.formulier);
                this.formulier = null;
            }
            var loc0:* = new inviteFriends();
            this.addChild(loc0);
            return;
            
        }


        private function tpLid(arg0:flash.events::MouseEvent)
        {
            this.chosenGroup = arg0.currentTarget.parent.parent.parent.id;
            this.trackPageGA("btn_tooltip_inschrijven_" + this.chosenGroup);
            this.getOverlay("0");
            return;
            
        }


        private function removeHeads()
        {
            var loc0:* = 1;
            while(loc0 < 6)
            {
                if(loc0 != this.chosenHead)
                {
                    TweenMax.to(this[0], 0.4, {"alpha" : 0, "y" : 500, "delay" : loc0 * 0.1, "ease" : Back.easeOut});
                    TweenMax.to(this[0].top, 0.4, {"scaleY" : 0, "scaleX" : 0, "alpha" : 0, "delay" : loc0 * 0.1, "ease" : Back.easeOut});
                }
                loc0++;
            }
            return;
            
        }


        public function removeForm()
        {
            TweenMax.to(this.formulier, 0.8, {"x" : 1073741024, "ease" : Expo.easeOut, "onComplete" : function() 
            {
                removeChild(formulier);
                formulier = null;
                chosenMenu = 22;
                chosenGroup = 1;
                placeBlock();
                return;
            
            }});
            return;
            
        }


        private function onClickLink(arg0:flash.events::TextEvent)
        {
            if(arg0.text == "wod")
            {
                this.getOverlay("2");
            }
            return;
            
        }


        public function getSecondOverlay(arg0:String, arg1:Number = 0)
        {
            var loc0:* = new Overlay(arg0, arg1);
            this.addChild(loc0);
            return;
            
        }


        public function rrOverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 9, "ease" : Expo.easeOut});
            return;
            
        }


        public function rrOutBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.3, {"x" : 14, "ease" : Expo.easeOut});
            return;
            
        }


        private function showHeads()
        {
            var loc0:* = 0;
            var loc1:* = 1;
            while(loc1 < 6)
            {
                if(loc1 != this.chosenHead)
                {
                    this[0].visible = true;
                    this[0].head.tooltip.visible = 0;
                    this[0].head.tooltip.alpha = 0;
                    this[0].alpha = 0;
                    this[0].logo.alpha = 1;
                    addEventListener(MouseEvent.ROLL_OVER, this.overHeadBtn);
                    addEventListener(MouseEvent.ROLL_OUT, this.outHeadBtn);
                    gotoAndStop("start");
                    TweenMax.to(this[0], 0.4, {"alpha" : 1, "y" : 357, "delay" : 0.3 + loc0 - 1 * 0.3, "ease" : Back.easeOut});
                    TweenMax.to(this[0].top, 0.4, {"scaleY" : 1, "scaleX" : 1, "alpha" : 1, "delay" : 0.3 + loc0 - 1 * 0.3, "ease" : Back.easeOut});
                    TweenMax.to(this[0].top, 1, {"frameLabel" : "end", "delay" : 0.3 + loc0 - 1 * 0.3});
                    loc0 = loc0 + 1;
                }
                loc1++;
            }
            if(this.chosenHead < 6)
            {
                TweenMax.to(this[0], 0.2 + this.chosenHead * 0.2, {"x" : this[0].xNum, "ease" : Expo.easeOut});
                this[0].logo.info.alpha = 1;
                addEventListener(MouseEvent.ROLL_OVER, this.overHeadBtn);
                addEventListener(MouseEvent.ROLL_OUT, this.outHeadBtn);
            }
            return;
            
        }


        public function placeUserContent(arg0:String = null, arg1:Boolean = false)
        {
            if(this.usercont)
            {
                removeChild(this.usercont);
            }
            this.usercont = new userContent(arg0, arg1);
            this.addChild(this.usercont);
            return;
            
        }


        public function getTAFData()
        {
            var loc0:* = new Array();
            loc0.push(String(this.token));
            loc0.push(String(this.tokenSecret));
            loc0.push(String("z" + this.userID));
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneHyvesAPI.getHyvesFriends", loc0, {"onResponse" : this.setTafData});
            return;
            
        }


        private function btnClick(arg0:flash.events::MouseEvent)
        {
            if(arg0.currentTarget.ids != this.chosenMenu)
            {
                if(arg0.currentTarget.ids == 0)
                {
                    this.trackPageGA("btn_menu_inschrijven");
                    this.chosenMenu = arg0.currentTarget.ids;
                }
                trace("clicked on: " + arg0.currentTarget.ids);
                this.getOverlay(arg0.currentTarget.ids);
            }
            return;
            
        }


        public function outTPBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 0, "ease" : Expo.easeOut});
            return;
            
        }


        private function setFooter()
        {
            vod = new vodFooterBtn();
            vod.x = 738;
            vod.y = 651;
            this.addChild(vod);
            vod.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("link_footer_wod");
                URLNavigator.ChangePage(new URLRequest("http://www.vodafone.nl/overvodafone/midden_in_onze_maatschappij/netherlands_foundation/"), "_blank");
                return;
            
            });
            hv = new hvFooterBtn();
            hv.x = 896;
            hv.y = 654;
            this.addChild(hv);
            hv.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("link_footer_hyves");
                URLNavigator.ChangePage(new URLRequest("http://www.hyves.nl"), "_blank");
                return;
            
            });
            mtv = new mtvFooterBtn();
            mtv.x = 838;
            mtv.y = 648;
            this.addChild(mtv);
            mtv.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                trackPageGA("link_footer_mtv");
                URLNavigator.ChangePage(new URLRequest("http://www.mtv.nl"), "_blank");
                return;
            
            });
            return;
            
        }


        private function showPrjInfo(arg0:Number)
        {
            label = arg0;
            this._prjInfo = new prjInfoMC();
            this._prjInfo.x = 190;
            this._prjInfo.y = 340;
            this.addChild(this._prjInfo);
            infocontent = new infoContent(label);
            addChild(infocontent);
            this._prjInfo.close.buttonMode = true;
            addEventListener(MouseEvent.CLICK, function() 
            {
                TweenMax.to(_prjInfo, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    showHeads();
                    removeChild(_prjInfo);
                    _prjInfo = null;
                    return;
            
                }});
                return;
            
            });
            TweenMax.from(this._prjInfo, 0.6, {"alpha" : 0, "x" : 1000, "delay" : 0.8, "ease" : Expo.easeOut});
            return;
            
        }


        private function rolloverBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.tx, 0.2, {"x" : 18, "ease" : Expo.easeOut});
            TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 1, "ease" : Expo.easeOut});
            return;
            
        }


        public function placeHeads()
        {
            if(this._head1)
            {
                removeChild(this._head1);
                removeChild(this._head2);
                removeChild(this._head3);
                removeChild(this._head4);
                removeChild(this._head5);
            }
            this._head1 = new head1MC();
            this._head1.x = 20;
            this._head1.y = 357;
            this._head1.id = "1";
            this._head1.xNum = "0";
            this._head1.glow.mouseEnabled = false;
            this._head1.head.tooltip.titel.text = "DANCE4LIFE";
            this._head1.head.tooltip.sub.text = "Brandmanager";
            this.addChild(this._head1);
            this._head2 = new head2MC();
            this._head2.x = 216;
            this._head2.y = 357;
            this._head2.id = "2";
            this._head2.xNum = "196";
            this._head2.glow.mouseEnabled = false;
            this._head2.head.tooltip.titel.text = "MUSIC MAYDAY";
            this._head2.head.tooltip.sub.text = "Manager Business Development";
            this.addChild(this._head2);
            this._head3 = new head3MC();
            this._head3.x = 398;
            this._head3.y = 357;
            this._head3.id = "3";
            this._head3.glow.mouseEnabled = false;
            this._head3.xNum = "378";
            this._head3.head.tooltip.titel.text = "PLAN NEDERLAND";
            this._head3.head.tooltip.sub.text = "Social media expert";
            this.addChild(this._head3);
            this._head4 = new head4MC();
            this._head4.x = 603;
            this._head4.y = 357;
            this._head4.id = "4";
            this._head4.glow.mouseEnabled = false;
            this._head4.xNum = "583";
            this._head4.head.tooltip.titel.htmlText = "ONEMEN";
            this._head4.head.tooltip.sub.text = "Communicatiemanager";
            this.addChild(this._head4);
            this._head5 = new head5MC();
            this._head5.x = 790;
            this._head5.y = 357;
            this._head5.id = "5";
            this._head5.xNum = "770";
            this._head5.glow.mouseEnabled = false;
            this._head5.head.tooltip.titel.text = "MIJN PROJECT";
            this._head5.head.tooltip.sub.text = "";
            this.addChild(this._head5);
            this.initHeads();
            try {
                MovieClip(getChildByName("btn0")).ids = "0";
            
            } catch (err:*) {
                var loc1:* = err;
                    someVal = null;
            
            }
            return;
            
        }


        public function placeBlock()
        {
            if(this._block)
            {
                this._block = new blockMC();
                this._block.x = 1;
                this._block.y = 20;
                this.addChild(this._block);
                if(this.firstTime)
                {
                    TweenMax.from(this._block, 0.8, {"x" : 1073741324, "delay" : 0.5, "ease" : Expo.easeOut});
                }
                else
                {
                    TweenMax.from(this._block, 0.8, {"x" : 1073741324, "ease" : Expo.easeOut});
                }
                this._block.logoBtn.buttonMode = true;
                this._block.logoBtn.mouseChildren = false;
                addEventListener(MouseEvent.CLICK, function() 
                {
                    trackPageGA("link_block_wod");
                    URLNavigator.ChangePage(new URLRequest("http://www.vodafone.nl/overvodafone/midden_in_onze_maatschappij/netherlands_foundation/"), "_blank");
                    return;
            
                });
            }
            s = new StyleSheet();
            setStyle("a", {"textDecoration" : "underline", "fontWeight" : "bold"});
            this._block.sub.styleSheet = s;
            this._block.txtBold.styleSheet = s;
            addEventListener(TextEvent.LINK, this.onClickLink);
            addEventListener(TextEvent.LINK, this.onClickLink);
            this._block.countdown.visible = false;
            if(this.userType == "viewer")
            {
                this._block.titel.htmlText = 0;
                this._block.sub.htmlText = "De Vodafone Netherlands Foundation organiseert jaarlijks World of Difference (WoD). Dit programma biedt jou de kans om je droom waar te maken door een jaar lang betaald bij een goed doel in binnen- of buitenland te werken.";
                this._block.txtBold.htmlText = "Wil jij kans maken op deze droombaan en je inzetten voor een goed doel waar jouw hart ligt? Lees hier dan alles over deze kans en schrijf je in voor één van de vier banen of draag zelf een project aan. Want jij maakt een wereld van verschil!  <a href=\"event:wod\">Meer info over WoD ›</a>";
            }
            else
            {
                if(this.userType == "owner")
                {
                    this._block.titel.htmlText = 0;
                    this._block.sub.htmlText = "Hieronder staat jouw volledige inschrijving voor jouw World of Difference project. Hiermee krijg je de kans om je droom waar te maken door een jaar lang bij een goed doel in het buitenland te werken.  <a href=\"event:wod\">Meer info over WoD ›</a>";
                    this._block.txtBold.htmlText = "";
                }
                else
                {
                    this._block.titel.htmlText = 0;
                    this._block.sub.htmlText = 0;
                    this._block.txtBold.htmlText = "";
                    this._block.countdown.visible = true;
                    start();
                }
            }
            return;
            
        }


        public function trackPageGA(arg0:String)
        {
            if(ExternalInterface.available)
            {
                ExternalInterface.call("teller", arg0);
            }
            return;
            
        }


        private function overBtn(arg0:flash.events::MouseEvent)
        {
            gotoAndStop(2);
            return;
            
        }


        public function pickGalleryImage(arg0:String)
        {
            this.galleryImage = ;
            dispatchEvent(new Event("pickGalleryImage"));
            return;
            
        }


        public function tpKlas(arg0:flash.events::MouseEvent)
        {
            this.trackPageGA("btn_tooltip_score_" + arg0.currentTarget.parent.parent.parent.id);
            this.getOverlay("5", arg0.currentTarget.parent.parent.parent.id);
            return;
            
        }


        private function checkUser()
        {
            var loc0:* = new Array();
            loc0.push(String("z" + this.userID));
            loc0.push("");
            var loc1:* = new amfphp("http://flashservices.egotribe.nl/gateway.php", "vodafoneGadget.getUser", loc0, {"onResponse" : this.userData});
            return;
            
        }


        public function overTPBtn(arg0:flash.events::MouseEvent)
        {
            TweenMax.to(arg0.currentTarget.bg, 0.2, {"alpha" : 1, "ease" : Expo.easeOut});
            return;
            
        }


        public function getUserContent(arg0:String)
        {
            md = arg0;
            this.chosenHead = 9;
            if(this.alreadyMember)
            {
                MovieClip(getChildByName("btn0")).ids = "11";
            }
            if(this._block)
            {
                TweenMax.to(this._block, 0.5, {"x" : 1073741324, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    removeChild(_block);
                    _block = null;
                    userType = "voter";
                    placeBlock();
                    placeUserContent(md, true);
                    return;
            
                }});
            }
            if(this._prjInfo)
            {
                this.chosenHead = 9;
                TweenMax.to(this._prjInfo, 0.5, {"alpha" : 0, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    removeChild(_prjInfo);
                    _prjInfo = null;
                    return;
            
                }});
            }
            if(this._head1)
            {
                this.removeHeads();
            }
            if(this.usercont)
            {
                TweenMax.to(this.usercont, 0.5, {"alpha" : 0, "ease" : Expo.easeOut});
            }
            if(this.formulier)
            {
                TweenMax.to(this.formulier, 0.8, {"x" : 1073741024, "ease" : Expo.easeOut, "onComplete" : function() 
                {
                    removeChild(formulier);
                    formulier = null;
                    userType = "voter";
                    placeBlock();
                    placeUserContent(md, true);
                    return;
            
                }});
            }
            return;
            
        }


    }
    public dynamic class ScrollArrowDown_disabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowDown_disabledSkin()
        {
            return;
            
        }


        public function ScrollArrowDown_disabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowDown_downSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowDown_downSkin()
        {
            return;
            
        }


        public function ScrollArrowDown_downSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowDown_overSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowDown_overSkin()
        {
            return;
            
        }


        public function ScrollArrowDown_overSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowDown_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowDown_upSkin()
        {
            return;
            
        }


        public function ScrollArrowDown_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowUp_disabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowUp_disabledSkin()
        {
            return;
            
        }


        public function ScrollArrowUp_disabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowUp_downSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowUp_downSkin()
        {
            return;
            
        }


        public function ScrollArrowUp_downSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowUp_overSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowUp_overSkin()
        {
            return;
            
        }


        public function ScrollArrowUp_overSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollArrowUp_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollArrowUp_upSkin()
        {
            return;
            
        }


        public function ScrollArrowUp_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollBar_thumbIcon extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollBar_thumbIcon()
        {
            return;
            
        }


        public function ScrollBar_thumbIcon()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollThumb_downSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollThumb_downSkin()
        {
            return;
            
        }


        public function ScrollThumb_downSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollThumb_overSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollThumb_overSkin()
        {
            return;
            
        }


        public function ScrollThumb_overSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollThumb_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollThumb_upSkin()
        {
            return;
            
        }


        public function ScrollThumb_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class ScrollTrack_skin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function ScrollTrack_skin()
        {
            return;
            
        }


        public function ScrollTrack_skin()
        {
            super();
            return;
            
        }


    }
    public dynamic class TextInput_disabledSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function TextInput_disabledSkin()
        {
            return;
            
        }


        public function TextInput_disabledSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class TextInput_upSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function TextInput_upSkin()
        {
            return;
            
        }


        public function TextInput_upSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class casesContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;
        public var casesBtn : MovieClip;

        //========================= Methods

        public static function casesContentMC()
        {
            return;
            
        }


        public function casesContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class focusRectSkin extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function focusRectSkin()
        {
            return;
            
        }


        public function focusRectSkin()
        {
            super();
            return;
            
        }


    }
    public dynamic class galleryMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function galleryMC()
        {
            return;
            
        }


        public function galleryMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class hyvesMessageExampleMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var sender : TextField;
        public var thumb : galleryImageMC;
        public var message : TextField;
        public var title : TextField;

        //========================= Methods

        public static function hyvesMessageExampleMC()
        {
            return;
            
        }


        public function hyvesMessageExampleMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class klasHolderMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var lefBtn : MovieClip;
        public var rightBtn : MovieClip;
        public var achternaam : TextField;
        public var searchBtn : MovieClip;
        public var naam : TextField;

        //========================= Methods

        public static function klasHolderMC()
        {
            return;
            
        }


        public function klasHolderMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class leefritmeContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;
        public var btnLeefritme : MovieClip;

        //========================= Methods

        public static function leefritmeContentMC()
        {
            return;
            
        }


        public function leefritmeContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class mediaContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function mediaContentMC()
        {
            return;
            
        }


        public function mediaContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class planningContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var holder : MovieClip;
        public var titel : TextField;
        public var area : MovieClip;

        //========================= Methods

        public static function planningContentMC()
        {
            return;
            
        }


        public function planningContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class planningItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var column1 : TextField;
        public var column2 : TextField;

        //========================= Methods

        public static function planningItemMC()
        {
            return;
            
        }


        public function planningItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class usrContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var holder : MovieClip;
        public var scrollbar : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function usrContentMC()
        {
            return;
            
        }


        public function usrContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class videoContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var scrollbar : MovieClip;
        public var area : MovieClip;
        public var holder : MovieClip;
        public var titel : TextField;
        public var video : MovieClip;

        //========================= Methods

        public static function videoContentMC()
        {
            return;
            
        }


        public function videoContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class videoWithPDFContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var scrollbar : MovieClip;
        public var pdfBtn : MovieClip;
        public var area : MovieClip;
        public var holder : MovieClip;
        public var titel : TextField;
        public var video : MovieClip;

        //========================= Methods

        public static function videoWithPDFContentMC()
        {
            return;
            
        }


        public function videoWithPDFContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class head1MC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var head : MovieClip;
        public var top : MovieClip;
        public var logo : MovieClip;
        public var glow : MovieClip;

        //========================= Methods

        public static function head1MC()
        {
            return;
            
        }


        public function head1MC()
        {
            super();
            return;
            
        }


    }
    public dynamic class head2MC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var head : MovieClip;
        public var top : MovieClip;
        public var logo : MovieClip;
        public var glow : MovieClip;

        //========================= Methods

        public static function head2MC()
        {
            return;
            
        }


        public function head2MC()
        {
            super();
            return;
            
        }


    }
    public dynamic class head5MC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var head : MovieClip;
        public var top : MovieClip;
        public var logo : MovieClip;
        public var glow : MovieClip;

        //========================= Methods

        public static function head5MC()
        {
            return;
            
        }


        public function head5MC()
        {
            super();
            return;
            
        }


    }
    public dynamic class maskMenuMC extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function maskMenuMC()
        {
            return;
            
        }


        public function maskMenuMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class hvFooterBtn extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function hvFooterBtn()
        {
            return;
            
        }


        public function hvFooterBtn()
        {
            super();
            return;
            
        }


    }
    public dynamic class head4MC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var head : MovieClip;
        public var top : MovieClip;
        public var logo : MovieClip;
        public var glow : MovieClip;

        //========================= Methods

        public static function head4MC()
        {
            return;
            
        }


        public function head4MC()
        {
            super();
            return;
            
        }


    }
    public dynamic class menuItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var tx : MovieClip;
        public var bg : MovieClip;
        public var active : MovieClip;

        //========================= Methods

        public static function menuItemMC()
        {
            return;
            
        }


        public function menuItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class blockMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var sub : TextField;
        public var logoBtn : MovieClip;
        public var txtBold : TextField;
        public var titel : TextField;
        public var countdown : McBlockCountdown;

        //========================= Methods

        public static function blockMC()
        {
            return;
            
        }


        public function blockMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class bgMC extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function bgMC()
        {
            return;
            
        }


        public function bgMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class vodFooterBtn extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function vodFooterBtn()
        {
            return;
            
        }


        public function vodFooterBtn()
        {
            super();
            return;
            
        }


    }
    public dynamic class prjInfoMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var close : MovieClip;

        //========================= Methods

        public static function prjInfoMC()
        {
            return;
            
        }


        public function prjInfoMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class head3MC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var head : MovieClip;
        public var top : MovieClip;
        public var logo : MovieClip;
        public var glow : MovieClip;

        //========================= Methods

        public static function head3MC()
        {
            return;
            
        }


        public function head3MC()
        {
            super();
            return;
            
        }


    }
    public dynamic class mtvFooterBtn extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function mtvFooterBtn()
        {
            return;
            
        }


        public function mtvFooterBtn()
        {
            super();
            return;
            
        }


    }
    public dynamic class overlayMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var confirmBtn : MovieClip;
        public var profielBtn : MovieClip;
        public var close : MovieClip;
        public var errorTXT : TextField;
        public var area : MovieClip;
        public var gadgetBtn : MovieClip;
        public var title : TextField;
        public var wwwHolder : MovieClip;
        public var rulesBtn : MovieClip;
        public var voorwaardenBtn : MovieClip;
        public var holder : MovieClip;
        public var scrollbar : MovieClip;
        public var laterBtn : MovieClip;
        public var countdown : McKlasCountdown;
        public var hyveBtn : MovieClip;
        public var toolkitBtn : MovieClip;

        //========================= Methods

        public static function overlayMC()
        {
            return;
            
        }


        public function overlayMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class headMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var thumbMask : MovieClip;
        public var holder : MovieClip;
        public var infoBtn : MovieClip;
        public var head1 : MovieClip;
        public var voteBtn : MovieClip;
        public var head3 : MovieClip;
        public var head4 : MovieClip;
        public var head5 : MovieClip;
        public var head2 : MovieClip;
        public var tx : TextField;

        //========================= Methods

        public static function headMC()
        {
            return;
            
        }


        public function headMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class userFormMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var content : MovieClip;
        public var errorTXT : TextField;
        public var prevBtn : MovieClip;
        public var nextBtn : MovieClip;
        public var wod : MovieClip;
        public var header : MovieClip;
        public var blank : MovieClip;

        //========================= Methods

        public static function userFormMC()
        {
            return;
            
        }


        public function userFormMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class formbgMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var close : MovieClip;

        //========================= Methods

        public static function formbgMC()
        {
            return;
            
        }


        public function formbgMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class prjItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var red : MovieClip;
        public var tx : MovieClip;
        public var bg : MovieClip;

        //========================= Methods

        public static function prjItemMC()
        {
            return;
            
        }


        public function prjItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class tafItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var check : CheckBtn;
        public var holder : MovieClip;
        public var naam : TextField;

        //========================= Methods

        public static function tafItemMC()
        {
            return;
            
        }


        public function tafItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class tafMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var sub : TextField;
        public var maskmc : MovieClip;
        public var blank : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var previewBtn : MovieClip;
        public var sendBtn : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function tafMC()
        {
            return;
            
        }


        public function tafMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class voterMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var sub : TextField;
        public var maskmc : MovieClip;
        public var tafBtn : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;
        public var blank : MovieClip;

        //========================= Methods

        public static function voterMC()
        {
            return;
            
        }


        public function voterMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class htmlContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function htmlContentMC()
        {
            return;
            
        }


        public function htmlContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class skinContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var btnPlaceSkin : MovieClip;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function skinContentMC()
        {
            return;
            
        }


        public function skinContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class htmlWithPDFContentMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var titel : TextField;
        public var pdfBtn : MovieClip;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;

        //========================= Methods

        public static function htmlWithPDFContentMC()
        {
            return;
            
        }


        public function htmlWithPDFContentMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class specItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var red : MovieClip;
        public var bg : MovieClip;
        public var inhoud : MovieClip;

        //========================= Methods

        public static function specItemMC()
        {
            return;
            
        }


        public function specItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class overItemMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var red : MovieClip;
        public var bg : MovieClip;
        public var inhoud : MovieClip;

        //========================= Methods

        public static function overItemMC()
        {
            return;
            
        }


        public function overItemMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class klasSpecMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var maskmc : MovieClip;
        public var subtitel : TextField;
        public var tx : TextField;
        public var scrollbar : MovieClip;
        public var holder : MovieClip;
        public var area : MovieClip;
        public var titel : TextField;

        //========================= Methods

        public static function klasSpecMC()
        {
            return;
            
        }


        public function klasSpecMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class klasOverzichtMC extends flash.display::MovieClip 
    {

        //========================= Variables
        public var holder1 : MovieClip;
        public var holder2 : MovieClip;
        public var holder3 : MovieClip;
        public var holder4 : MovieClip;
        public var holder5 : MovieClip;
        public var btn1 : MovieClip;
        public var btn2 : MovieClip;
        public var btn3 : MovieClip;
        public var btn4 : MovieClip;
        public var btn5 : MovieClip;
        public var tx1 : TextField;
        public var tx2 : TextField;
        public var tx3 : TextField;
        public var tx4 : TextField;
        public var tx5 : TextField;

        //========================= Methods

        public static function klasOverzichtMC()
        {
            return;
            
        }


        public function klasOverzichtMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class galleryImageMC extends assets::LoaderImage 
    {

        //========================= Methods

        public static function galleryImageMC()
        {
            return;
            
        }


        public function galleryImageMC()
        {
            super();
            return;
            
        }


    }
    public dynamic class CheckBtn extends com.sentoplene.components::CheckBtn 
    {

        //========================= Methods

        public static function CheckBtn()
        {
            return;
            
        }


        public function CheckBtn()
        {
            super();
            addFrameScript(0, this.frame1);
            return;
            
        }


        internal function frame1()
        {
            stop();
            return;
            
        }


    }
    public dynamic class McBlockCountdown extends assets::Countdown 
    {

        //========================= Methods

        public static function McBlockCountdown()
        {
            return;
            
        }


        public function McBlockCountdown()
        {
            super();
            return;
            
        }


    }
    public dynamic class McKlasCountdown extends assets::Countdown 
    {

        //========================= Methods

        public static function McKlasCountdown()
        {
            return;
            
        }


        public function McKlasCountdown()
        {
            super();
            return;
            
        }


    }

}
package gs.events
{
    public class TweenEvent extends flash.events::Event 
    {

        //========================= Variables
        public static const UPDATE : String = "update";
        public static const START : String = "start";
        public static const version : Number = 0.9;
        public static const COMPLETE : String = "complete";
        public var info : Object;

        //========================= Methods

        public static function TweenEvent()
        {
            this.version = 0.9;
            this.START = "start";
            this.UPDATE = "update";
            this.COMPLETE = "complete";
            return;
            
        }


        public function TweenEvent(arg0:String, arg1:Object = null, arg2:Boolean = false, arg3:Boolean = false)
        {
            super(arg0, arg2, arg3);
            this.info = arg1;
            return;
            
        }


        public function clone() : flash.events::Event
        {
            return new TweenEvent(this.type, this.info, this.bubbles, this.cancelable);
            
        }


    }

}
package nl.kylebrekke
{
    public class amfphp extends flash.display::Sprite 
    {

        //========================= Variables
        public static const NETWORK_ERROR : String = "networkError";
        private const objEncoding : uint = 0;
        private var _parameters : Array;
        private var _extraArgs : Object;
        private var _servResponse : *;
        private var amfResponder : Responder;
        private var _errorResponse : *;
        private var _gatewayURL : String;
        private var _callFunction : String;
        private const _debug : Boolean = True;
        private var amfConnection : NetConnection;

        //========================= Methods

        public static function amfphp()
        {
            this.NETWORK_ERROR = "networkError";
            return;
            
        }


        public function amfphp(arg0:String, arg1:String, arg2:Array = null, arg3:Object = null)
        {
            this.amfConnection = new NetConnection();
            this.amfResponder = new Responder(this.handleResponse, this.faultResponse);
            this._extraArgs = new Object();
            super();
            this._gatewayURL = arg0;
            this._callFunction = arg1;
            this._extraArgs = arg3;
            this.initAmfArgs(arg2);
            this.initAmfConnection();
            return;
            
        }


        public static function walkResponse(arg0:Object)
        {
            return;
            
        }


        public static function assocMySQL(arg0:Object) : Array
        {
            var loc2:* = undefined;
            if(arg0.serverInfo)
            {
                return null;
            }
            var loc0:* = new Array();
            var loc1:* = 0;
            while(loc1 < arg0.serverInfo.initialData.length)
            {
                loc0[loc1] = new Array();
                var loc3:* = 0;
                var loc4:* = arg0.serverInfo.columnNames;
                for(loc3 in loc4)
                {
                    loc2 = loc4.__getNextEnumerablePropertyName();
                    loc0[loc1][] = arg0.serverInfo.initialData[loc1][loc2];
                }
                loc1 = loc1 + 1;
            }
            return loc0;
            
        }


        internal function faultResponse(arg0:Object)
        {
            var loc0:* = null;
            if(this._debug)
            {
                trace("faultResponse Function");
                this.walkResponse(arg0);
            }
            this._errorResponse = arg0;
            if(this._extraArgs.onError !== undefined)
            {
                loc0 = new Array();
                loc0.push(this._errorResponse);
                if(this._extraArgs.onErrorParams !== undefined)
                {
                    loc0.splice(1, 0, toString());
                }
                apply(this, loc0);
            }
            return;
            
        }


        private function initAmfArgs(arg0:*)
        {
            var loc0:* = undefined;
            this._parameters = new Array(this._callFunction, this.amfResponder);
            var loc1:* = 0;
            var loc2:* = arg0;
            for(loc1 in loc2)
            {
                loc0 = loc2.__getNextEnumerablePropertyName();
                push(arg0[loc0]);
            }
            return;
            
        }


        private function initAmfConnection()
        {
            this.amfConnection.objectEncoding = this.objEncoding;
            addEventListener("netStatus", this.handleNCStatus);
            addEventListener("ioError", this.handleNCStatus);
            addEventListener("securityError", this.handleNCStatus);
            addEventListener("ArgumentError", this.handleNCStatus);
            connect(this._gatewayURL);
            if(this._debug)
            {
                this.walkResponse(this._parameters);
            }
            apply(this, this._parameters);
            return;
            
        }


        private function handleResponse(arg0:Object)
        {
            var loc0:* = null;
            if(this._debug)
            {
            }
            this._servResponse = arg0;
            this.walkResponse(this._extraArgs);
            if(this._extraArgs.onResponse !== undefined)
            {
                loc0 = new Array();
                loc0.push(this._servResponse);
                if(this._extraArgs.onResponseParams !== undefined)
                {
                    loc0.splice(1, 0, toString());
                }
                apply(this, loc0);
            }
            return;
            
        }


        public Getter function serverResponse()
        {
            return this._servResponse;
            
        }


        public Getter function errorResponse()
        {
            return this._errorResponse;
            
        }


        private function handleNCStatus(arg0:*)
        {
            if(this._debug)
            {
                trace("handleNCStatus Function");
                this.walkResponse(arg0);
            }
            dispatchEvent(new Event(this.NETWORK_ERROR));
            return;
            
        }


    }

}
package WOD2010_Main_23aug_fla
{
    public dynamic class playBtn_32 extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function playBtn_32()
        {
            return;
            
        }


        public function playBtn_32()
        {
            super();
            addFrameScript(0, this.frame1, 1, this.frame2);
            return;
            
        }


        internal function frame1()
        {
            stop();
            return;
            
        }


        internal function frame2()
        {
            stop();
            return;
            
        }


    }

}
package view
{
    public dynamic class BtnMute extends flash.display::MovieClip 
    {

        //========================= Methods

        public static function BtnMute()
        {
            return;
            
        }


        public function BtnMute()
        {
            super();
            addFrameScript(0, this.frame1, 1, this.frame2);
            return;
            
        }


        internal function frame1()
        {
            stop();
            return;
            
        }


        internal function frame2()
        {
            stop();
            return;
            
        }


    }

}
package com.sentoplene.components
{
    public class CheckBtn extends flash.display::MovieClip 
    {

        //========================= Variables
        private var _s : Boolean;
        public var bg : MovieClip;

        //========================= Methods

        public static function CheckBtn()
        {
            return;
            
        }


        public function CheckBtn()
        {
            super();
            this.buttonMode = true;
            addEventListener(MouseEvent.CLICK, this.toggleCheckBox);
            return;
            
        }


        private function toggleCheckBox(arg0:flash.events::MouseEvent)
        {
            if(this._s)
            {
                this.setSelected(false);
            }
            else
            {
                this.setSelected(true);
            }
            return;
            
        }


        public function setSelected(arg0:Boolean)
        {
            this._s = arg0;
            if(arg0)
            {
                this.gotoAndStop("selected");
            }
            else
            {
                this.gotoAndStop("unselected");
            }
            return;
            
        }


        public function isChecked() : Boolean
        {
            return this._s;
            
        }


    }

}
